// Code generated by girgen. DO NOT EDIT.

package gstallocators

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/allocators/allocators.h>
import "C"

// DmabufMemoryGetFd: return the file descriptor associated with mem.
//
// The function takes the following parameters:
//
//    - mem: memory to get the file descriptor.
//
// The function returns the following values:
//
//    - gint: file descriptor associated with the memory, or -1. The file
//      descriptor is still owned by the GstMemory. Use dup to take a copy if you
//      intend to use it beyond the lifetime of this GstMemory.
//
func DmabufMemoryGetFd(mem *gst.Memory) int {
	var _arg1 *C.GstMemory // out
	var _cret C.gint       // in

	_arg1 = (*C.GstMemory)(gextras.StructNative(unsafe.Pointer(mem)))

	_cret = C.gst_dmabuf_memory_get_fd(_arg1)
	runtime.KeepAlive(mem)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IsDmabufMemory: check if mem is dmabuf memory.
//
// The function takes the following parameters:
//
//    - mem: memory to be check.
//
// The function returns the following values:
//
//    - ok: TRUE if mem is dmabuf memory, otherwise FALSE.
//
func IsDmabufMemory(mem *gst.Memory) bool {
	var _arg1 *C.GstMemory // out
	var _cret C.gboolean   // in

	_arg1 = (*C.GstMemory)(gextras.StructNative(unsafe.Pointer(mem)))

	_cret = C.gst_is_dmabuf_memory(_arg1)
	runtime.KeepAlive(mem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DmaBufAllocatorAlloc: return a GstMemory that wraps a dmabuf file descriptor.
//
// The function takes the following parameters:
//
//    - allocator to be used for this memory.
//    - fd: dmabuf file descriptor.
//    - size: memory size.
//
// The function returns the following values:
//
//    - memory: gstMemory based on allocator. When the buffer will be released
//      dmabuf allocator will close the fd. The memory is only mmapped on
//      gst_buffer_map() request.
//
func DmaBufAllocatorAlloc(allocator gst.Allocatorrer, fd int, size uint) *gst.Memory {
	var _arg1 *C.GstAllocator // out
	var _arg2 C.gint          // out
	var _arg3 C.gsize         // out
	var _cret *C.GstMemory    // in

	_arg1 = (*C.GstAllocator)(unsafe.Pointer(coreglib.InternObject(allocator).Native()))
	_arg2 = C.gint(fd)
	_arg3 = C.gsize(size)

	_cret = C.gst_dmabuf_allocator_alloc(_arg1, _arg2, _arg3)
	runtime.KeepAlive(allocator)
	runtime.KeepAlive(fd)
	runtime.KeepAlive(size)

	var _memory *gst.Memory // out

	_memory = (*gst.Memory)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_memory)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _memory
}
