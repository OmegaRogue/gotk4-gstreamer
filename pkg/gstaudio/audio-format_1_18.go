// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/audio/audio.h>
import "C"

// AudioFormatsRaw: return all the raw audio formats supported by GStreamer.
//
// The function returns the following values:
//
//    - audioFormats: array of AudioFormat.
//
func AudioFormatsRaw() []AudioFormat {
	var _cret *C.GstAudioFormat // in
	var _arg1 C.guint           // in

	_cret = C.gst_audio_formats_raw(&_arg1)

	var _audioFormats []AudioFormat // out

	_audioFormats = make([]AudioFormat, _arg1)
	copy(_audioFormats, unsafe.Slice((*AudioFormat)(unsafe.Pointer(_cret)), _arg1))

	return _audioFormats
}

// AudioMakeRawCaps: return a generic raw audio caps for formats defined in
// formats. If formats is NULL returns a caps for all the supported raw audio
// formats, see gst_audio_formats_raw().
//
// The function takes the following parameters:
//
//    - formats (optional): array of raw AudioFormat, or NULL.
//    - layout of audio samples.
//
// The function returns the following values:
//
//    - caps: audio GstCaps.
//
func AudioMakeRawCaps(formats []AudioFormat, layout AudioLayout) *gst.Caps {
	var _arg1 *C.GstAudioFormat // out
	var _arg2 C.guint
	var _arg3 C.GstAudioLayout // out
	var _cret *C.GstCaps       // in

	_arg2 = (C.guint)(len(formats))
	if len(formats) > 0 {
		_arg1 = (*C.GstAudioFormat)(unsafe.Pointer(&formats[0]))
	}
	_arg3 = C.GstAudioLayout(layout)

	_cret = C.gst_audio_make_raw_caps(_arg1, _arg2, _arg3)
	runtime.KeepAlive(formats)
	runtime.KeepAlive(layout)

	var _caps *gst.Caps // out

	_caps = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_caps)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _caps
}
