// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/audio/audio.h>
import "C"

// AudioBufferClip: clip the buffer to the given GstSegment.
//
// After calling this function the caller does not own a reference to buffer
// anymore.
//
// The function takes the following parameters:
//
//    - buffer to clip.
//    - segment: segment in GST_FORMAT_TIME or GST_FORMAT_DEFAULT to which the
//      buffer should be clipped.
//    - rate: sample rate.
//    - bpf: size of one audio frame in bytes. This is the size of one sample *
//      number of channels.
//
// The function returns the following values:
//
//    - ret: NULL if the buffer is completely outside the configured segment,
//      otherwise the clipped buffer is returned.
//
//      If the buffer has no timestamp, it is assumed to be inside the segment
//      and is not clipped.
//
func AudioBufferClip(buffer *gst.Buffer, segment *gst.Segment, rate, bpf int) *gst.Buffer {
	var _arg1 *C.GstBuffer  // out
	var _arg2 *C.GstSegment // out
	var _arg3 C.gint        // out
	var _arg4 C.gint        // out
	var _cret *C.GstBuffer  // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)
	_arg2 = (*C.GstSegment)(gextras.StructNative(unsafe.Pointer(segment)))
	_arg3 = C.gint(rate)
	_arg4 = C.gint(bpf)

	_cret = C.gst_audio_buffer_clip(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(segment)
	runtime.KeepAlive(rate)
	runtime.KeepAlive(bpf)

	var _ret *gst.Buffer // out

	_ret = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ret)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _ret
}
