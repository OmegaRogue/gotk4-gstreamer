// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/audio/audio.h>
import "C"

// GType values.
var (
	GTypeAudioChannelMixerFlags = coreglib.Type(C.gst_audio_channel_mixer_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAudioChannelMixerFlags, F: marshalAudioChannelMixerFlags},
	})
}

// AudioChannelMixerFlags flags passed to gst_audio_channel_mixer_new().
type AudioChannelMixerFlags C.guint

const (
	// AudioChannelMixerFlagsNone: no flag.
	AudioChannelMixerFlagsNone AudioChannelMixerFlags = 0b0
	// AudioChannelMixerFlagsNonInterleavedIn: input channels are not
	// interleaved.
	AudioChannelMixerFlagsNonInterleavedIn AudioChannelMixerFlags = 0b1
	// AudioChannelMixerFlagsNonInterleavedOut: output channels are not
	// interleaved.
	AudioChannelMixerFlagsNonInterleavedOut AudioChannelMixerFlags = 0b10
	// AudioChannelMixerFlagsUnpositionedIn: input channels are explicitly
	// unpositioned.
	AudioChannelMixerFlagsUnpositionedIn AudioChannelMixerFlags = 0b100
	// AudioChannelMixerFlagsUnpositionedOut: output channels are explicitly
	// unpositioned.
	AudioChannelMixerFlagsUnpositionedOut AudioChannelMixerFlags = 0b1000
)

func marshalAudioChannelMixerFlags(p uintptr) (interface{}, error) {
	return AudioChannelMixerFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for AudioChannelMixerFlags.
func (a AudioChannelMixerFlags) String() string {
	if a == 0 {
		return "AudioChannelMixerFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(180)

	for a != 0 {
		next := a & (a - 1)
		bit := a - next

		switch bit {
		case AudioChannelMixerFlagsNone:
			builder.WriteString("None|")
		case AudioChannelMixerFlagsNonInterleavedIn:
			builder.WriteString("NonInterleavedIn|")
		case AudioChannelMixerFlagsNonInterleavedOut:
			builder.WriteString("NonInterleavedOut|")
		case AudioChannelMixerFlagsUnpositionedIn:
			builder.WriteString("UnpositionedIn|")
		case AudioChannelMixerFlagsUnpositionedOut:
			builder.WriteString("UnpositionedOut|")
		default:
			builder.WriteString(fmt.Sprintf("AudioChannelMixerFlags(0b%b)|", bit))
		}

		a = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if a contains other.
func (a AudioChannelMixerFlags) Has(other AudioChannelMixerFlags) bool {
	return (a & other) == other
}
