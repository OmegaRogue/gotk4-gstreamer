// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/audio/audio.h>
import "C"

// The function returns the following values:
//
func AudioClippingMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_audio_clipping_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// The function returns the following values:
//
func AudioDownmixMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_audio_downmix_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// The function returns the following values:
//
func AudioMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_audio_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// BufferAddAudioDownmixMeta attaches AudioDownmixMeta metadata to buffer with
// the given parameters.
//
// matrix is an two-dimensional array of to_channels times from_channels
// coefficients, i.e. the i-th output channels is constructed by multiplicating
// the input channels with the coefficients in matrix[i] and taking the sum of
// the results.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - fromPosition: channel positions of the source.
//    - toPosition: channel positions of the destination.
//    - matrix coefficients.
//
// The function returns the following values:
//
//    - audioDownmixMeta on buffer.
//
func BufferAddAudioDownmixMeta(buffer *gst.Buffer, fromPosition, toPosition []AudioChannelPosition, matrix **float32) *AudioDownmixMeta {
	var _arg1 *C.GstBuffer               // out
	var _arg2 *C.GstAudioChannelPosition // out
	var _arg3 C.gint
	var _arg4 *C.GstAudioChannelPosition // out
	var _arg5 C.gint
	var _arg6 **C.gfloat             // out
	var _cret *C.GstAudioDownmixMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg3 = (C.gint)(len(fromPosition))
	if len(fromPosition) > 0 {
		_arg2 = (*C.GstAudioChannelPosition)(unsafe.Pointer(&fromPosition[0]))
	}
	_arg5 = (C.gint)(len(toPosition))
	if len(toPosition) > 0 {
		_arg4 = (*C.GstAudioChannelPosition)(unsafe.Pointer(&toPosition[0]))
	}
	_arg6 = (**C.gfloat)(unsafe.Pointer(matrix))

	_cret = C.gst_buffer_add_audio_downmix_meta(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(fromPosition)
	runtime.KeepAlive(toPosition)
	runtime.KeepAlive(matrix)

	var _audioDownmixMeta *AudioDownmixMeta // out

	_audioDownmixMeta = (*AudioDownmixMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _audioDownmixMeta
}

// BufferGetAudioDownmixMetaForChannels: find the AudioDownmixMeta on buffer for
// the given destination channel positions.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - toPosition: channel positions of the destination.
//
// The function returns the following values:
//
//    - audioDownmixMeta on buffer.
//
func BufferGetAudioDownmixMetaForChannels(buffer *gst.Buffer, toPosition []AudioChannelPosition) *AudioDownmixMeta {
	var _arg1 *C.GstBuffer               // out
	var _arg2 *C.GstAudioChannelPosition // out
	var _arg3 C.gint
	var _cret *C.GstAudioDownmixMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg3 = (C.gint)(len(toPosition))
	if len(toPosition) > 0 {
		_arg2 = (*C.GstAudioChannelPosition)(unsafe.Pointer(&toPosition[0]))
	}

	_cret = C.gst_buffer_get_audio_downmix_meta_for_channels(_arg1, _arg2, _arg3)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(toPosition)

	var _audioDownmixMeta *AudioDownmixMeta // out

	_audioDownmixMeta = (*AudioDownmixMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _audioDownmixMeta
}

// The function returns the following values:
//
func AudioClippingMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_audio_clipping_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}

// AudioDownmixMeta: extra buffer metadata describing audio downmixing matrix.
// This metadata is attached to audio buffers and contains a matrix to downmix
// the buffer number of channels to channels.
//
// matrix is an two-dimensional array of to_channels times from_channels
// coefficients, i.e. the i-th output channels is constructed by multiplicating
// the input channels with the coefficients in matrix[i] and taking the sum of
// the results.
//
// An instance of this type is always passed by reference.
type AudioDownmixMeta struct {
	*audioDownmixMeta
}

// audioDownmixMeta is the struct that's finalized.
type audioDownmixMeta struct {
	native *C.GstAudioDownmixMeta
}

// Meta: parent Meta.
func (a *AudioDownmixMeta) Meta() *gst.Meta {
	valptr := &a.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// FromPosition: channel positions of the source.
func (a *AudioDownmixMeta) FromPosition() *AudioChannelPosition {
	valptr := &a.native.from_position
	var _v *AudioChannelPosition // out
	_v = (*AudioChannelPosition)(unsafe.Pointer(*valptr))
	return _v
}

// ToPosition: channel positions of the destination.
func (a *AudioDownmixMeta) ToPosition() *AudioChannelPosition {
	valptr := &a.native.to_position
	var _v *AudioChannelPosition // out
	_v = (*AudioChannelPosition)(unsafe.Pointer(*valptr))
	return _v
}

// FromChannels: number of channels of the source.
func (a *AudioDownmixMeta) FromChannels() int {
	valptr := &a.native.from_channels
	var _v int // out
	_v = int(*valptr)
	return _v
}

// ToChannels: number of channels of the destination.
func (a *AudioDownmixMeta) ToChannels() int {
	valptr := &a.native.to_channels
	var _v int // out
	_v = int(*valptr)
	return _v
}

// Matrix: matrix coefficients.
func (a *AudioDownmixMeta) Matrix() **float32 {
	valptr := &a.native.matrix
	var _v **float32 // out
	_v = (**float32)(unsafe.Pointer(*valptr))
	return _v
}

// FromChannels: number of channels of the source.
func (a *AudioDownmixMeta) SetFromChannels(fromChannels int) {
	valptr := &a.native.from_channels
	*valptr = C.gint(fromChannels)
}

// ToChannels: number of channels of the destination.
func (a *AudioDownmixMeta) SetToChannels(toChannels int) {
	valptr := &a.native.to_channels
	*valptr = C.gint(toChannels)
}

// The function returns the following values:
//
func AudioDownmixMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_audio_downmix_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}

// The function returns the following values:
//
func AudioMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_audio_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
