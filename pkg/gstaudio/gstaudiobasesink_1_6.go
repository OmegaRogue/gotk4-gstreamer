// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"fmt"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/audio/audio.h>
import "C"

// GType values.
var (
	GTypeAudioBaseSinkDiscontReason = coreglib.Type(C.gst_audio_base_sink_discont_reason_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAudioBaseSinkDiscontReason, F: marshalAudioBaseSinkDiscontReason},
	})
}

// AudioBaseSinkDiscontReason: different possible reasons for discontinuities.
// This enum is useful for the custom slave method.
type AudioBaseSinkDiscontReason C.gint

const (
	// AudioBaseSinkDiscontReasonNoDiscont: no discontinuity occurred.
	AudioBaseSinkDiscontReasonNoDiscont AudioBaseSinkDiscontReason = iota
	// AudioBaseSinkDiscontReasonNewCaps: new caps are set, causing
	// renegotiotion.
	AudioBaseSinkDiscontReasonNewCaps
	// AudioBaseSinkDiscontReasonFlush samples have been flushed.
	AudioBaseSinkDiscontReasonFlush
	// AudioBaseSinkDiscontReasonSyncLatency: sink was synchronized to the
	// estimated latency (occurs during initialization).
	AudioBaseSinkDiscontReasonSyncLatency
	// AudioBaseSinkDiscontReasonAlignment: aligning buffers failed because the
	// timestamps are too discontinuous.
	AudioBaseSinkDiscontReasonAlignment
	// AudioBaseSinkDiscontReasonDeviceFailure: audio output device experienced
	// and recovered from an error but introduced latency in the process (see
	// also gst_audio_base_sink_report_device_failure()).
	AudioBaseSinkDiscontReasonDeviceFailure
)

func marshalAudioBaseSinkDiscontReason(p uintptr) (interface{}, error) {
	return AudioBaseSinkDiscontReason(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AudioBaseSinkDiscontReason.
func (a AudioBaseSinkDiscontReason) String() string {
	switch a {
	case AudioBaseSinkDiscontReasonNoDiscont:
		return "NoDiscont"
	case AudioBaseSinkDiscontReasonNewCaps:
		return "NewCaps"
	case AudioBaseSinkDiscontReasonFlush:
		return "Flush"
	case AudioBaseSinkDiscontReasonSyncLatency:
		return "SyncLatency"
	case AudioBaseSinkDiscontReasonAlignment:
		return "Alignment"
	case AudioBaseSinkDiscontReasonDeviceFailure:
		return "DeviceFailure"
	default:
		return fmt.Sprintf("AudioBaseSinkDiscontReason(%d)", a)
	}
}

// AudioBaseSinkCustomSlavingCallback: this function is set with
// gst_audio_base_sink_set_custom_slaving_callback() and is called during
// playback. It receives the current time of external and internal clocks, which
// the callback can then use to apply any custom slaving/synchronization
// schemes.
//
// The external clock is the sink's element clock, the internal one is the
// internal audio clock. The internal audio clock's calibration is applied to
// the timestamps before they are passed to the callback. The difference between
// etime and itime is the skew; how much internal and external clock lie apart
// from each other. A skew of 0 means both clocks are perfectly in sync. itime >
// etime means the external clock is going slower, while itime < etime means it
// is going faster than the internal clock. etime and itime are always valid
// timestamps, except for when a discontinuity happens.
//
// requested_skew is an output value the callback can write to. It informs the
// sink of whether or not it should move the playout pointer, and if so, by how
// much. This pointer is only NULL if a discontinuity occurs; otherwise, it is
// safe to write to *requested_skew. The default skew is 0.
//
// The sink may experience discontinuities. If one happens, discont is TRUE,
// itime, etime are set to GST_CLOCK_TIME_NONE, and requested_skew is NULL. This
// makes it possible to reset custom clock slaving algorithms when a
// discontinuity happens.
type AudioBaseSinkCustomSlavingCallback func(sink *AudioBaseSink, etime, itime gst.ClockTime, requestedSkew *gst.ClockTimeDiff, discontReason AudioBaseSinkDiscontReason)
