// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/audio/audio.h>
import "C"

// AudioLevelMetaApiGetType: return the #GType associated with AudioLevelMeta.
//
// The function returns the following values:
//
//    - gType: #GType.
//
func AudioLevelMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_audio_level_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// BufferAddAudioLevelMeta attaches audio level information to buffer. (RFC
// 6464).
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - level: -dBov from 0-127 (127 is silence).
//    - voiceActivity: whether the buffer contains voice activity.
//
// The function returns the following values:
//
//    - audioLevelMeta (optional) on buffer.
//
func BufferAddAudioLevelMeta(buffer *gst.Buffer, level byte, voiceActivity bool) *AudioLevelMeta {
	var _arg1 *C.GstBuffer         // out
	var _arg2 C.guint8             // out
	var _arg3 C.gboolean           // out
	var _cret *C.GstAudioLevelMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg2 = C.guint8(level)
	if voiceActivity {
		_arg3 = C.TRUE
	}

	_cret = C.gst_buffer_add_audio_level_meta(_arg1, _arg2, _arg3)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(level)
	runtime.KeepAlive(voiceActivity)

	var _audioLevelMeta *AudioLevelMeta // out

	if _cret != nil {
		_audioLevelMeta = (*AudioLevelMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _audioLevelMeta
}

// BufferGetAudioLevelMeta: find the AudioLevelMeta on buffer.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//
// The function returns the following values:
//
//    - audioLevelMeta (optional) or NULL when there is no such metadata on
//      buffer.
//
func BufferGetAudioLevelMeta(buffer *gst.Buffer) *AudioLevelMeta {
	var _arg1 *C.GstBuffer         // out
	var _cret *C.GstAudioLevelMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_buffer_get_audio_level_meta(_arg1)
	runtime.KeepAlive(buffer)

	var _audioLevelMeta *AudioLevelMeta // out

	if _cret != nil {
		_audioLevelMeta = (*AudioLevelMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _audioLevelMeta
}

// AudioLevelMeta: meta containing Audio Level Indication:
// https://tools.ietf.org/html/rfc6464
//
// An instance of this type is always passed by reference.
type AudioLevelMeta struct {
	*audioLevelMeta
}

// audioLevelMeta is the struct that's finalized.
type audioLevelMeta struct {
	native *C.GstAudioLevelMeta
}

// Meta: parent Meta.
func (a *AudioLevelMeta) Meta() *gst.Meta {
	valptr := &a.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Level: -dBov from 0-127 (127 is silence).
func (a *AudioLevelMeta) Level() byte {
	valptr := &a.native.level
	var _v byte // out
	_v = byte(*valptr)
	return _v
}

// VoiceActivity: whether the buffer contains voice activity.
func (a *AudioLevelMeta) VoiceActivity() bool {
	valptr := &a.native.voice_activity
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Level: -dBov from 0-127 (127 is silence).
func (a *AudioLevelMeta) SetLevel(level byte) {
	valptr := &a.native.level
	*valptr = C.guint8(level)
}

// VoiceActivity: whether the buffer contains voice activity.
func (a *AudioLevelMeta) SetVoiceActivity(voiceActivity bool) {
	valptr := &a.native.voice_activity
	if voiceActivity {
		*valptr = C.TRUE
	}
}

// AudioLevelMetaGetInfo: return the MetaInfo associated with AudioLevelMeta.
//
// The function returns the following values:
//
//    - metaInfo: MetaInfo.
//
func AudioLevelMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_audio_level_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
