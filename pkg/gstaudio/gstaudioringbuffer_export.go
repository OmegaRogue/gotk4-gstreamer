// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/audio/audio.h>
import "C"

//export _gotk4_gstaudio1_AudioRingBufferCallback
func _gotk4_gstaudio1_AudioRingBufferCallback(arg1 *C.GstAudioRingBuffer, arg2 *C.guint8, arg3 C.guint, arg4 C.gpointer) {
	var fn AudioRingBufferCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AudioRingBufferCallback)
	}

	var _rbuf AudioRingBufferer // out
	var _data []byte            // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gstaudio.AudioRingBufferer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AudioRingBufferer)
			return ok
		})
		rv, ok := casted.(AudioRingBufferer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gstaudio.AudioRingBufferer")
		}
		_rbuf = rv
	}
	_data = make([]byte, arg3)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(arg2)), arg3))

	fn(_rbuf, _data)
}
