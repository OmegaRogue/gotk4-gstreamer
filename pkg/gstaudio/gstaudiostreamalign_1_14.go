// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/audio/audio.h>
import "C"

// GType values.
var (
	GTypeAudioStreamAlign = coreglib.Type(C.gst_audio_stream_align_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAudioStreamAlign, F: marshalAudioStreamAlign},
	})
}

// AudioStreamAlign provides a helper object that helps tracking audio stream
// alignment and discontinuities, and detects discontinuities if possible.
//
// See gst_audio_stream_align_new() for a description of its parameters and
// gst_audio_stream_align_process() for the details of the processing.
//
// An instance of this type is always passed by reference.
type AudioStreamAlign struct {
	*audioStreamAlign
}

// audioStreamAlign is the struct that's finalized.
type audioStreamAlign struct {
	native *C.GstAudioStreamAlign
}

func marshalAudioStreamAlign(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &AudioStreamAlign{&audioStreamAlign{(*C.GstAudioStreamAlign)(b)}}, nil
}

// NewAudioStreamAlign constructs a struct AudioStreamAlign.
func NewAudioStreamAlign(rate int, alignmentThreshold gst.ClockTime, discontWait gst.ClockTime) *AudioStreamAlign {
	var _arg1 C.gint                 // out
	var _arg2 C.GstClockTime         // out
	var _arg3 C.GstClockTime         // out
	var _cret *C.GstAudioStreamAlign // in

	_arg1 = C.gint(rate)
	_arg2 = C.guint64(alignmentThreshold)
	type _ = gst.ClockTime
	type _ = uint64
	_arg3 = C.guint64(discontWait)
	type _ = gst.ClockTime
	type _ = uint64

	_cret = C.gst_audio_stream_align_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(rate)
	runtime.KeepAlive(alignmentThreshold)
	runtime.KeepAlive(discontWait)

	var _audioStreamAlign *AudioStreamAlign // out

	_audioStreamAlign = (*AudioStreamAlign)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_audioStreamAlign)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_audio_stream_align_free((*C.GstAudioStreamAlign)(intern.C))
		},
	)

	return _audioStreamAlign
}

// Copy a GstAudioStreamAlign structure.
//
// The function returns the following values:
//
//    - audioStreamAlign: new AudioStreamAlign. free with
//      gst_audio_stream_align_free.
//
func (align *AudioStreamAlign) Copy() *AudioStreamAlign {
	var _arg0 *C.GstAudioStreamAlign // out
	var _cret *C.GstAudioStreamAlign // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	_cret = C.gst_audio_stream_align_copy(_arg0)
	runtime.KeepAlive(align)

	var _audioStreamAlign *AudioStreamAlign // out

	_audioStreamAlign = (*AudioStreamAlign)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_audioStreamAlign)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_audio_stream_align_free((*C.GstAudioStreamAlign)(intern.C))
		},
	)

	return _audioStreamAlign
}

// AlignmentThreshold gets the currently configured alignment threshold.
//
// The function returns the following values:
//
//    - clockTime: currently configured alignment threshold.
//
func (align *AudioStreamAlign) AlignmentThreshold() gst.ClockTime {
	var _arg0 *C.GstAudioStreamAlign // out
	var _cret C.GstClockTime         // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	_cret = C.gst_audio_stream_align_get_alignment_threshold(_arg0)
	runtime.KeepAlive(align)

	var _clockTime gst.ClockTime // out

	_clockTime = uint64(_cret)
	type _ = gst.ClockTime
	type _ = uint64

	return _clockTime
}

// DiscontWait gets the currently configured discont wait.
//
// The function returns the following values:
//
//    - clockTime: currently configured discont wait.
//
func (align *AudioStreamAlign) DiscontWait() gst.ClockTime {
	var _arg0 *C.GstAudioStreamAlign // out
	var _cret C.GstClockTime         // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	_cret = C.gst_audio_stream_align_get_discont_wait(_arg0)
	runtime.KeepAlive(align)

	var _clockTime gst.ClockTime // out

	_clockTime = uint64(_cret)
	type _ = gst.ClockTime
	type _ = uint64

	return _clockTime
}

// Rate gets the currently configured sample rate.
//
// The function returns the following values:
//
//    - gint: currently configured sample rate.
//
func (align *AudioStreamAlign) Rate() int {
	var _arg0 *C.GstAudioStreamAlign // out
	var _cret C.gint                 // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	_cret = C.gst_audio_stream_align_get_rate(_arg0)
	runtime.KeepAlive(align)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SamplesSinceDiscont returns the number of samples that were processed since
// the last discontinuity was detected.
//
// The function returns the following values:
//
//    - guint64: number of samples processed since the last discontinuity.
//
func (align *AudioStreamAlign) SamplesSinceDiscont() uint64 {
	var _arg0 *C.GstAudioStreamAlign // out
	var _cret C.guint64              // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	_cret = C.gst_audio_stream_align_get_samples_since_discont(_arg0)
	runtime.KeepAlive(align)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// TimestampAtDiscont: timestamp that was passed when a discontinuity was
// detected, i.e. the first timestamp after the discontinuity.
//
// The function returns the following values:
//
//    - clockTime: last timestamp at when a discontinuity was detected.
//
func (align *AudioStreamAlign) TimestampAtDiscont() gst.ClockTime {
	var _arg0 *C.GstAudioStreamAlign // out
	var _cret C.GstClockTime         // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	_cret = C.gst_audio_stream_align_get_timestamp_at_discont(_arg0)
	runtime.KeepAlive(align)

	var _clockTime gst.ClockTime // out

	_clockTime = uint64(_cret)
	type _ = gst.ClockTime
	type _ = uint64

	return _clockTime
}

// MarkDiscont marks the next buffer as discontinuous and resets timestamp
// tracking.
func (align *AudioStreamAlign) MarkDiscont() {
	var _arg0 *C.GstAudioStreamAlign // out

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))

	C.gst_audio_stream_align_mark_discont(_arg0)
	runtime.KeepAlive(align)
}

// Process processes data with timestamp and n_samples, and returns the output
// timestamp, duration and sample position together with a boolean to signal
// whether a discontinuity was detected or not. All non-discontinuous data will
// have perfect timestamps and durations.
//
// A discontinuity is detected once the difference between the actual timestamp
// and the timestamp calculated from the sample count since the last
// discontinuity differs by more than the alignment threshold for a duration
// longer than discont wait.
//
// Note: In reverse playback, every buffer is considered discontinuous in the
// context of buffer flags because the last sample of the previous buffer is
// discontinuous with the first sample of the current one. However for this
// function they are only considered discontinuous in reverse playback if the
// first sample of the previous buffer is discontinuous with the last sample of
// the current one.
//
// The function takes the following parameters:
//
//    - discont: if this data is considered to be discontinuous.
//    - timestamp of the start of the data.
//    - nSamples: number of samples to process.
//
// The function returns the following values:
//
//    - outTimestamp: output timestamp of the data.
//    - outDuration: output duration of the data.
//    - outSamplePosition: output sample position of the start of the data.
//    - ok: TRUE if a discontinuity was detected, FALSE otherwise.
//
func (align *AudioStreamAlign) Process(discont bool, timestamp gst.ClockTime, nSamples uint) (outTimestamp gst.ClockTime, outDuration gst.ClockTime, outSamplePosition uint64, ok bool) {
	var _arg0 *C.GstAudioStreamAlign // out
	var _arg1 C.gboolean             // out
	var _arg2 C.GstClockTime         // out
	var _arg3 C.guint                // out
	var _arg4 C.GstClockTime         // in
	var _arg5 C.GstClockTime         // in
	var _arg6 C.guint64              // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))
	if discont {
		_arg1 = C.TRUE
	}
	_arg2 = C.guint64(timestamp)
	type _ = gst.ClockTime
	type _ = uint64
	_arg3 = C.guint(nSamples)

	_cret = C.gst_audio_stream_align_process(_arg0, _arg1, _arg2, _arg3, &_arg4, &_arg5, &_arg6)
	runtime.KeepAlive(align)
	runtime.KeepAlive(discont)
	runtime.KeepAlive(timestamp)
	runtime.KeepAlive(nSamples)

	var _outTimestamp gst.ClockTime // out
	var _outDuration gst.ClockTime  // out
	var _outSamplePosition uint64   // out
	var _ok bool                    // out

	_outTimestamp = uint64(_arg4)
	type _ = gst.ClockTime
	type _ = uint64
	_outDuration = uint64(_arg5)
	type _ = gst.ClockTime
	type _ = uint64
	_outSamplePosition = uint64(_arg6)
	if _cret != 0 {
		_ok = true
	}

	return _outTimestamp, _outDuration, _outSamplePosition, _ok
}

// SetAlignmentThreshold sets alignment_treshold as new alignment threshold for
// the following processing.
//
// The function takes the following parameters:
//
//    - alignmentThreshold: new alignment threshold.
//
func (align *AudioStreamAlign) SetAlignmentThreshold(alignmentThreshold gst.ClockTime) {
	var _arg0 *C.GstAudioStreamAlign // out
	var _arg1 C.GstClockTime         // out

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))
	_arg1 = C.guint64(alignmentThreshold)
	type _ = gst.ClockTime
	type _ = uint64

	C.gst_audio_stream_align_set_alignment_threshold(_arg0, _arg1)
	runtime.KeepAlive(align)
	runtime.KeepAlive(alignmentThreshold)
}

// SetDiscontWait sets alignment_treshold as new discont wait for the following
// processing.
//
// The function takes the following parameters:
//
//    - discontWait: new discont wait.
//
func (align *AudioStreamAlign) SetDiscontWait(discontWait gst.ClockTime) {
	var _arg0 *C.GstAudioStreamAlign // out
	var _arg1 C.GstClockTime         // out

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))
	_arg1 = C.guint64(discontWait)
	type _ = gst.ClockTime
	type _ = uint64

	C.gst_audio_stream_align_set_discont_wait(_arg0, _arg1)
	runtime.KeepAlive(align)
	runtime.KeepAlive(discontWait)
}

// SetRate sets rate as new sample rate for the following processing. If the
// sample rate differs this implicitly marks the next data as discontinuous.
//
// The function takes the following parameters:
//
//    - rate: new sample rate.
//
func (align *AudioStreamAlign) SetRate(rate int) {
	var _arg0 *C.GstAudioStreamAlign // out
	var _arg1 C.gint                 // out

	_arg0 = (*C.GstAudioStreamAlign)(gextras.StructNative(unsafe.Pointer(align)))
	_arg1 = C.gint(rate)

	C.gst_audio_stream_align_set_rate(_arg0, _arg1)
	runtime.KeepAlive(align)
	runtime.KeepAlive(rate)
}
