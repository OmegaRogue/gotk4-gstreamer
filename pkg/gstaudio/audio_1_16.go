// Code generated by girgen. DO NOT EDIT.

package gstaudio

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/audio/audio.h>
import "C"

// AudioBufferTruncate: truncate the buffer to finally have samples number of
// samples, removing the necessary amount of samples from the end and trim
// number of samples from the beginning.
//
// This function does not know the audio rate, therefore the caller is
// responsible for re-setting the correct timestamp and duration to the buffer.
// However, timestamp will be preserved if trim == 0, and duration will also be
// preserved if there is no trimming to be done. Offset and offset end will be
// preserved / updated.
//
// After calling this function the caller does not own a reference to buffer
// anymore.
//
// The function takes the following parameters:
//
//    - buffer to truncate.
//    - bpf: size of one audio frame in bytes. This is the size of one sample *
//      number of channels.
//    - trim: number of samples to remove from the beginning of the buffer.
//    - samples: final number of samples that should exist in this buffer or -1
//      to use all the remaining samples if you are only removing samples from
//      the beginning.
//
// The function returns the following values:
//
//    - ret: truncated buffer or NULL if the arguments were invalid.
//
func AudioBufferTruncate(buffer *gst.Buffer, bpf int, trim, samples uint) *gst.Buffer {
	var _arg1 *C.GstBuffer // out
	var _arg2 C.gint       // out
	var _arg3 C.gsize      // out
	var _arg4 C.gsize      // out
	var _cret *C.GstBuffer // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)
	_arg2 = C.gint(bpf)
	_arg3 = C.gsize(trim)
	_arg4 = C.gsize(samples)

	_cret = C.gst_audio_buffer_truncate(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(bpf)
	runtime.KeepAlive(trim)
	runtime.KeepAlive(samples)

	var _ret *gst.Buffer // out

	_ret = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ret)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _ret
}
