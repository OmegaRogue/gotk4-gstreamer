// Code generated by girgen. DO NOT EDIT.

package gstapp

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/app/app.h>
import "C"

// GType values.
var (
	GTypeAppLeakyType = coreglib.Type(C.gst_app_leaky_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAppLeakyType, F: marshalAppLeakyType},
	})
}

// AppLeakyType: buffer dropping scheme to avoid the element's internal queue to
// block when full.
type AppLeakyType C.gint

const (
	// AppLeakyTypeNone: not Leaky.
	AppLeakyTypeNone AppLeakyType = iota
	// AppLeakyTypeUpstream: leaky on upstream (new buffers).
	AppLeakyTypeUpstream
	// AppLeakyTypeDownstream: leaky on downstream (old buffers).
	AppLeakyTypeDownstream
)

func marshalAppLeakyType(p uintptr) (interface{}, error) {
	return AppLeakyType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AppLeakyType.
func (a AppLeakyType) String() string {
	switch a {
	case AppLeakyTypeNone:
		return "None"
	case AppLeakyTypeUpstream:
		return "Upstream"
	case AppLeakyTypeDownstream:
		return "Downstream"
	default:
		return fmt.Sprintf("AppLeakyType(%d)", a)
	}
}
