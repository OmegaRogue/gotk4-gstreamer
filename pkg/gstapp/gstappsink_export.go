// Code generated by girgen. DO NOT EDIT.

package gstapp

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/app/app.h>
import "C"

//export _gotk4_gstapp1_AppSink_ConnectEos
func _gotk4_gstapp1_AppSink_ConnectEos(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstapp1_AppSink_ConnectNewPreroll
func _gotk4_gstapp1_AppSink_ConnectNewPreroll(arg0 C.gpointer, arg1 C.guintptr) (cret C.GstFlowReturn) {
	var f func() (flowReturn gst.FlowReturn)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (flowReturn gst.FlowReturn))
	}

	flowReturn := f()

	var _ gst.FlowReturn

	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectNewSample
func _gotk4_gstapp1_AppSink_ConnectNewSample(arg0 C.gpointer, arg1 C.guintptr) (cret C.GstFlowReturn) {
	var f func() (flowReturn gst.FlowReturn)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (flowReturn gst.FlowReturn))
	}

	flowReturn := f()

	var _ gst.FlowReturn

	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectNewSerializedEvent
func _gotk4_gstapp1_AppSink_ConnectNewSerializedEvent(arg0 C.gpointer, arg1 C.guintptr) (cret C.gboolean) {
	var f func() (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (ok bool))
	}

	ok := f()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectPullPreroll
func _gotk4_gstapp1_AppSink_ConnectPullPreroll(arg0 C.gpointer, arg1 C.guintptr) (cret C.GstSample) {
	var f func() (sample *gst.Sample)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (sample *gst.Sample))
	}

	sample := f()

	var _ *gst.Sample

	if sample != nil {
		cret = *(*C.GstSample)(gextras.StructNative(unsafe.Pointer(sample)))
		runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(sample)), nil)
	}

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectPullSample
func _gotk4_gstapp1_AppSink_ConnectPullSample(arg0 C.gpointer, arg1 C.guintptr) (cret C.GstSample) {
	var f func() (sample *gst.Sample)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (sample *gst.Sample))
	}

	sample := f()

	var _ *gst.Sample

	if sample != nil {
		cret = *(*C.GstSample)(gextras.StructNative(unsafe.Pointer(sample)))
		runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(sample)), nil)
	}

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectTryPullObject
func _gotk4_gstapp1_AppSink_ConnectTryPullObject(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) (cret C.GstMiniObject) {
	var f func(timeout uint64) (miniObject *gst.MiniObject)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(timeout uint64) (miniObject *gst.MiniObject))
	}

	var _timeout uint64 // out

	_timeout = uint64(arg1)

	miniObject := f(_timeout)

	var _ *gst.MiniObject

	if miniObject != nil {
		cret = *(*C.GstMiniObject)(gextras.StructNative(unsafe.Pointer(miniObject)))
		runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(miniObject)), nil)
	}

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectTryPullPreroll
func _gotk4_gstapp1_AppSink_ConnectTryPullPreroll(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) (cret C.GstSample) {
	var f func(timeout uint64) (sample *gst.Sample)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(timeout uint64) (sample *gst.Sample))
	}

	var _timeout uint64 // out

	_timeout = uint64(arg1)

	sample := f(_timeout)

	var _ *gst.Sample

	if sample != nil {
		cret = *(*C.GstSample)(gextras.StructNative(unsafe.Pointer(sample)))
		runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(sample)), nil)
	}

	return cret
}

//export _gotk4_gstapp1_AppSink_ConnectTryPullSample
func _gotk4_gstapp1_AppSink_ConnectTryPullSample(arg0 C.gpointer, arg1 C.guint64, arg2 C.guintptr) (cret C.GstSample) {
	var f func(timeout uint64) (sample *gst.Sample)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(timeout uint64) (sample *gst.Sample))
	}

	var _timeout uint64 // out

	_timeout = uint64(arg1)

	sample := f(_timeout)

	var _ *gst.Sample

	if sample != nil {
		cret = *(*C.GstSample)(gextras.StructNative(unsafe.Pointer(sample)))
		runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(sample)), nil)
	}

	return cret
}
