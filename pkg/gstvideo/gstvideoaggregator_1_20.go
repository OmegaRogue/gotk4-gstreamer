// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gstbase"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoAggregatorParallelConvertPad = coreglib.Type(C.gst_video_aggregator_parallel_convert_pad_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoAggregatorParallelConvertPad, F: marshalVideoAggregatorParallelConvertPad},
	})
}

// VideoAggregatorParallelConvertPadOverrides contains methods that are overridable.
type VideoAggregatorParallelConvertPadOverrides struct {
}

func defaultVideoAggregatorParallelConvertPadOverrides(v *VideoAggregatorParallelConvertPad) VideoAggregatorParallelConvertPadOverrides {
	return VideoAggregatorParallelConvertPadOverrides{}
}

// VideoAggregatorParallelConvertPad: implementation of GstPad that can be used
// with VideoAggregator.
//
// See VideoAggregator for more details.
type VideoAggregatorParallelConvertPad struct {
	_ [0]func() // equal guard
	VideoAggregatorConvertPad
}

var (
	_ gst.GstObjector = (*VideoAggregatorParallelConvertPad)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*VideoAggregatorParallelConvertPad, *VideoAggregatorParallelConvertPadClass, VideoAggregatorParallelConvertPadOverrides](
		GTypeVideoAggregatorParallelConvertPad,
		initVideoAggregatorParallelConvertPadClass,
		wrapVideoAggregatorParallelConvertPad,
		defaultVideoAggregatorParallelConvertPadOverrides,
	)
}

func initVideoAggregatorParallelConvertPadClass(gclass unsafe.Pointer, overrides VideoAggregatorParallelConvertPadOverrides, classInitFunc func(*VideoAggregatorParallelConvertPadClass)) {
	if classInitFunc != nil {
		class := (*VideoAggregatorParallelConvertPadClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVideoAggregatorParallelConvertPad(obj *coreglib.Object) *VideoAggregatorParallelConvertPad {
	return &VideoAggregatorParallelConvertPad{
		VideoAggregatorConvertPad: VideoAggregatorConvertPad{
			VideoAggregatorPad: VideoAggregatorPad{
				AggregatorPad: gstbase.AggregatorPad{
					Pad: gst.Pad{
						GstObject: gst.GstObject{
							InitiallyUnowned: coreglib.InitiallyUnowned{
								Object: obj,
							},
						},
					},
				},
			},
		},
	}
}

func marshalVideoAggregatorParallelConvertPad(p uintptr) (interface{}, error) {
	return wrapVideoAggregatorParallelConvertPad(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// VideoAggregatorParallelConvertPadClass: instance of this type is always
// passed by reference.
type VideoAggregatorParallelConvertPadClass struct {
	*videoAggregatorParallelConvertPadClass
}

// videoAggregatorParallelConvertPadClass is the struct that's finalized.
type videoAggregatorParallelConvertPadClass struct {
	native *C.GstVideoAggregatorParallelConvertPadClass
}

func (v *VideoAggregatorParallelConvertPadClass) ParentClass() *VideoAggregatorConvertPadClass {
	valptr := &v.native.parent_class
	var _v *VideoAggregatorConvertPadClass // out
	_v = (*VideoAggregatorConvertPadClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
