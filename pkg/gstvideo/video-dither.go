// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoDitherMethod = coreglib.Type(C.gst_video_dither_method_get_type())
	GTypeVideoDitherFlags  = coreglib.Type(C.gst_video_dither_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoDitherMethod, F: marshalVideoDitherMethod},
		coreglib.TypeMarshaler{T: GTypeVideoDitherFlags, F: marshalVideoDitherFlags},
	})
}

// VideoDitherMethod: different dithering methods to use.
type VideoDitherMethod C.gint

const (
	// VideoDitherNone: no dithering.
	VideoDitherNone VideoDitherMethod = iota
	// VideoDitherVerterr: propagate rounding errors downwards.
	VideoDitherVerterr
	// VideoDitherFloydSteinberg: dither with floyd-steinberg error diffusion.
	VideoDitherFloydSteinberg
	// VideoDitherSierraLite: dither with Sierra Lite error diffusion.
	VideoDitherSierraLite
	// VideoDitherBayer: ordered dither using a bayer pattern.
	VideoDitherBayer
)

func marshalVideoDitherMethod(p uintptr) (interface{}, error) {
	return VideoDitherMethod(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VideoDitherMethod.
func (v VideoDitherMethod) String() string {
	switch v {
	case VideoDitherNone:
		return "None"
	case VideoDitherVerterr:
		return "Verterr"
	case VideoDitherFloydSteinberg:
		return "FloydSteinberg"
	case VideoDitherSierraLite:
		return "SierraLite"
	case VideoDitherBayer:
		return "Bayer"
	default:
		return fmt.Sprintf("VideoDitherMethod(%d)", v)
	}
}

// VideoDitherFlags: extra flags that influence the result from
// gst_video_chroma_resample_new().
type VideoDitherFlags C.guint

const (
	// VideoDitherFlagNone: no flags.
	VideoDitherFlagNone VideoDitherFlags = 0b0
	// VideoDitherFlagInterlaced: input is interlaced.
	VideoDitherFlagInterlaced VideoDitherFlags = 0b1
	// VideoDitherFlagQuantize: quantize values in addition to adding dither.
	VideoDitherFlagQuantize VideoDitherFlags = 0b10
)

func marshalVideoDitherFlags(p uintptr) (interface{}, error) {
	return VideoDitherFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for VideoDitherFlags.
func (v VideoDitherFlags) String() string {
	if v == 0 {
		return "VideoDitherFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(69)

	for v != 0 {
		next := v & (v - 1)
		bit := v - next

		switch bit {
		case VideoDitherFlagNone:
			builder.WriteString("None|")
		case VideoDitherFlagInterlaced:
			builder.WriteString("Interlaced|")
		case VideoDitherFlagQuantize:
			builder.WriteString("Quantize|")
		default:
			builder.WriteString(fmt.Sprintf("VideoDitherFlags(0b%b)|", bit))
		}

		v = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if v contains other.
func (v VideoDitherFlags) Has(other VideoDitherFlags) bool {
	return (v & other) == other
}
