// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoAlphaMode     = coreglib.Type(C.gst_video_alpha_mode_get_type())
	GTypeVideoChromaMode    = coreglib.Type(C.gst_video_chroma_mode_get_type())
	GTypeVideoMatrixMode    = coreglib.Type(C.gst_video_matrix_mode_get_type())
	GTypeVideoPrimariesMode = coreglib.Type(C.gst_video_primaries_mode_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoAlphaMode, F: marshalVideoAlphaMode},
		coreglib.TypeMarshaler{T: GTypeVideoChromaMode, F: marshalVideoChromaMode},
		coreglib.TypeMarshaler{T: GTypeVideoMatrixMode, F: marshalVideoMatrixMode},
		coreglib.TypeMarshaler{T: GTypeVideoPrimariesMode, F: marshalVideoPrimariesMode},
	})
}

// VideoAlphaMode: different alpha modes.
type VideoAlphaMode C.gint

const (
	// VideoAlphaModeCopy: when input and output have alpha, it will be copied.
	// When the input has no alpha, alpha will be set to
	// T_VIDEO_CONVERTER_OPT_ALPHA_VALUE.
	VideoAlphaModeCopy VideoAlphaMode = iota
	// VideoAlphaModeSet: set all alpha to T_VIDEO_CONVERTER_OPT_ALPHA_VALUE.
	VideoAlphaModeSet
	// VideoAlphaModeMult: multiply all alpha with
	// T_VIDEO_CONVERTER_OPT_ALPHA_VALUE. When the input format has no alpha but
	// the output format has, the alpha value will be set to
	// T_VIDEO_CONVERTER_OPT_ALPHA_VALUE.
	VideoAlphaModeMult
)

func marshalVideoAlphaMode(p uintptr) (interface{}, error) {
	return VideoAlphaMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VideoAlphaMode.
func (v VideoAlphaMode) String() string {
	switch v {
	case VideoAlphaModeCopy:
		return "Copy"
	case VideoAlphaModeSet:
		return "Set"
	case VideoAlphaModeMult:
		return "Mult"
	default:
		return fmt.Sprintf("VideoAlphaMode(%d)", v)
	}
}

// VideoChromaMode: different chroma downsampling and upsampling modes.
type VideoChromaMode C.gint

const (
	// VideoChromaModeFull: do full chroma up and down sampling.
	VideoChromaModeFull VideoChromaMode = iota
	// VideoChromaModeUpsampleOnly: only perform chroma upsampling.
	VideoChromaModeUpsampleOnly
	// VideoChromaModeDownsampleOnly: only perform chroma downsampling.
	VideoChromaModeDownsampleOnly
	// VideoChromaModeNone: disable chroma resampling.
	VideoChromaModeNone
)

func marshalVideoChromaMode(p uintptr) (interface{}, error) {
	return VideoChromaMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VideoChromaMode.
func (v VideoChromaMode) String() string {
	switch v {
	case VideoChromaModeFull:
		return "Full"
	case VideoChromaModeUpsampleOnly:
		return "UpsampleOnly"
	case VideoChromaModeDownsampleOnly:
		return "DownsampleOnly"
	case VideoChromaModeNone:
		return "None"
	default:
		return fmt.Sprintf("VideoChromaMode(%d)", v)
	}
}

// VideoMatrixMode: different color matrix conversion modes.
type VideoMatrixMode C.gint

const (
	// VideoMatrixModeFull: do conversion between color matrices.
	VideoMatrixModeFull VideoMatrixMode = iota
	// VideoMatrixModeInputOnly: use the input color matrix to convert to and
	// from R'G'B.
	VideoMatrixModeInputOnly
	// VideoMatrixModeOutputOnly: use the output color matrix to convert to and
	// from R'G'B.
	VideoMatrixModeOutputOnly
	// VideoMatrixModeNone: disable color matrix conversion.
	VideoMatrixModeNone
)

func marshalVideoMatrixMode(p uintptr) (interface{}, error) {
	return VideoMatrixMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VideoMatrixMode.
func (v VideoMatrixMode) String() string {
	switch v {
	case VideoMatrixModeFull:
		return "Full"
	case VideoMatrixModeInputOnly:
		return "InputOnly"
	case VideoMatrixModeOutputOnly:
		return "OutputOnly"
	case VideoMatrixModeNone:
		return "None"
	default:
		return fmt.Sprintf("VideoMatrixMode(%d)", v)
	}
}

// VideoPrimariesMode: different primaries conversion modes.
type VideoPrimariesMode C.gint

const (
	// VideoPrimariesModeNone: disable conversion between primaries.
	VideoPrimariesModeNone VideoPrimariesMode = iota
	// VideoPrimariesModeMergeOnly: do conversion between primaries only when it
	// can be merged with color matrix conversion.
	VideoPrimariesModeMergeOnly
	// VideoPrimariesModeFast: fast conversion between primaries.
	VideoPrimariesModeFast
)

func marshalVideoPrimariesMode(p uintptr) (interface{}, error) {
	return VideoPrimariesMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VideoPrimariesMode.
func (v VideoPrimariesMode) String() string {
	switch v {
	case VideoPrimariesModeNone:
		return "None"
	case VideoPrimariesModeMergeOnly:
		return "MergeOnly"
	case VideoPrimariesModeFast:
		return "Fast"
	default:
		return fmt.Sprintf("VideoPrimariesMode(%d)", v)
	}
}
