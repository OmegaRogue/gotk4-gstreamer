// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_get_hcenter(void* fnptr, GstVideoOrientation* arg0, gint* arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gint*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_get_hflip(void* fnptr, GstVideoOrientation* arg0, gboolean* arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gboolean*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_get_vcenter(void* fnptr, GstVideoOrientation* arg0, gint* arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gint*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_get_vflip(void* fnptr, GstVideoOrientation* arg0, gboolean* arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gboolean*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_set_hcenter(void* fnptr, GstVideoOrientation* arg0, gint arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_set_hflip(void* fnptr, GstVideoOrientation* arg0, gboolean arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gboolean))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_set_vcenter(void* fnptr, GstVideoOrientation* arg0, gint arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gint))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoOrientation_virtual_set_vflip(void* fnptr, GstVideoOrientation* arg0, gboolean arg1) {
//   return ((gboolean (*)(GstVideoOrientation*, gboolean))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeVideoOrientation = coreglib.Type(C.gst_video_orientation_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoOrientation, F: marshalVideoOrientation},
	})
}

// VideoOrientation: interface allows unified access to control flipping and
// autocenter operation of video-sources or operators.
//
// VideoOrientation wraps an interface. This means the user can get the
// underlying type by calling Cast().
type VideoOrientation struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*VideoOrientation)(nil)
)

// VideoOrientationer describes VideoOrientation's interface methods.
type VideoOrientationer interface {
	coreglib.Objector

	// Hcenter: get the horizontal centering offset from the given object.
	Hcenter() (int, bool)
	// Hflip: get the horizontal flipping state (TRUE for flipped) from the
	// given object.
	Hflip() (flip, ok bool)
	// Vcenter: get the vertical centering offset from the given object.
	Vcenter() (int, bool)
	// Vflip: get the vertical flipping state (TRUE for flipped) from the given
	// object.
	Vflip() (flip, ok bool)
	// SetHcenter: set the horizontal centering offset for the given object.
	SetHcenter(center int) bool
	// SetHflip: set the horizontal flipping state (TRUE for flipped) for the
	// given object.
	SetHflip(flip bool) bool
	// SetVcenter: set the vertical centering offset for the given object.
	SetVcenter(center int) bool
	// SetVflip: set the vertical flipping state (TRUE for flipped) for the
	// given object.
	SetVflip(flip bool) bool
}

var _ VideoOrientationer = (*VideoOrientation)(nil)

func wrapVideoOrientation(obj *coreglib.Object) *VideoOrientation {
	return &VideoOrientation{
		Object: obj,
	}
}

func marshalVideoOrientation(p uintptr) (interface{}, error) {
	return wrapVideoOrientation(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Hcenter: get the horizontal centering offset from the given object.
//
// The function returns the following values:
//
//    - center: return location for the result.
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) Hcenter() (int, bool) {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C.gst_video_orientation_get_hcenter(_arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _center int // out
	var _ok bool    // out

	_center = int(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _center, _ok
}

// Hflip: get the horizontal flipping state (TRUE for flipped) from the given
// object.
//
// The function returns the following values:
//
//    - flip: return location for the result.
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) Hflip() (flip, ok bool) {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C.gst_video_orientation_get_hflip(_arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _flip bool // out
	var _ok bool   // out

	if _arg1 != 0 {
		_flip = true
	}
	if _cret != 0 {
		_ok = true
	}

	return _flip, _ok
}

// Vcenter: get the vertical centering offset from the given object.
//
// The function returns the following values:
//
//    - center: return location for the result.
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) Vcenter() (int, bool) {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C.gst_video_orientation_get_vcenter(_arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _center int // out
	var _ok bool    // out

	_center = int(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _center, _ok
}

// Vflip: get the vertical flipping state (TRUE for flipped) from the given
// object.
//
// The function returns the following values:
//
//    - flip: return location for the result.
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) Vflip() (flip, ok bool) {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C.gst_video_orientation_get_vflip(_arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _flip bool // out
	var _ok bool   // out

	if _arg1 != 0 {
		_flip = true
	}
	if _cret != 0 {
		_ok = true
	}

	return _flip, _ok
}

// SetHcenter: set the horizontal centering offset for the given object.
//
// The function takes the following parameters:
//
//    - center: centering offset.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) SetHcenter(center int) bool {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	_arg1 = C.gint(center)

	_cret = C.gst_video_orientation_set_hcenter(_arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(center)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetHflip: set the horizontal flipping state (TRUE for flipped) for the given
// object.
//
// The function takes the following parameters:
//
//    - flip: use flipping.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) SetHflip(flip bool) bool {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	if flip {
		_arg1 = C.TRUE
	}

	_cret = C.gst_video_orientation_set_hflip(_arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(flip)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetVcenter: set the vertical centering offset for the given object.
//
// The function takes the following parameters:
//
//    - center: centering offset.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) SetVcenter(center int) bool {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	_arg1 = C.gint(center)

	_cret = C.gst_video_orientation_set_vcenter(_arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(center)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetVflip: set the vertical flipping state (TRUE for flipped) for the given
// object.
//
// The function takes the following parameters:
//
//    - flip: use flipping.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) SetVflip(flip bool) bool {
	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	if flip {
		_arg1 = C.TRUE
	}

	_cret = C.gst_video_orientation_set_vflip(_arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(flip)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Hcenter: get the horizontal centering offset from the given object.
//
// The function returns the following values:
//
//    - center: return location for the result.
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) hcenter() (int, bool) {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.get_hcenter

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_get_hcenter(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _center int // out
	var _ok bool    // out

	_center = int(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _center, _ok
}

// Hflip: get the horizontal flipping state (TRUE for flipped) from the given
// object.
//
// The function returns the following values:
//
//    - flip: return location for the result.
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) hflip() (flip, ok bool) {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.get_hflip

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_get_hflip(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _flip bool // out
	var _ok bool   // out

	if _arg1 != 0 {
		_flip = true
	}
	if _cret != 0 {
		_ok = true
	}

	return _flip, _ok
}

// Vcenter: get the vertical centering offset from the given object.
//
// The function returns the following values:
//
//    - center: return location for the result.
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) vcenter() (int, bool) {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.get_vcenter

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_get_vcenter(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _center int // out
	var _ok bool    // out

	_center = int(_arg1)
	if _cret != 0 {
		_ok = true
	}

	return _center, _ok
}

// Vflip: get the vertical flipping state (TRUE for flipped) from the given
// object.
//
// The function returns the following values:
//
//    - flip: return location for the result.
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) vflip() (flip, ok bool) {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.get_vflip

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // in
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_get_vflip(unsafe.Pointer(fnarg), _arg0, &_arg1)
	runtime.KeepAlive(videoOrientation)

	var _flip bool // out
	var _ok bool   // out

	if _arg1 != 0 {
		_flip = true
	}
	if _cret != 0 {
		_ok = true
	}

	return _flip, _ok
}

// setHcenter: set the horizontal centering offset for the given object.
//
// The function takes the following parameters:
//
//    - center: centering offset.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) setHcenter(center int) bool {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.set_hcenter

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	_arg1 = C.gint(center)

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_set_hcenter(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(center)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// setHflip: set the horizontal flipping state (TRUE for flipped) for the given
// object.
//
// The function takes the following parameters:
//
//    - flip: use flipping.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) setHflip(flip bool) bool {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.set_hflip

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	if flip {
		_arg1 = C.TRUE
	}

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_set_hflip(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(flip)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// setVcenter: set the vertical centering offset for the given object.
//
// The function takes the following parameters:
//
//    - center: centering offset.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports centering.
//
func (videoOrientation *VideoOrientation) setVcenter(center int) bool {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.set_vcenter

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gint                 // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	_arg1 = C.gint(center)

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_set_vcenter(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(center)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// setVflip: set the vertical flipping state (TRUE for flipped) for the given
// object.
//
// The function takes the following parameters:
//
//    - flip: use flipping.
//
// The function returns the following values:
//
//    - ok: TRUE in case the element supports flipping.
//
func (videoOrientation *VideoOrientation) setVflip(flip bool) bool {
	gclass := (*C.GstVideoOrientationInterface)(coreglib.PeekParentClass(videoOrientation))
	fnarg := gclass.set_vflip

	var _arg0 *C.GstVideoOrientation // out
	var _arg1 C.gboolean             // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstVideoOrientation)(unsafe.Pointer(coreglib.InternObject(videoOrientation).Native()))
	if flip {
		_arg1 = C.TRUE
	}

	_cret = C._gotk4_gstvideo1_VideoOrientation_virtual_set_vflip(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(videoOrientation)
	runtime.KeepAlive(flip)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// VideoOrientationInterface interface.
//
// An instance of this type is always passed by reference.
type VideoOrientationInterface struct {
	*videoOrientationInterface
}

// videoOrientationInterface is the struct that's finalized.
type videoOrientationInterface struct {
	native *C.GstVideoOrientationInterface
}
