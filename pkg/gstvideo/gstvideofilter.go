// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gstbase"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
// extern gboolean _gotk4_gstvideo1_VideoFilterClass_set_info(GstVideoFilter*, GstCaps*, GstVideoInfo*, GstCaps*, GstVideoInfo*);
// extern GstFlowReturn _gotk4_gstvideo1_VideoFilterClass_transform_frame_ip(GstVideoFilter*, GstVideoFrame*);
// extern GstFlowReturn _gotk4_gstvideo1_VideoFilterClass_transform_frame(GstVideoFilter*, GstVideoFrame*, GstVideoFrame*);
// GstFlowReturn _gotk4_gstvideo1_VideoFilter_virtual_transform_frame(void* fnptr, GstVideoFilter* arg0, GstVideoFrame* arg1, GstVideoFrame* arg2) {
//   return ((GstFlowReturn (*)(GstVideoFilter*, GstVideoFrame*, GstVideoFrame*))(fnptr))(arg0, arg1, arg2);
// };
// GstFlowReturn _gotk4_gstvideo1_VideoFilter_virtual_transform_frame_ip(void* fnptr, GstVideoFilter* arg0, GstVideoFrame* arg1) {
//   return ((GstFlowReturn (*)(GstVideoFilter*, GstVideoFrame*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstvideo1_VideoFilter_virtual_set_info(void* fnptr, GstVideoFilter* arg0, GstCaps* arg1, GstVideoInfo* arg2, GstCaps* arg3, GstVideoInfo* arg4) {
//   return ((gboolean (*)(GstVideoFilter*, GstCaps*, GstVideoInfo*, GstCaps*, GstVideoInfo*))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
import "C"

// GType values.
var (
	GTypeVideoFilter = coreglib.Type(C.gst_video_filter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoFilter, F: marshalVideoFilter},
	})
}

// VideoFilterOverrides contains methods that are overridable.
type VideoFilterOverrides struct {
	// The function takes the following parameters:
	//
	//    - incaps
	//    - inInfo
	//    - outcaps
	//    - outInfo
	//
	// The function returns the following values:
	//
	SetInfo func(incaps *gst.Caps, inInfo *VideoInfo, outcaps *gst.Caps, outInfo *VideoInfo) bool
	// The function takes the following parameters:
	//
	//    - inframe
	//    - outframe
	//
	// The function returns the following values:
	//
	TransformFrame func(inframe, outframe *VideoFrame) gst.FlowReturn
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	TransformFrameIP func(frame *VideoFrame) gst.FlowReturn
}

func defaultVideoFilterOverrides(v *VideoFilter) VideoFilterOverrides {
	return VideoFilterOverrides{
		SetInfo:          v.setInfo,
		TransformFrame:   v.transformFrame,
		TransformFrameIP: v.transformFrameIP,
	}
}

// VideoFilter provides useful functions and a base class for video filters.
//
// The videofilter will by default enable QoS on the parent GstBaseTransform to
// implement frame dropping.
type VideoFilter struct {
	_ [0]func() // equal guard
	gstbase.BaseTransform
}

var (
	_ gstbase.BaseTransformer = (*VideoFilter)(nil)
)

// VideoFilterer describes types inherited from class VideoFilter.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type VideoFilterer interface {
	coreglib.Objector
	baseVideoFilter() *VideoFilter
}

var _ VideoFilterer = (*VideoFilter)(nil)

func init() {
	coreglib.RegisterClassInfo[*VideoFilter, *VideoFilterClass, VideoFilterOverrides](
		GTypeVideoFilter,
		initVideoFilterClass,
		wrapVideoFilter,
		defaultVideoFilterOverrides,
	)
}

func initVideoFilterClass(gclass unsafe.Pointer, overrides VideoFilterOverrides, classInitFunc func(*VideoFilterClass)) {
	pclass := (*C.GstVideoFilterClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeVideoFilter))))

	if overrides.SetInfo != nil {
		pclass.set_info = (*[0]byte)(C._gotk4_gstvideo1_VideoFilterClass_set_info)
	}

	if overrides.TransformFrame != nil {
		pclass.transform_frame = (*[0]byte)(C._gotk4_gstvideo1_VideoFilterClass_transform_frame)
	}

	if overrides.TransformFrameIP != nil {
		pclass.transform_frame_ip = (*[0]byte)(C._gotk4_gstvideo1_VideoFilterClass_transform_frame_ip)
	}

	if classInitFunc != nil {
		class := (*VideoFilterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVideoFilter(obj *coreglib.Object) *VideoFilter {
	return &VideoFilter{
		BaseTransform: gstbase.BaseTransform{
			Element: gst.Element{
				GstObject: gst.GstObject{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalVideoFilter(p uintptr) (interface{}, error) {
	return wrapVideoFilter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *VideoFilter) baseVideoFilter() *VideoFilter {
	return v
}

// BaseVideoFilter returns the underlying base object.
func BaseVideoFilter(obj VideoFilterer) *VideoFilter {
	return obj.baseVideoFilter()
}

// The function takes the following parameters:
//
//    - incaps
//    - inInfo
//    - outcaps
//    - outInfo
//
// The function returns the following values:
//
func (filter *VideoFilter) setInfo(incaps *gst.Caps, inInfo *VideoInfo, outcaps *gst.Caps, outInfo *VideoInfo) bool {
	gclass := (*C.GstVideoFilterClass)(coreglib.PeekParentClass(filter))
	fnarg := gclass.set_info

	var _arg0 *C.GstVideoFilter // out
	var _arg1 *C.GstCaps        // out
	var _arg2 *C.GstVideoInfo   // out
	var _arg3 *C.GstCaps        // out
	var _arg4 *C.GstVideoInfo   // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GstVideoFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(incaps)))
	_arg2 = (*C.GstVideoInfo)(gextras.StructNative(unsafe.Pointer(inInfo)))
	_arg3 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(outcaps)))
	_arg4 = (*C.GstVideoInfo)(gextras.StructNative(unsafe.Pointer(outInfo)))

	_cret = C._gotk4_gstvideo1_VideoFilter_virtual_set_info(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(incaps)
	runtime.KeepAlive(inInfo)
	runtime.KeepAlive(outcaps)
	runtime.KeepAlive(outInfo)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//    - inframe
//    - outframe
//
// The function returns the following values:
//
func (filter *VideoFilter) transformFrame(inframe, outframe *VideoFrame) gst.FlowReturn {
	gclass := (*C.GstVideoFilterClass)(coreglib.PeekParentClass(filter))
	fnarg := gclass.transform_frame

	var _arg0 *C.GstVideoFilter // out
	var _arg1 *C.GstVideoFrame  // out
	var _arg2 *C.GstVideoFrame  // out
	var _cret C.GstFlowReturn   // in

	_arg0 = (*C.GstVideoFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstVideoFrame)(gextras.StructNative(unsafe.Pointer(inframe)))
	_arg2 = (*C.GstVideoFrame)(gextras.StructNative(unsafe.Pointer(outframe)))

	_cret = C._gotk4_gstvideo1_VideoFilter_virtual_transform_frame(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(inframe)
	runtime.KeepAlive(outframe)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (trans *VideoFilter) transformFrameIP(frame *VideoFrame) gst.FlowReturn {
	gclass := (*C.GstVideoFilterClass)(coreglib.PeekParentClass(trans))
	fnarg := gclass.transform_frame_ip

	var _arg0 *C.GstVideoFilter // out
	var _arg1 *C.GstVideoFrame  // out
	var _cret C.GstFlowReturn   // in

	_arg0 = (*C.GstVideoFilter)(unsafe.Pointer(coreglib.InternObject(trans).Native()))
	_arg1 = (*C.GstVideoFrame)(gextras.StructNative(unsafe.Pointer(frame)))

	_cret = C._gotk4_gstvideo1_VideoFilter_virtual_transform_frame_ip(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(trans)
	runtime.KeepAlive(frame)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}

// VideoFilterClass: video filter class structure.
//
// An instance of this type is always passed by reference.
type VideoFilterClass struct {
	*videoFilterClass
}

// videoFilterClass is the struct that's finalized.
type videoFilterClass struct {
	native *C.GstVideoFilterClass
}

// ParentClass: parent class structure.
func (v *VideoFilterClass) ParentClass() *gstbase.BaseTransformClass {
	valptr := &v.native.parent_class
	var _v *gstbase.BaseTransformClass // out
	_v = (*gstbase.BaseTransformClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
