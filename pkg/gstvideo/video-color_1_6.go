// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// VideoColorMatrixGetKrKb: get the coefficients used to convert between Y'PbPr
// and R'G'B' using matrix.
//
// When:
//
//    0.0 <= [Y',R',G',B'] <= 1.0)
//    (-0.5 <= [Pb,Pr] <= 0.5)
//
// the general conversion is given by:
//
//    Y' = Kr*R' + (1-Kr-Kb)*G' + Kb*B'
//    Pb = (B'-Y')/(2*(1-Kb))
//    Pr = (R'-Y')/(2*(1-Kr))
//
// and the other way around:
//
//    R' = Y' + Cr*2*(1-Kr)
//    G' = Y' - Cb*2*(1-Kb)*Kb/(1-Kr-Kb) - Cr*2*(1-Kr)*Kr/(1-Kr-Kb)
//    B' = Y' + Cb*2*(1-Kb).
//
// The function takes the following parameters:
//
//    - matrix: VideoColorMatrix.
//
// The function returns the following values:
//
//    - Kr: result red channel coefficient.
//    - Kb: result blue channel coefficient.
//    - ok: TRUE if matrix was a YUV color format and Kr and Kb contain valid
//      values.
//
func VideoColorMatrixGetKrKb(matrix VideoColorMatrix) (Kr, Kb float64, ok bool) {
	var _arg1 C.GstVideoColorMatrix // out
	var _arg2 C.gdouble             // in
	var _arg3 C.gdouble             // in
	var _cret C.gboolean            // in

	_arg1 = C.GstVideoColorMatrix(matrix)

	_cret = C.gst_video_color_matrix_get_Kr_Kb(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(matrix)

	var _Kr float64 // out
	var _Kb float64 // out
	var _ok bool    // out

	_Kr = float64(_arg2)
	_Kb = float64(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _Kr, _Kb, _ok
}

// VideoColorPrimariesGetInfo: get information about the chromaticity
// coordinates of primaries.
//
// The function takes the following parameters:
//
//    - primaries: VideoColorPrimaries.
//
// The function returns the following values:
//
//    - videoColorPrimariesInfo for primaries.
//
func VideoColorPrimariesGetInfo(primaries VideoColorPrimaries) *VideoColorPrimariesInfo {
	var _arg1 C.GstVideoColorPrimaries      // out
	var _cret *C.GstVideoColorPrimariesInfo // in

	_arg1 = C.GstVideoColorPrimaries(primaries)

	_cret = C.gst_video_color_primaries_get_info(_arg1)
	runtime.KeepAlive(primaries)

	var _videoColorPrimariesInfo *VideoColorPrimariesInfo // out

	_videoColorPrimariesInfo = (*VideoColorPrimariesInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _videoColorPrimariesInfo
}

// VideoColorTransferDecode: deprecated: Use
// gst_video_transfer_function_decode() instead.
//
// The function takes the following parameters:
//
//    - fn: VideoTransferFunction.
//    - val: value.
//
// The function returns the following values:
//
func VideoColorTransferDecode(fn VideoTransferFunction, val float64) float64 {
	var _arg1 C.GstVideoTransferFunction // out
	var _arg2 C.gdouble                  // out
	var _cret C.gdouble                  // in

	_arg1 = C.GstVideoTransferFunction(fn)
	_arg2 = C.gdouble(val)

	_cret = C.gst_video_color_transfer_decode(_arg1, _arg2)
	runtime.KeepAlive(fn)
	runtime.KeepAlive(val)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// VideoColorTransferEncode: deprecated: Use
// gst_video_transfer_function_encode() instead.
//
// The function takes the following parameters:
//
//    - fn: VideoTransferFunction.
//    - val: value.
//
// The function returns the following values:
//
func VideoColorTransferEncode(fn VideoTransferFunction, val float64) float64 {
	var _arg1 C.GstVideoTransferFunction // out
	var _arg2 C.gdouble                  // out
	var _cret C.gdouble                  // in

	_arg1 = C.GstVideoTransferFunction(fn)
	_arg2 = C.gdouble(val)

	_cret = C.gst_video_color_transfer_encode(_arg1, _arg2)
	runtime.KeepAlive(fn)
	runtime.KeepAlive(val)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// VideoColorPrimariesInfo: structure describing the chromaticity coordinates of
// an RGB system. These values can be used to construct a matrix to transform
// RGB to and from the XYZ colorspace.
//
// An instance of this type is always passed by reference.
type VideoColorPrimariesInfo struct {
	*videoColorPrimariesInfo
}

// videoColorPrimariesInfo is the struct that's finalized.
type videoColorPrimariesInfo struct {
	native *C.GstVideoColorPrimariesInfo
}

// Primaries: VideoColorPrimaries.
func (v *VideoColorPrimariesInfo) Primaries() VideoColorPrimaries {
	valptr := &v.native.primaries
	var _v VideoColorPrimaries // out
	_v = VideoColorPrimaries(*valptr)
	return _v
}

// Wx: reference white x coordinate.
func (v *VideoColorPrimariesInfo) Wx() float64 {
	valptr := &v.native.Wx
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Wy: reference white y coordinate.
func (v *VideoColorPrimariesInfo) Wy() float64 {
	valptr := &v.native.Wy
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Rx: red x coordinate.
func (v *VideoColorPrimariesInfo) Rx() float64 {
	valptr := &v.native.Rx
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Ry: red y coordinate.
func (v *VideoColorPrimariesInfo) Ry() float64 {
	valptr := &v.native.Ry
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Gx: green x coordinate.
func (v *VideoColorPrimariesInfo) Gx() float64 {
	valptr := &v.native.Gx
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Gy: green y coordinate.
func (v *VideoColorPrimariesInfo) Gy() float64 {
	valptr := &v.native.Gy
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Bx: blue x coordinate.
func (v *VideoColorPrimariesInfo) Bx() float64 {
	valptr := &v.native.Bx
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// By: blue y coordinate.
func (v *VideoColorPrimariesInfo) By() float64 {
	valptr := &v.native.By
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Wx: reference white x coordinate.
func (v *VideoColorPrimariesInfo) SetWx(Wx float64) {
	valptr := &v.native.Wx
	*valptr = C.gdouble(Wx)
}

// Wy: reference white y coordinate.
func (v *VideoColorPrimariesInfo) SetWy(Wy float64) {
	valptr := &v.native.Wy
	*valptr = C.gdouble(Wy)
}

// Rx: red x coordinate.
func (v *VideoColorPrimariesInfo) SetRx(Rx float64) {
	valptr := &v.native.Rx
	*valptr = C.gdouble(Rx)
}

// Ry: red y coordinate.
func (v *VideoColorPrimariesInfo) SetRy(Ry float64) {
	valptr := &v.native.Ry
	*valptr = C.gdouble(Ry)
}

// Gx: green x coordinate.
func (v *VideoColorPrimariesInfo) SetGx(Gx float64) {
	valptr := &v.native.Gx
	*valptr = C.gdouble(Gx)
}

// Gy: green y coordinate.
func (v *VideoColorPrimariesInfo) SetGy(Gy float64) {
	valptr := &v.native.Gy
	*valptr = C.gdouble(Gy)
}

// Bx: blue x coordinate.
func (v *VideoColorPrimariesInfo) SetBx(Bx float64) {
	valptr := &v.native.Bx
	*valptr = C.gdouble(Bx)
}

// By: blue y coordinate.
func (v *VideoColorPrimariesInfo) SetBy(By float64) {
	valptr := &v.native.By
	*valptr = C.gdouble(By)
}
