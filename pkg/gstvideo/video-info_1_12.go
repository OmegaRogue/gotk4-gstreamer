// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"fmt"
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoFieldOrder = coreglib.Type(C.gst_video_field_order_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoFieldOrder, F: marshalVideoFieldOrder},
	})
}

// VideoFieldOrder: field order of interlaced content. This is only valid for
// interlace-mode=interleaved and not interlace-mode=mixed. In the case of mixed
// or GST_VIDEO_FIELD_ORDER_UNKOWN, the field order is signalled via buffer
// flags.
type VideoFieldOrder C.gint

const (
	// VideoFieldOrderUnknown: unknown field order for interlaced content. The
	// actual field order is signalled via buffer flags.
	VideoFieldOrderUnknown VideoFieldOrder = iota
	// VideoFieldOrderTopFieldFirst: top field is first.
	VideoFieldOrderTopFieldFirst
	// VideoFieldOrderBottomFieldFirst: bottom field is first.
	VideoFieldOrderBottomFieldFirst
)

func marshalVideoFieldOrder(p uintptr) (interface{}, error) {
	return VideoFieldOrder(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for VideoFieldOrder.
func (v VideoFieldOrder) String() string {
	switch v {
	case VideoFieldOrderUnknown:
		return "Unknown"
	case VideoFieldOrderTopFieldFirst:
		return "TopFieldFirst"
	case VideoFieldOrderBottomFieldFirst:
		return "BottomFieldFirst"
	default:
		return fmt.Sprintf("VideoFieldOrder(%d)", v)
	}
}

// VideoFieldOrderFromString: convert order to a VideoFieldOrder.
//
// The function takes the following parameters:
//
//    - order: field order.
//
// The function returns the following values:
//
//    - videoFieldOrder of order or T_VIDEO_FIELD_ORDER_UNKNOWN when order is not
//      a valid string representation for a VideoFieldOrder.
//
func VideoFieldOrderFromString(order string) VideoFieldOrder {
	var _arg1 *C.gchar             // out
	var _cret C.GstVideoFieldOrder // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(order)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_video_field_order_from_string(_arg1)
	runtime.KeepAlive(order)

	var _videoFieldOrder VideoFieldOrder // out

	_videoFieldOrder = VideoFieldOrder(_cret)

	return _videoFieldOrder
}

// VideoFieldOrderToString: convert order to its string representation.
//
// The function takes the following parameters:
//
//    - order: VideoFieldOrder.
//
// The function returns the following values:
//
//    - utf8: order as a string or NULL if order in invalid.
//
func VideoFieldOrderToString(order VideoFieldOrder) string {
	var _arg1 C.GstVideoFieldOrder // out
	var _cret *C.gchar             // in

	_arg1 = C.GstVideoFieldOrder(order)

	_cret = C.gst_video_field_order_to_string(_arg1)
	runtime.KeepAlive(order)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
