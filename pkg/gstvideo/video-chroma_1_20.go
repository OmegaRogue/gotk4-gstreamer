// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// VideoChromaSiteFromString: convert s to a VideoChromaSite.
//
// The function takes the following parameters:
//
//    - s: chromasite string.
//
// The function returns the following values:
//
//    - videoChromaSite or GST_VIDEO_CHROMA_SITE_UNKNOWN when s does not contain
//      a valid chroma-site description.
//
func VideoChromaSiteFromString(s string) VideoChromaSite {
	var _arg1 *C.gchar             // out
	var _cret C.GstVideoChromaSite // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(s)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_video_chroma_site_from_string(_arg1)
	runtime.KeepAlive(s)

	var _videoChromaSite VideoChromaSite // out

	_videoChromaSite = VideoChromaSite(_cret)

	return _videoChromaSite
}

// VideoChromaSiteToString converts site to its string representation.
//
// The function takes the following parameters:
//
//    - site: VideoChromaSite.
//
// The function returns the following values:
//
//    - utf8 (optional): string representation of site or NULL if site contains
//      undefined value or is equal to GST_VIDEO_CHROMA_SITE_UNKNOWN.
//
func VideoChromaSiteToString(site VideoChromaSite) string {
	var _arg1 C.GstVideoChromaSite // out
	var _cret *C.gchar             // in

	_arg1 = C.GstVideoChromaSite(site)

	_cret = C.gst_video_chroma_site_to_string(_arg1)
	runtime.KeepAlive(site)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
