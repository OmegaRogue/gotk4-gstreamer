// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoDirection = coreglib.Type(C.gst_video_direction_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoDirection, F: marshalVideoDirection},
	})
}

// VideoDirectionOverrider contains methods that are overridable.
type VideoDirectionOverrider interface {
}

// VideoDirection: interface allows unified access to control flipping and
// rotation operations of video-sources or operators.
//
// VideoDirection wraps an interface. This means the user can get the
// underlying type by calling Cast().
type VideoDirection struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*VideoDirection)(nil)
)

// VideoDirectioner describes VideoDirection's interface methods.
type VideoDirectioner interface {
	coreglib.Objector

	baseVideoDirection() *VideoDirection
}

var _ VideoDirectioner = (*VideoDirection)(nil)

func ifaceInitVideoDirectioner(gifacePtr, data C.gpointer) {
}

func wrapVideoDirection(obj *coreglib.Object) *VideoDirection {
	return &VideoDirection{
		Object: obj,
	}
}

func marshalVideoDirection(p uintptr) (interface{}, error) {
	return wrapVideoDirection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *VideoDirection) baseVideoDirection() *VideoDirection {
	return v
}

// BaseVideoDirection returns the underlying base object.
func BaseVideoDirection(obj VideoDirectioner) *VideoDirection {
	return obj.baseVideoDirection()
}

// VideoDirectionInterface interface.
//
// An instance of this type is always passed by reference.
type VideoDirectionInterface struct {
	*videoDirectionInterface
}

// videoDirectionInterface is the struct that's finalized.
type videoDirectionInterface struct {
	native *C.GstVideoDirectionInterface
}
