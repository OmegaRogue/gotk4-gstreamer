// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// The function takes the following parameters:
//
//    - capsMviewMode: multiview-mode field string from caps.
//
// The function returns the following values:
//
//    - videoMultiviewMode value
//
//      Given a string from a caps multiview-mode field, output the corresponding
//      VideoMultiviewMode or T_VIDEO_MULTIVIEW_MODE_NONE.
//
func VideoMultiviewModeFromCapsString(capsMviewMode string) VideoMultiviewMode {
	var _arg1 *C.gchar                // out
	var _cret C.GstVideoMultiviewMode // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(capsMviewMode)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_video_multiview_mode_from_caps_string(_arg1)
	runtime.KeepAlive(capsMviewMode)

	var _videoMultiviewMode VideoMultiviewMode // out

	_videoMultiviewMode = VideoMultiviewMode(_cret)

	return _videoMultiviewMode
}

// The function takes the following parameters:
//
//    - mviewMode: VideoMultiviewMode value.
//
// The function returns the following values:
//
//    - utf8 caps string representation of the mode, or NULL if invalid.
//
//      Given a VideoMultiviewMode returns the multiview-mode caps string for
//      insertion into a caps structure.
//
func VideoMultiviewModeToCapsString(mviewMode VideoMultiviewMode) string {
	var _arg1 C.GstVideoMultiviewMode // out
	var _cret *C.gchar                // in

	_arg1 = C.GstVideoMultiviewMode(mviewMode)

	_cret = C.gst_video_multiview_mode_to_caps_string(_arg1)
	runtime.KeepAlive(mviewMode)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - value: const #GValue containing a list of stereo video modes
//
//      Utility function that returns a #GValue with a GstList of packed stereo
//      video modes with double the height of a single view for use in caps
//      negotiations. Currently this is top-bottom and row-interleaved.
//
func VideoMultiviewGetDoubledHeightModes() *coreglib.Value {
	var _cret *C.GValue // in

	_cret = C.gst_video_multiview_get_doubled_height_modes()

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// The function returns the following values:
//
//    - value: const #GValue containing a list of stereo video modes
//
//      Utility function that returns a #GValue with a GstList of packed stereo
//      video modes that have double the width/height of a single view for use in
//      caps negotiation. Currently this is just 'checkerboard' layout.
//
func VideoMultiviewGetDoubledSizeModes() *coreglib.Value {
	var _cret *C.GValue // in

	_cret = C.gst_video_multiview_get_doubled_size_modes()

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// The function returns the following values:
//
//    - value: const #GValue containing a list of stereo video modes
//
//      Utility function that returns a #GValue with a GstList of packed stereo
//      video modes with double the width of a single view for use in caps
//      negotiations. Currently this is side-by-side, side-by-side-quincunx and
//      column-interleaved.
//
func VideoMultiviewGetDoubledWidthModes() *coreglib.Value {
	var _cret *C.GValue // in

	_cret = C.gst_video_multiview_get_doubled_width_modes()

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// The function returns the following values:
//
//    - value: const #GValue containing a list of mono video modes
//
//      Utility function that returns a #GValue with a GstList of mono video
//      modes (mono/left/right) for use in caps negotiations.
//
func VideoMultiviewGetMonoModes() *coreglib.Value {
	var _cret *C.GValue // in

	_cret = C.gst_video_multiview_get_mono_modes()

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// The function returns the following values:
//
//    - value: const #GValue containing a list of 'unpacked' stereo video modes
//
//      Utility function that returns a #GValue with a GstList of unpacked stereo
//      video modes (separated/frame-by-frame/frame-by-frame-multiview) for use
//      in caps negotiations.
//
func VideoMultiviewGetUnpackedModes() *coreglib.Value {
	var _cret *C.GValue // in

	_cret = C.gst_video_multiview_get_unpacked_modes()

	var _value *coreglib.Value // out

	_value = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _value
}

// The function takes the following parameters:
//
//    - mvMode: VideoMultiviewMode.
//    - width: video frame width in pixels.
//    - height: video frame height in pixels.
//    - parN: numerator of the video pixel-aspect-ratio.
//    - parD: denominator of the video pixel-aspect-ratio.
//
// The function returns the following values:
//
//    - ok: boolean indicating whether the T_VIDEO_MULTIVIEW_FLAGS_HALF_ASPECT
//      flag should be set.
//
//      Utility function that heuristically guess whether a frame-packed
//      stereoscopic video contains half width/height encoded views, or
//      full-frame views by looking at the overall display aspect ratio.
//
func VideoMultiviewGuessHalfAspect(mvMode VideoMultiviewMode, width, height, parN, parD uint) bool {
	var _arg1 C.GstVideoMultiviewMode // out
	var _arg2 C.guint                 // out
	var _arg3 C.guint                 // out
	var _arg4 C.guint                 // out
	var _arg5 C.guint                 // out
	var _cret C.gboolean              // in

	_arg1 = C.GstVideoMultiviewMode(mvMode)
	_arg2 = C.guint(width)
	_arg3 = C.guint(height)
	_arg4 = C.guint(parN)
	_arg5 = C.guint(parD)

	_cret = C.gst_video_multiview_guess_half_aspect(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(mvMode)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
	runtime.KeepAlive(parN)
	runtime.KeepAlive(parD)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// VideoMultiviewVideoInfoChangeMode: utility function that transforms the
// width/height/PAR and multiview mode and flags of a VideoInfo into the
// requested mode.
//
// The function takes the following parameters:
//
//    - info structure to operate on.
//    - outMviewMode: VideoMultiviewMode value.
//    - outMviewFlags: set of VideoMultiviewFlags.
//
func VideoMultiviewVideoInfoChangeMode(info *VideoInfo, outMviewMode VideoMultiviewMode, outMviewFlags VideoMultiviewFlags) {
	var _arg1 *C.GstVideoInfo          // out
	var _arg2 C.GstVideoMultiviewMode  // out
	var _arg3 C.GstVideoMultiviewFlags // out

	_arg1 = (*C.GstVideoInfo)(gextras.StructNative(unsafe.Pointer(info)))
	_arg2 = C.GstVideoMultiviewMode(outMviewMode)
	_arg3 = C.GstVideoMultiviewFlags(outMviewFlags)

	C.gst_video_multiview_video_info_change_mode(_arg1, _arg2, _arg3)
	runtime.KeepAlive(info)
	runtime.KeepAlive(outMviewMode)
	runtime.KeepAlive(outMviewFlags)
}
