// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// VideoInterlaceModeFromString: convert mode to a VideoInterlaceMode.
//
// The function takes the following parameters:
//
//    - mode: mode.
//
// The function returns the following values:
//
//    - videoInterlaceMode of mode or T_VIDEO_INTERLACE_MODE_PROGRESSIVE when
//      mode is not a valid string representation for a VideoInterlaceMode.
//
func VideoInterlaceModeFromString(mode string) VideoInterlaceMode {
	var _arg1 *C.gchar                // out
	var _cret C.GstVideoInterlaceMode // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mode)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_video_interlace_mode_from_string(_arg1)
	runtime.KeepAlive(mode)

	var _videoInterlaceMode VideoInterlaceMode // out

	_videoInterlaceMode = VideoInterlaceMode(_cret)

	return _videoInterlaceMode
}

// VideoInterlaceModeToString: convert mode to its string representation.
//
// The function takes the following parameters:
//
//    - mode: VideoInterlaceMode.
//
// The function returns the following values:
//
//    - utf8: mode as a string or NULL if mode in invalid.
//
func VideoInterlaceModeToString(mode VideoInterlaceMode) string {
	var _arg1 C.GstVideoInterlaceMode // out
	var _cret *C.gchar                // in

	_arg1 = C.GstVideoInterlaceMode(mode)

	_cret = C.gst_video_interlace_mode_to_string(_arg1)
	runtime.KeepAlive(mode)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
