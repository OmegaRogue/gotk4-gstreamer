// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// BufferAddVideoAffineTransformationMeta attaches
// GstVideoAffineTransformationMeta metadata to buffer with the given
// parameters.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//
// The function returns the following values:
//
//    - videoAffineTransformationMeta on buffer.
//
func BufferAddVideoAffineTransformationMeta(buffer *gst.Buffer) *VideoAffineTransformationMeta {
	var _arg1 *C.GstBuffer                        // out
	var _cret *C.GstVideoAffineTransformationMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_buffer_add_video_affine_transformation_meta(_arg1)
	runtime.KeepAlive(buffer)

	var _videoAffineTransformationMeta *VideoAffineTransformationMeta // out

	_videoAffineTransformationMeta = (*VideoAffineTransformationMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _videoAffineTransformationMeta
}

// VideoAffineTransformationMeta: extra buffer metadata for performing an affine
// transformation using a 4x4 matrix. The transformation matrix can be composed
// with gst_video_affine_transformation_meta_apply_matrix().
//
// The vertices operated on are all in the range 0 to 1, not in Normalized
// Device Coordinates (-1 to +1). Transforming points in this space are assumed
// to have an origin at (0.5, 0.5, 0.5) in a left-handed coordinate system with
// the x-axis moving horizontally (positive values to the right), the y-axis
// moving vertically (positive values up the screen) and the z-axis
// perpendicular to the screen (positive values into the screen).
//
// An instance of this type is always passed by reference.
type VideoAffineTransformationMeta struct {
	*videoAffineTransformationMeta
}

// videoAffineTransformationMeta is the struct that's finalized.
type videoAffineTransformationMeta struct {
	native *C.GstVideoAffineTransformationMeta
}

// Meta: parent Meta.
func (v *VideoAffineTransformationMeta) Meta() *gst.Meta {
	valptr := &v.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Matrix: column-major 4x4 transformation matrix.
func (v *VideoAffineTransformationMeta) Matrix() [16]float32 {
	valptr := &v.native.matrix
	var _v [16]float32 // out
	_v = *(*[16]float32)(unsafe.Pointer(&*valptr))
	return _v
}

// ApplyMatrix: apply a transformation using the given 4x4 transformation
// matrix. Performs the multiplication, meta->matrix X matrix.
//
// The function takes the following parameters:
//
//    - matrix: 4x4 transformation matrix to be applied.
//
func (meta *VideoAffineTransformationMeta) ApplyMatrix(matrix [16]float32) {
	var _arg0 *C.GstVideoAffineTransformationMeta // out
	var _arg1 *C.gfloat                           // out

	_arg0 = (*C.GstVideoAffineTransformationMeta)(gextras.StructNative(unsafe.Pointer(meta)))
	_arg1 = (*C.gfloat)(unsafe.Pointer(&matrix))

	C.gst_video_affine_transformation_meta_apply_matrix(_arg0, _arg1)
	runtime.KeepAlive(meta)
	runtime.KeepAlive(matrix)
}
