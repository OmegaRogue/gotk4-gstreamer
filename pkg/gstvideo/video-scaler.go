// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoScalerFlags = coreglib.Type(C.gst_video_scaler_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoScalerFlags, F: marshalVideoScalerFlags},
	})
}

// VIDEO_SCALER_OPT_DITHER_METHOD The dither method to use for propagating
// quatization errors.
const VIDEO_SCALER_OPT_DITHER_METHOD = "GstVideoScaler.dither-method"

// VideoScalerFlags: different scale flags.
type VideoScalerFlags C.guint

const (
	// VideoScalerFlagNone: no flags.
	VideoScalerFlagNone VideoScalerFlags = 0b0
	// VideoScalerFlagInterlaced: set up a scaler for interlaced content.
	VideoScalerFlagInterlaced VideoScalerFlags = 0b1
)

func marshalVideoScalerFlags(p uintptr) (interface{}, error) {
	return VideoScalerFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for VideoScalerFlags.
func (v VideoScalerFlags) String() string {
	if v == 0 {
		return "VideoScalerFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(45)

	for v != 0 {
		next := v & (v - 1)
		bit := v - next

		switch bit {
		case VideoScalerFlagNone:
			builder.WriteString("None|")
		case VideoScalerFlagInterlaced:
			builder.WriteString("Interlaced|")
		default:
			builder.WriteString(fmt.Sprintf("VideoScalerFlags(0b%b)|", bit))
		}

		v = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if v contains other.
func (v VideoScalerFlags) Has(other VideoScalerFlags) bool {
	return (v & other) == other
}
