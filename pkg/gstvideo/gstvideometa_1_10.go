// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// BufferAddVideoTimeCodeMeta attaches VideoTimeCodeMeta metadata to buffer with
// the given parameters.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - tc: VideoTimeCode.
//
// The function returns the following values:
//
//    - videoTimeCodeMeta (optional) on buffer, or (since 1.16) NULL if the
//      timecode was invalid.
//
func BufferAddVideoTimeCodeMeta(buffer *gst.Buffer, tc *VideoTimeCode) *VideoTimeCodeMeta {
	var _arg1 *C.GstBuffer            // out
	var _arg2 *C.GstVideoTimeCode     // out
	var _cret *C.GstVideoTimeCodeMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg2 = (*C.GstVideoTimeCode)(gextras.StructNative(unsafe.Pointer(tc)))

	_cret = C.gst_buffer_add_video_time_code_meta(_arg1, _arg2)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(tc)

	var _videoTimeCodeMeta *VideoTimeCodeMeta // out

	if _cret != nil {
		_videoTimeCodeMeta = (*VideoTimeCodeMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _videoTimeCodeMeta
}

// BufferAddVideoTimeCodeMetaFull attaches VideoTimeCodeMeta metadata to buffer
// with the given parameters.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - fpsN: framerate numerator.
//    - fpsD: framerate denominator.
//    - latestDailyJam for the latest daily jam.
//    - flags: VideoTimeCodeFlags.
//    - hours since the daily jam.
//    - minutes since the daily jam.
//    - seconds since the daily jam.
//    - frames since the daily jam.
//    - fieldCount fields since the daily jam.
//
// The function returns the following values:
//
//    - videoTimeCodeMeta on buffer, or (since 1.16) NULL if the timecode was
//      invalid.
//
func BufferAddVideoTimeCodeMetaFull(buffer *gst.Buffer, fpsN, fpsD uint, latestDailyJam *glib.DateTime, flags VideoTimeCodeFlags, hours, minutes, seconds, frames, fieldCount uint) *VideoTimeCodeMeta {
	var _arg1 *C.GstBuffer            // out
	var _arg2 C.guint                 // out
	var _arg3 C.guint                 // out
	var _arg4 *C.GDateTime            // out
	var _arg5 C.GstVideoTimeCodeFlags // out
	var _arg6 C.guint                 // out
	var _arg7 C.guint                 // out
	var _arg8 C.guint                 // out
	var _arg9 C.guint                 // out
	var _arg10 C.guint                // out
	var _cret *C.GstVideoTimeCodeMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg2 = C.guint(fpsN)
	_arg3 = C.guint(fpsD)
	_arg4 = (*C.GDateTime)(gextras.StructNative(unsafe.Pointer(latestDailyJam)))
	_arg5 = C.GstVideoTimeCodeFlags(flags)
	_arg6 = C.guint(hours)
	_arg7 = C.guint(minutes)
	_arg8 = C.guint(seconds)
	_arg9 = C.guint(frames)
	_arg10 = C.guint(fieldCount)

	_cret = C.gst_buffer_add_video_time_code_meta_full(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(fpsN)
	runtime.KeepAlive(fpsD)
	runtime.KeepAlive(latestDailyJam)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(hours)
	runtime.KeepAlive(minutes)
	runtime.KeepAlive(seconds)
	runtime.KeepAlive(frames)
	runtime.KeepAlive(fieldCount)

	var _videoTimeCodeMeta *VideoTimeCodeMeta // out

	_videoTimeCodeMeta = (*VideoTimeCodeMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _videoTimeCodeMeta
}

// VideoTimeCodeMeta: extra buffer metadata describing the GstVideoTimeCode of
// the frame.
//
// Each frame is assumed to have its own timecode, i.e. they are not
// automatically incremented/interpolated.
//
// An instance of this type is always passed by reference.
type VideoTimeCodeMeta struct {
	*videoTimeCodeMeta
}

// videoTimeCodeMeta is the struct that's finalized.
type videoTimeCodeMeta struct {
	native *C.GstVideoTimeCodeMeta
}

// Meta: parent Meta.
func (v *VideoTimeCodeMeta) Meta() *gst.Meta {
	valptr := &v.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Tc: gstVideoTimeCode to attach.
func (v *VideoTimeCodeMeta) Tc() *VideoTimeCode {
	valptr := &v.native.tc
	var _v *VideoTimeCode // out
	_v = (*VideoTimeCode)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
