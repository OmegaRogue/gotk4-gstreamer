// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// VideoBlend lets you blend the src image into the dest image.
//
// The function takes the following parameters:
//
//    - dest where to blend src in.
//    - src that we want to blend into.
//    - x offset in pixel where the src image should be blended.
//    - y offset in pixel where the src image should be blended.
//    - globalAlpha: global_alpha each per-pixel alpha value is multiplied with.
//
// The function returns the following values:
//
func VideoBlend(dest, src *VideoFrame, x, y int, globalAlpha float32) bool {
	var _arg1 *C.GstVideoFrame // out
	var _arg2 *C.GstVideoFrame // out
	var _arg3 C.gint           // out
	var _arg4 C.gint           // out
	var _arg5 C.gfloat         // out
	var _cret C.gboolean       // in

	_arg1 = (*C.GstVideoFrame)(gextras.StructNative(unsafe.Pointer(dest)))
	_arg2 = (*C.GstVideoFrame)(gextras.StructNative(unsafe.Pointer(src)))
	_arg3 = C.gint(x)
	_arg4 = C.gint(y)
	_arg5 = C.gfloat(globalAlpha)

	_cret = C.gst_video_blend(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(dest)
	runtime.KeepAlive(src)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(globalAlpha)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// VideoBlendScaleLinearRGBA scales a buffer containing RGBA (or AYUV) video.
// This is an internal helper function which is used to scale subtitle overlays,
// and may be deprecated in the near future. Use VideoScaler to scale video
// buffers instead.
//
// The function takes the following parameters:
//
//    - src describing the video data in src_buffer.
//    - srcBuffer: source buffer containing video pixels to scale.
//    - destHeight: height in pixels to scale the video data in src_buffer to.
//    - destWidth: width in pixels to scale the video data in src_buffer to.
//
// The function returns the following values:
//
//    - dest: pointer to a VideoInfo structure that will be filled in with the
//      details for dest_buffer.
//    - destBuffer: pointer to a Buffer variable, which will be set to a
//      newly-allocated buffer containing the scaled pixels.
//
func VideoBlendScaleLinearRGBA(src *VideoInfo, srcBuffer *gst.Buffer, destHeight, destWidth int) (*VideoInfo, *gst.Buffer) {
	var _arg1 *C.GstVideoInfo // out
	var _arg2 *C.GstBuffer    // out
	var _arg3 C.gint          // out
	var _arg4 C.gint          // out
	var _arg5 C.GstVideoInfo  // in
	var _arg6 *C.GstBuffer    // in

	_arg1 = (*C.GstVideoInfo)(gextras.StructNative(unsafe.Pointer(src)))
	_arg2 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(srcBuffer)))
	_arg3 = C.gint(destHeight)
	_arg4 = C.gint(destWidth)

	C.gst_video_blend_scale_linear_RGBA(_arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6)
	runtime.KeepAlive(src)
	runtime.KeepAlive(srcBuffer)
	runtime.KeepAlive(destHeight)
	runtime.KeepAlive(destWidth)

	var _dest *VideoInfo        // out
	var _destBuffer *gst.Buffer // out

	_dest = (*VideoInfo)(gextras.NewStructNative(unsafe.Pointer((&_arg5))))
	_destBuffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_arg6)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_destBuffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _dest, _destBuffer
}
