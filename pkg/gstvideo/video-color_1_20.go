// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
)

// #include <stdlib.h>
// #include <gst/video/video.h>
import "C"

// VideoTransferFunctionDecode: convert val to its gamma decoded value. This is
// the inverse operation of gst_video_color_transfer_encode().
//
// For a non-linear value L' in the range [0..1], conversion to the linear L is
// in general performed with a power function like:
//
//    L = L' ^ gamma
//
// Depending on func, different formulas might be applied. Some formulas encode
// a linear segment in the lower range.
//
// The function takes the following parameters:
//
//    - fn: VideoTransferFunction.
//    - val: value.
//
// The function returns the following values:
//
//    - gdouble: gamma decoded value of val.
//
func VideoTransferFunctionDecode(fn VideoTransferFunction, val float64) float64 {
	var _arg1 C.GstVideoTransferFunction // out
	var _arg2 C.gdouble                  // out
	var _cret C.gdouble                  // in

	_arg1 = C.GstVideoTransferFunction(fn)
	_arg2 = C.gdouble(val)

	_cret = C.gst_video_transfer_function_decode(_arg1, _arg2)
	runtime.KeepAlive(fn)
	runtime.KeepAlive(val)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// VideoTransferFunctionEncode: convert val to its gamma encoded value.
//
// For a linear value L in the range [0..1], conversion to the non-linear (gamma
// encoded) L' is in general performed with a power function like:
//
//    L' = L ^ (1 / gamma)
//
// Depending on func, different formulas might be applied. Some formulas encode
// a linear segment in the lower range.
//
// The function takes the following parameters:
//
//    - fn: VideoTransferFunction.
//    - val: value.
//
// The function returns the following values:
//
//    - gdouble: gamma encoded value of val.
//
func VideoTransferFunctionEncode(fn VideoTransferFunction, val float64) float64 {
	var _arg1 C.GstVideoTransferFunction // out
	var _arg2 C.gdouble                  // out
	var _cret C.gdouble                  // in

	_arg1 = C.GstVideoTransferFunction(fn)
	_arg2 = C.gdouble(val)

	_cret = C.gst_video_transfer_function_encode(_arg1, _arg2)
	runtime.KeepAlive(fn)
	runtime.KeepAlive(val)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}
