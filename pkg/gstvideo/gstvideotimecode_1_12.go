// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// GType values.
var (
	GTypeVideoTimeCodeInterval = coreglib.Type(C.gst_video_time_code_interval_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVideoTimeCodeInterval, F: marshalVideoTimeCodeInterval},
	})
}

// VideoTimeCodeInterval: representation of a difference between two
// VideoTimeCode instances. Will not necessarily correspond to a real timecode
// (e.g. 00:00:10;00)
//
// An instance of this type is always passed by reference.
type VideoTimeCodeInterval struct {
	*videoTimeCodeInterval
}

// videoTimeCodeInterval is the struct that's finalized.
type videoTimeCodeInterval struct {
	native *C.GstVideoTimeCodeInterval
}

func marshalVideoTimeCodeInterval(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &VideoTimeCodeInterval{&videoTimeCodeInterval{(*C.GstVideoTimeCodeInterval)(b)}}, nil
}

// NewVideoTimeCodeInterval constructs a struct VideoTimeCodeInterval.
func NewVideoTimeCodeInterval(hours uint, minutes uint, seconds uint, frames uint) *VideoTimeCodeInterval {
	var _arg1 C.guint                     // out
	var _arg2 C.guint                     // out
	var _arg3 C.guint                     // out
	var _arg4 C.guint                     // out
	var _cret *C.GstVideoTimeCodeInterval // in

	_arg1 = C.guint(hours)
	_arg2 = C.guint(minutes)
	_arg3 = C.guint(seconds)
	_arg4 = C.guint(frames)

	_cret = C.gst_video_time_code_interval_new(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(hours)
	runtime.KeepAlive(minutes)
	runtime.KeepAlive(seconds)
	runtime.KeepAlive(frames)

	var _videoTimeCodeInterval *VideoTimeCodeInterval // out

	_videoTimeCodeInterval = (*VideoTimeCodeInterval)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_videoTimeCodeInterval)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_video_time_code_interval_free((*C.GstVideoTimeCodeInterval)(intern.C))
		},
	)

	return _videoTimeCodeInterval
}

// NewVideoTimeCodeIntervalFromString constructs a struct VideoTimeCodeInterval.
func NewVideoTimeCodeIntervalFromString(tcInterStr string) *VideoTimeCodeInterval {
	var _arg1 *C.gchar                    // out
	var _cret *C.GstVideoTimeCodeInterval // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(tcInterStr)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_video_time_code_interval_new_from_string(_arg1)
	runtime.KeepAlive(tcInterStr)

	var _videoTimeCodeInterval *VideoTimeCodeInterval // out

	if _cret != nil {
		_videoTimeCodeInterval = (*VideoTimeCodeInterval)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_videoTimeCodeInterval)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.gst_video_time_code_interval_free((*C.GstVideoTimeCodeInterval)(intern.C))
			},
		)
	}

	return _videoTimeCodeInterval
}

// Hours hours field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) Hours() uint {
	valptr := &v.native.hours
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Minutes minutes field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) Minutes() uint {
	valptr := &v.native.minutes
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Seconds seconds field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) Seconds() uint {
	valptr := &v.native.seconds
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Frames frames field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) Frames() uint {
	valptr := &v.native.frames
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Hours hours field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) SetHours(hours uint) {
	valptr := &v.native.hours
	*valptr = C.guint(hours)
}

// Minutes minutes field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) SetMinutes(minutes uint) {
	valptr := &v.native.minutes
	*valptr = C.guint(minutes)
}

// Seconds seconds field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) SetSeconds(seconds uint) {
	valptr := &v.native.seconds
	*valptr = C.guint(seconds)
}

// Frames frames field of VideoTimeCodeInterval.
func (v *VideoTimeCodeInterval) SetFrames(frames uint) {
	valptr := &v.native.frames
	*valptr = C.guint(frames)
}

// Clear initializes tc with empty/zero/NULL values.
func (tc *VideoTimeCodeInterval) Clear() {
	var _arg0 *C.GstVideoTimeCodeInterval // out

	_arg0 = (*C.GstVideoTimeCodeInterval)(gextras.StructNative(unsafe.Pointer(tc)))

	C.gst_video_time_code_interval_clear(_arg0)
	runtime.KeepAlive(tc)
}

// The function returns the following values:
//
//    - videoTimeCodeInterval: new VideoTimeCodeInterval with the same values as
//      tc.
//
func (tc *VideoTimeCodeInterval) Copy() *VideoTimeCodeInterval {
	var _arg0 *C.GstVideoTimeCodeInterval // out
	var _cret *C.GstVideoTimeCodeInterval // in

	_arg0 = (*C.GstVideoTimeCodeInterval)(gextras.StructNative(unsafe.Pointer(tc)))

	_cret = C.gst_video_time_code_interval_copy(_arg0)
	runtime.KeepAlive(tc)

	var _videoTimeCodeInterval *VideoTimeCodeInterval // out

	_videoTimeCodeInterval = (*VideoTimeCodeInterval)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_videoTimeCodeInterval)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_video_time_code_interval_free((*C.GstVideoTimeCodeInterval)(intern.C))
		},
	)

	return _videoTimeCodeInterval
}

// Init initializes tc with the given values.
//
// The function takes the following parameters:
//
//    - hours field of VideoTimeCodeInterval.
//    - minutes field of VideoTimeCodeInterval.
//    - seconds field of VideoTimeCodeInterval.
//    - frames field of VideoTimeCodeInterval.
//
func (tc *VideoTimeCodeInterval) Init(hours uint, minutes uint, seconds uint, frames uint) {
	var _arg0 *C.GstVideoTimeCodeInterval // out
	var _arg1 C.guint                     // out
	var _arg2 C.guint                     // out
	var _arg3 C.guint                     // out
	var _arg4 C.guint                     // out

	_arg0 = (*C.GstVideoTimeCodeInterval)(gextras.StructNative(unsafe.Pointer(tc)))
	_arg1 = C.guint(hours)
	_arg2 = C.guint(minutes)
	_arg3 = C.guint(seconds)
	_arg4 = C.guint(frames)

	C.gst_video_time_code_interval_init(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(tc)
	runtime.KeepAlive(hours)
	runtime.KeepAlive(minutes)
	runtime.KeepAlive(seconds)
	runtime.KeepAlive(frames)
}
