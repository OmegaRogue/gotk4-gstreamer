// Code generated by girgen. DO NOT EDIT.

package gstbase

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/base/base.h>
import "C"

// BitWriter provides a bit writer that can write any number of bits into a
// memory buffer. It provides functions for writing any number of bits into 8,
// 16, 32 and 64 bit variables.
//
// An instance of this type is always passed by reference.
type BitWriter struct {
	*bitWriter
}

// bitWriter is the struct that's finalized.
type bitWriter struct {
	native *C.GstBitWriter
}

// Data: allocated data for bit writer to write.
func (b *BitWriter) Data() *byte {
	valptr := &b.native.data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// BitSize: size of written data in bits.
func (b *BitWriter) BitSize() uint {
	valptr := &b.native.bit_size
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// BitSize: size of written data in bits.
func (b *BitWriter) SetBitSize(bitSize uint) {
	valptr := &b.native.bit_size
	*valptr = C.guint(bitSize)
}

// AlignBytes: write trailing bit to align last byte of data. trailing_bit can
// only be 1 or 0.
//
// The function takes the following parameters:
//
//    - trailingBit: trailing bits of last byte, 0 or 1.
//
// The function returns the following values:
//
//    - ok: TRUE if successful, FALSE otherwise.
//
func (bitwriter *BitWriter) AlignBytes(trailingBit byte) bool {
	var _arg0 *C.GstBitWriter // out
	var _arg1 C.guint8        // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	_arg1 = C.guint8(trailingBit)

	_cret = C.gst_bit_writer_align_bytes(_arg0, _arg1)
	runtime.KeepAlive(bitwriter)
	runtime.KeepAlive(trailingBit)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FreeAndGetBuffer frees bitwriter without destroying the internal data, which
// is returned as Buffer.
//
// Free-function: gst_buffer_unref.
//
// The function returns the following values:
//
//    - buffer: new allocated Buffer wrapping the data inside. gst_buffer_unref()
//      after usage.
//
func (bitwriter *BitWriter) FreeAndGetBuffer() *gst.Buffer {
	var _arg0 *C.GstBitWriter // out
	var _cret *C.GstBuffer    // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(bitwriter)), nil)

	_cret = C.gst_bit_writer_free_and_get_buffer(_arg0)
	runtime.KeepAlive(bitwriter)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// The function returns the following values:
//
func (bitwriter *BitWriter) Remaining() uint {
	var _arg0 *C.GstBitWriter // out
	var _cret C.guint         // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))

	_cret = C.gst_bit_writer_get_remaining(_arg0)
	runtime.KeepAlive(bitwriter)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Size: get size of written data.
//
// The function returns the following values:
//
//    - guint: size of bits written in data.
//
func (bitwriter *BitWriter) Size() uint {
	var _arg0 *C.GstBitWriter // out
	var _cret C.guint         // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))

	_cret = C.gst_bit_writer_get_size(_arg0)
	runtime.KeepAlive(bitwriter)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// PutBitsUint16: write nbits bits of value to BitWriter.
//
// The function takes the following parameters:
//
//    - value of #guint16 to write.
//    - nbits: number of bits to write.
//
// The function returns the following values:
//
//    - ok: TRUE if successful, FALSE otherwise.
//
func (bitwriter *BitWriter) PutBitsUint16(value uint16, nbits uint) bool {
	var _arg0 *C.GstBitWriter // out
	var _arg1 C.guint16       // out
	var _arg2 C.guint         // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	_arg1 = C.guint16(value)
	_arg2 = C.guint(nbits)

	_cret = C.gst_bit_writer_put_bits_uint16(_arg0, _arg1, _arg2)
	runtime.KeepAlive(bitwriter)
	runtime.KeepAlive(value)
	runtime.KeepAlive(nbits)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PutBitsUint32: write nbits bits of value to BitWriter.
//
// The function takes the following parameters:
//
//    - value of #guint32 to write.
//    - nbits: number of bits to write.
//
// The function returns the following values:
//
//    - ok: TRUE if successful, FALSE otherwise.
//
func (bitwriter *BitWriter) PutBitsUint32(value uint32, nbits uint) bool {
	var _arg0 *C.GstBitWriter // out
	var _arg1 C.guint32       // out
	var _arg2 C.guint         // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	_arg1 = C.guint32(value)
	_arg2 = C.guint(nbits)

	_cret = C.gst_bit_writer_put_bits_uint32(_arg0, _arg1, _arg2)
	runtime.KeepAlive(bitwriter)
	runtime.KeepAlive(value)
	runtime.KeepAlive(nbits)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PutBitsUint64: write nbits bits of value to BitWriter.
//
// The function takes the following parameters:
//
//    - value of #guint64 to write.
//    - nbits: number of bits to write.
//
// The function returns the following values:
//
//    - ok: TRUE if successful, FALSE otherwise.
//
func (bitwriter *BitWriter) PutBitsUint64(value uint64, nbits uint) bool {
	var _arg0 *C.GstBitWriter // out
	var _arg1 C.guint64       // out
	var _arg2 C.guint         // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	_arg1 = C.guint64(value)
	_arg2 = C.guint(nbits)

	_cret = C.gst_bit_writer_put_bits_uint64(_arg0, _arg1, _arg2)
	runtime.KeepAlive(bitwriter)
	runtime.KeepAlive(value)
	runtime.KeepAlive(nbits)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// PutBitsUint8: write nbits bits of value to BitWriter.
//
// The function takes the following parameters:
//
//    - value of #guint8 to write.
//    - nbits: number of bits to write.
//
// The function returns the following values:
//
//    - ok: TRUE if successful, FALSE otherwise.
//
func (bitwriter *BitWriter) PutBitsUint8(value byte, nbits uint) bool {
	var _arg0 *C.GstBitWriter // out
	var _arg1 C.guint8        // out
	var _arg2 C.guint         // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	_arg1 = C.guint8(value)
	_arg2 = C.guint(nbits)

	_cret = C.gst_bit_writer_put_bits_uint8(_arg0, _arg1, _arg2)
	runtime.KeepAlive(bitwriter)
	runtime.KeepAlive(value)
	runtime.KeepAlive(nbits)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Reset resets bitwriter and frees the data if it's owned by bitwriter.
func (bitwriter *BitWriter) Reset() {
	var _arg0 *C.GstBitWriter // out

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))

	C.gst_bit_writer_reset(_arg0)
	runtime.KeepAlive(bitwriter)
}

// ResetAndGetBuffer resets bitwriter and returns the current data as Buffer.
//
// Free-function: gst_buffer_unref.
//
// The function returns the following values:
//
//    - buffer: new allocated Buffer wrapping the current data.
//      gst_buffer_unref() after usage.
//
func (bitwriter *BitWriter) ResetAndGetBuffer() *gst.Buffer {
	var _arg0 *C.GstBitWriter // out
	var _cret *C.GstBuffer    // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))

	_cret = C.gst_bit_writer_reset_and_get_buffer(_arg0)
	runtime.KeepAlive(bitwriter)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (bitwriter *BitWriter) SetPos(pos uint) bool {
	var _arg0 *C.GstBitWriter // out
	var _arg1 C.guint         // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstBitWriter)(gextras.StructNative(unsafe.Pointer(bitwriter)))
	_arg1 = C.guint(pos)

	_cret = C.gst_bit_writer_set_pos(_arg0, _arg1)
	runtime.KeepAlive(bitwriter)
	runtime.KeepAlive(pos)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
