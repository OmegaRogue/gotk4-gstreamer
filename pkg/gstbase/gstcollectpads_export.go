// Code generated by girgen. DO NOT EDIT.

package gstbase

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/base/base.h>
import "C"

//export _gotk4_gstbase1_CollectPadsBufferFunction
func _gotk4_gstbase1_CollectPadsBufferFunction(arg1 *C.GstCollectPads, arg2 *C.GstCollectData, arg3 *C.GstBuffer, arg4 C.gpointer) (cret C.GstFlowReturn) {
	var fn CollectPadsBufferFunction
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CollectPadsBufferFunction)
	}

	var _pads *CollectPads  // out
	var _data *CollectData  // out
	var _buffer *gst.Buffer // out

	_pads = wrapCollectPads(coreglib.Take(unsafe.Pointer(arg1)))
	_data = (*CollectData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	flowReturn := fn(_pads, _data, _buffer)

	var _ gst.FlowReturn

	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstbase1_CollectPadsClipFunction
func _gotk4_gstbase1_CollectPadsClipFunction(arg1 *C.GstCollectPads, arg2 *C.GstCollectData, arg3 *C.GstBuffer, arg4 **C.GstBuffer, arg5 C.gpointer) (cret C.GstFlowReturn) {
	var fn CollectPadsClipFunction
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CollectPadsClipFunction)
	}

	var _pads *CollectPads    // out
	var _data *CollectData    // out
	var _inbuffer *gst.Buffer // out

	_pads = wrapCollectPads(coreglib.Take(unsafe.Pointer(arg1)))
	_data = (*CollectData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_inbuffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_inbuffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	outbuffer, flowReturn := fn(_pads, _data, _inbuffer)

	var _ *gst.Buffer
	var _ gst.FlowReturn

	*arg4 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(outbuffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(outbuffer)), nil)
	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstbase1_CollectPadsCompareFunction
func _gotk4_gstbase1_CollectPadsCompareFunction(arg1 *C.GstCollectPads, arg2 *C.GstCollectData, arg3 C.GstClockTime, arg4 *C.GstCollectData, arg5 C.GstClockTime, arg6 C.gpointer) (cret C.gint) {
	var fn CollectPadsCompareFunction
	{
		v := gbox.Get(uintptr(arg6))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CollectPadsCompareFunction)
	}

	var _pads *CollectPads        // out
	var _data1 *CollectData       // out
	var _timestamp1 gst.ClockTime // out
	var _data2 *CollectData       // out
	var _timestamp2 gst.ClockTime // out

	_pads = wrapCollectPads(coreglib.Take(unsafe.Pointer(arg1)))
	_data1 = (*CollectData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_timestamp1 = uint64(arg3)
	type _ = gst.ClockTime
	type _ = uint64
	_data2 = (*CollectData)(gextras.NewStructNative(unsafe.Pointer(arg4)))
	_timestamp2 = uint64(arg5)
	type _ = gst.ClockTime
	type _ = uint64

	gint := fn(_pads, _data1, _timestamp1, _data2, _timestamp2)

	var _ int

	cret = C.gint(gint)

	return cret
}

//export _gotk4_gstbase1_CollectPadsEventFunction
func _gotk4_gstbase1_CollectPadsEventFunction(arg1 *C.GstCollectPads, arg2 *C.GstCollectData, arg3 *C.GstEvent, arg4 C.gpointer) (cret C.gboolean) {
	var fn CollectPadsEventFunction
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CollectPadsEventFunction)
	}

	var _pads *CollectPads // out
	var _pad *CollectData  // out
	var _event *gst.Event  // out

	_pads = wrapCollectPads(coreglib.Take(unsafe.Pointer(arg1)))
	_pad = (*CollectData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_event = (*gst.Event)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := fn(_pads, _pad, _event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gstbase1_CollectPadsFunction
func _gotk4_gstbase1_CollectPadsFunction(arg1 *C.GstCollectPads, arg2 C.gpointer) (cret C.GstFlowReturn) {
	var fn CollectPadsFunction
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CollectPadsFunction)
	}

	var _pads *CollectPads // out

	_pads = wrapCollectPads(coreglib.Take(unsafe.Pointer(arg1)))

	flowReturn := fn(_pads)

	var _ gst.FlowReturn

	cret = C.GstFlowReturn(flowReturn)

	return cret
}

//export _gotk4_gstbase1_CollectPadsQueryFunction
func _gotk4_gstbase1_CollectPadsQueryFunction(arg1 *C.GstCollectPads, arg2 *C.GstCollectData, arg3 *C.GstQuery, arg4 C.gpointer) (cret C.gboolean) {
	var fn CollectPadsQueryFunction
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CollectPadsQueryFunction)
	}

	var _pads *CollectPads // out
	var _pad *CollectData  // out
	var _query *gst.Query  // out

	_pads = wrapCollectPads(coreglib.Take(unsafe.Pointer(arg1)))
	_pad = (*CollectData)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_query = (*gst.Query)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := fn(_pads, _pad, _query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
