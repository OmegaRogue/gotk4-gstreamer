// Code generated by girgen. DO NOT EDIT.

package gstbase

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/base/base.h>
import "C"

// GType values.
var (
	GTypeFlowCombiner = coreglib.Type(C.gst_flow_combiner_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFlowCombiner, F: marshalFlowCombiner},
	})
}

// FlowCombiner: utility struct to help handling FlowReturn combination. Useful
// for Element<!-- -->s that have multiple source pads and need to combine the
// different FlowReturn for those pads.
//
// FlowCombiner works by using the last FlowReturn for all Pad it has in its
// list and computes the combined return value and provides it to the caller.
//
// To add a new pad to the FlowCombiner use gst_flow_combiner_add_pad(). The new
// Pad is stored with a default value of GST_FLOW_OK.
//
// In case you want a Pad to be removed, use gst_flow_combiner_remove_pad().
//
// Please be aware that this struct isn't thread safe as its designed to be used
// by demuxers, those usually will have a single thread operating it.
//
// These functions will take refs on the passed Pad<!-- -->s.
//
// Aside from reducing the user's code size, the main advantage of using this
// helper struct is to follow the standard rules for FlowReturn combination.
// These rules are:
//
// * GST_FLOW_EOS: only if all returns are EOS too * GST_FLOW_NOT_LINKED: only
// if all returns are NOT_LINKED too * GST_FLOW_ERROR or below: if at least one
// returns an error return * GST_FLOW_NOT_NEGOTIATED: if at least one returns a
// not-negotiated return * GST_FLOW_FLUSHING: if at least one returns flushing *
// GST_FLOW_OK: otherwise
//
// GST_FLOW_ERROR or below, GST_FLOW_NOT_NEGOTIATED and GST_FLOW_FLUSHING are
// returned immediately from the gst_flow_combiner_update_flow() function.
//
// An instance of this type is always passed by reference.
type FlowCombiner struct {
	*flowCombiner
}

// flowCombiner is the struct that's finalized.
type flowCombiner struct {
	native *C.GstFlowCombiner
}

func marshalFlowCombiner(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &FlowCombiner{&flowCombiner{(*C.GstFlowCombiner)(b)}}, nil
}

// NewFlowCombiner constructs a struct FlowCombiner.
func NewFlowCombiner() *FlowCombiner {
	var _cret *C.GstFlowCombiner // in

	_cret = C.gst_flow_combiner_new()

	var _flowCombiner *FlowCombiner // out

	_flowCombiner = (*FlowCombiner)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_flowCombiner)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_flow_combiner_unref((*C.GstFlowCombiner)(intern.C))
		},
	)

	return _flowCombiner
}

// AddPad adds a new Pad to the FlowCombiner.
//
// The function takes the following parameters:
//
//    - pad that is being added.
//
func (combiner *FlowCombiner) AddPad(pad *gst.Pad) {
	var _arg0 *C.GstFlowCombiner // out
	var _arg1 *C.GstPad          // out

	_arg0 = (*C.GstFlowCombiner)(gextras.StructNative(unsafe.Pointer(combiner)))
	_arg1 = (*C.GstPad)(unsafe.Pointer(coreglib.InternObject(pad).Native()))

	C.gst_flow_combiner_add_pad(_arg0, _arg1)
	runtime.KeepAlive(combiner)
	runtime.KeepAlive(pad)
}

// Clear removes all pads from a FlowCombiner and resets it to its initial
// state.
func (combiner *FlowCombiner) Clear() {
	var _arg0 *C.GstFlowCombiner // out

	_arg0 = (*C.GstFlowCombiner)(gextras.StructNative(unsafe.Pointer(combiner)))

	C.gst_flow_combiner_clear(_arg0)
	runtime.KeepAlive(combiner)
}

// RemovePad removes a Pad from the FlowCombiner.
//
// The function takes the following parameters:
//
//    - pad to remove.
//
func (combiner *FlowCombiner) RemovePad(pad *gst.Pad) {
	var _arg0 *C.GstFlowCombiner // out
	var _arg1 *C.GstPad          // out

	_arg0 = (*C.GstFlowCombiner)(gextras.StructNative(unsafe.Pointer(combiner)))
	_arg1 = (*C.GstPad)(unsafe.Pointer(coreglib.InternObject(pad).Native()))

	C.gst_flow_combiner_remove_pad(_arg0, _arg1)
	runtime.KeepAlive(combiner)
	runtime.KeepAlive(pad)
}

// Reset flow combiner and all pads to their initial state without removing
// pads.
func (combiner *FlowCombiner) Reset() {
	var _arg0 *C.GstFlowCombiner // out

	_arg0 = (*C.GstFlowCombiner)(gextras.StructNative(unsafe.Pointer(combiner)))

	C.gst_flow_combiner_reset(_arg0)
	runtime.KeepAlive(combiner)
}

// UpdateFlow computes the combined flow return for the pads in it.
//
// The FlowReturn parameter should be the last flow return update for a pad in
// this FlowCombiner. It will use this value to be able to shortcut some
// combinations and avoid looking over all pads again. e.g. The last combined
// return is the same as the latest obtained FlowReturn.
//
// The function takes the following parameters:
//
//    - fret: latest FlowReturn received for a pad in this FlowCombiner.
//
// The function returns the following values:
//
//    - flowReturn: combined FlowReturn.
//
func (combiner *FlowCombiner) UpdateFlow(fret gst.FlowReturn) gst.FlowReturn {
	var _arg0 *C.GstFlowCombiner // out
	var _arg1 C.GstFlowReturn    // out
	var _cret C.GstFlowReturn    // in

	_arg0 = (*C.GstFlowCombiner)(gextras.StructNative(unsafe.Pointer(combiner)))
	_arg1 = C.GstFlowReturn(fret)

	_cret = C.gst_flow_combiner_update_flow(_arg0, _arg1)
	runtime.KeepAlive(combiner)
	runtime.KeepAlive(fret)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}

// UpdatePadFlow sets the provided pad's last flow return to provided value and
// computes the combined flow return for the pads in it.
//
// The FlowReturn parameter should be the last flow return update for a pad in
// this FlowCombiner. It will use this value to be able to shortcut some
// combinations and avoid looking over all pads again. e.g. The last combined
// return is the same as the latest obtained FlowReturn.
//
// The function takes the following parameters:
//
//    - pad whose FlowReturn to update.
//    - fret: latest FlowReturn received for a pad in this FlowCombiner.
//
// The function returns the following values:
//
//    - flowReturn: combined FlowReturn.
//
func (combiner *FlowCombiner) UpdatePadFlow(pad *gst.Pad, fret gst.FlowReturn) gst.FlowReturn {
	var _arg0 *C.GstFlowCombiner // out
	var _arg1 *C.GstPad          // out
	var _arg2 C.GstFlowReturn    // out
	var _cret C.GstFlowReturn    // in

	_arg0 = (*C.GstFlowCombiner)(gextras.StructNative(unsafe.Pointer(combiner)))
	_arg1 = (*C.GstPad)(unsafe.Pointer(coreglib.InternObject(pad).Native()))
	_arg2 = C.GstFlowReturn(fret)

	_cret = C.gst_flow_combiner_update_pad_flow(_arg0, _arg1, _arg2)
	runtime.KeepAlive(combiner)
	runtime.KeepAlive(pad)
	runtime.KeepAlive(fret)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}
