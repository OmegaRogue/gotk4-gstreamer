// Code generated by girgen. DO NOT EDIT.

package gstbase

import (
	"fmt"
	_ "runtime/cgo"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #cgo pkg-config: gstreamer-base-1.0 gstreamer-1.0
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/base/base.h>
import "C"

// GType values.
var (
	GTypeAggregatorStartTimeSelection = coreglib.Type(C.gst_aggregator_start_time_selection_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAggregatorStartTimeSelection, F: marshalAggregatorStartTimeSelection},
	})
}

type AggregatorStartTimeSelection C.gint

const (
	// AggregatorStartTimeSelectionZero: start at running time 0.
	AggregatorStartTimeSelectionZero AggregatorStartTimeSelection = iota
	// AggregatorStartTimeSelectionFirst: start at the running time of the first
	// buffer that is received.
	AggregatorStartTimeSelectionFirst
	// AggregatorStartTimeSelectionSet: start at the running time selected by
	// the start-time property.
	AggregatorStartTimeSelectionSet
)

func marshalAggregatorStartTimeSelection(p uintptr) (interface{}, error) {
	return AggregatorStartTimeSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AggregatorStartTimeSelection.
func (a AggregatorStartTimeSelection) String() string {
	switch a {
	case AggregatorStartTimeSelectionZero:
		return "Zero"
	case AggregatorStartTimeSelectionFirst:
		return "First"
	case AggregatorStartTimeSelectionSet:
		return "Set"
	default:
		return fmt.Sprintf("AggregatorStartTimeSelection(%d)", a)
	}
}
