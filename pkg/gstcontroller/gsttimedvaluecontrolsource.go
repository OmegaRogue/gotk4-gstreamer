// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
// extern void _gotk4_gstcontroller1_TimedValueControlSource_ConnectValueRemoved(gpointer, GstControlPoint*, guintptr);
// extern void _gotk4_gstcontroller1_TimedValueControlSource_ConnectValueChanged(gpointer, GstControlPoint*, guintptr);
// extern void _gotk4_gstcontroller1_TimedValueControlSource_ConnectValueAdded(gpointer, GstControlPoint*, guintptr);
import "C"

// GType values.
var (
	GTypeTimedValueControlSource = coreglib.Type(C.gst_timed_value_control_source_get_type())
	GTypeControlPoint            = coreglib.Type(C.gst_control_point_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTimedValueControlSource, F: marshalTimedValueControlSource},
		coreglib.TypeMarshaler{T: GTypeControlPoint, F: marshalControlPoint},
	})
}

// TimedValueControlInvalidateCache: reset the controlled value cache.
//
// The function takes the following parameters:
//
//    - self: TimedValueControlSource.
//
func TimedValueControlInvalidateCache(self TimedValueControlSourcer) {
	var _arg1 *C.GstTimedValueControlSource // out

	_arg1 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.gst_timed_value_control_invalidate_cache(_arg1)
	runtime.KeepAlive(self)
}

// TimedValueControlSourceOverrides contains methods that are overridable.
type TimedValueControlSourceOverrides struct {
}

func defaultTimedValueControlSourceOverrides(v *TimedValueControlSource) TimedValueControlSourceOverrides {
	return TimedValueControlSourceOverrides{}
}

// TimedValueControlSource: base class for ControlSource that use time-stamped
// values.
//
// When overriding bind, chain up first to give this bind implementation a
// chance to setup things.
//
// All functions are MT-safe.
type TimedValueControlSource struct {
	_ [0]func() // equal guard
	gst.ControlSource
}

var (
	_ gst.ControlSourcer = (*TimedValueControlSource)(nil)
)

// TimedValueControlSourcer describes types inherited from class TimedValueControlSource.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type TimedValueControlSourcer interface {
	coreglib.Objector
	baseTimedValueControlSource() *TimedValueControlSource
}

var _ TimedValueControlSourcer = (*TimedValueControlSource)(nil)

func init() {
	coreglib.RegisterClassInfo[*TimedValueControlSource, *TimedValueControlSourceClass, TimedValueControlSourceOverrides](
		GTypeTimedValueControlSource,
		initTimedValueControlSourceClass,
		wrapTimedValueControlSource,
		defaultTimedValueControlSourceOverrides,
	)
}

func initTimedValueControlSourceClass(gclass unsafe.Pointer, overrides TimedValueControlSourceOverrides, classInitFunc func(*TimedValueControlSourceClass)) {
	if classInitFunc != nil {
		class := (*TimedValueControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTimedValueControlSource(obj *coreglib.Object) *TimedValueControlSource {
	return &TimedValueControlSource{
		ControlSource: gst.ControlSource{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalTimedValueControlSource(p uintptr) (interface{}, error) {
	return wrapTimedValueControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *TimedValueControlSource) baseTimedValueControlSource() *TimedValueControlSource {
	return self
}

// BaseTimedValueControlSource returns the underlying base object.
func BaseTimedValueControlSource(obj TimedValueControlSourcer) *TimedValueControlSource {
	return obj.baseTimedValueControlSource()
}

// ConnectValueAdded is emitted right after the new value has been added to
// self.
func (self *TimedValueControlSource) ConnectValueAdded(f func(timedValue *ControlPoint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "value-added", false, unsafe.Pointer(C._gotk4_gstcontroller1_TimedValueControlSource_ConnectValueAdded), f)
}

// ConnectValueChanged is emitted right after the new value has been set on
// timed_signals.
func (self *TimedValueControlSource) ConnectValueChanged(f func(timedValue *ControlPoint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "value-changed", false, unsafe.Pointer(C._gotk4_gstcontroller1_TimedValueControlSource_ConnectValueChanged), f)
}

// ConnectValueRemoved is emitted when timed_value is removed from self.
func (self *TimedValueControlSource) ConnectValueRemoved(f func(timedValue *ControlPoint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(self, "value-removed", false, unsafe.Pointer(C._gotk4_gstcontroller1_TimedValueControlSource_ConnectValueRemoved), f)
}

// All returns a read-only copy of the list of TimedValue for the given
// property. Free the list after done with it.
//
// The function returns the following values:
//
//    - list: copy of the list, or NULL if the property isn't handled by the
//      controller.
//
func (self *TimedValueControlSource) All() []*gst.TimedValue {
	var _arg0 *C.GstTimedValueControlSource // out
	var _cret *C.GList                      // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gst_timed_value_control_source_get_all(_arg0)
	runtime.KeepAlive(self)

	var _list []*gst.TimedValue // out

	_list = make([]*gst.TimedValue, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstTimedValue)(v)
		var dst *gst.TimedValue // out
		dst = (*gst.TimedValue)(gextras.NewStructNative(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Count: get the number of control points that are set.
//
// The function returns the following values:
//
//    - gint: number of control points that are set.
//
func (self *TimedValueControlSource) Count() int {
	var _arg0 *C.GstTimedValueControlSource // out
	var _cret C.gint                        // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.gst_timed_value_control_source_get_count(_arg0)
	runtime.KeepAlive(self)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Set the value of given controller-handled property at a certain time.
//
// The function takes the following parameters:
//
//    - timestamp: time the control-change is scheduled for.
//    - value: control-value.
//
// The function returns the following values:
//
//    - ok: FALSE if the values couldn't be set, TRUE otherwise.
//
func (self *TimedValueControlSource) Set(timestamp gst.ClockTime, value float64) bool {
	var _arg0 *C.GstTimedValueControlSource // out
	var _arg1 C.GstClockTime                // out
	var _arg2 C.gdouble                     // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.guint64(timestamp)
	type _ = gst.ClockTime
	type _ = uint64
	_arg2 = C.gdouble(value)

	_cret = C.gst_timed_value_control_source_set(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timestamp)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetFromList sets multiple timed values at once.
//
// The function takes the following parameters:
//
//    - timedvalues: list with TimedValue items.
//
// The function returns the following values:
//
//    - ok: FALSE if the values couldn't be set, TRUE otherwise.
//
func (self *TimedValueControlSource) SetFromList(timedvalues []*gst.TimedValue) bool {
	var _arg0 *C.GstTimedValueControlSource // out
	var _arg1 *C.GSList                     // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	for i := len(timedvalues) - 1; i >= 0; i-- {
		src := timedvalues[i]
		var dst *C.GstTimedValue // out
		dst = (*C.GstTimedValue)(gextras.StructNative(unsafe.Pointer(src)))
		_arg1 = C.g_slist_prepend(_arg1, C.gpointer(unsafe.Pointer(dst)))
	}
	defer C.g_slist_free(_arg1)

	_cret = C.gst_timed_value_control_source_set_from_list(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timedvalues)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Unset: used to remove the value of given controller-handled property at a
// certain time.
//
// The function takes the following parameters:
//
//    - timestamp: time the control-change should be removed from.
//
// The function returns the following values:
//
//    - ok: FALSE if the value couldn't be unset (i.e. not found, TRUE otherwise.
//
func (self *TimedValueControlSource) Unset(timestamp gst.ClockTime) bool {
	var _arg0 *C.GstTimedValueControlSource // out
	var _arg1 C.GstClockTime                // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.guint64(timestamp)
	type _ = gst.ClockTime
	type _ = uint64

	_cret = C.gst_timed_value_control_source_unset(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timestamp)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// UnsetAll: used to remove all time-stamped values of given controller-handled
// property.
func (self *TimedValueControlSource) UnsetAll() {
	var _arg0 *C.GstTimedValueControlSource // out

	_arg0 = (*C.GstTimedValueControlSource)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.gst_timed_value_control_source_unset_all(_arg0)
	runtime.KeepAlive(self)
}

// ControlPoint: internal structure for value+time and various temporary values
// used for interpolation. This "inherits" from GstTimedValue.
//
// An instance of this type is always passed by reference.
type ControlPoint struct {
	*controlPoint
}

// controlPoint is the struct that's finalized.
type controlPoint struct {
	native *C.GstControlPoint
}

func marshalControlPoint(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ControlPoint{&controlPoint{(*C.GstControlPoint)(b)}}, nil
}

// Timestamp: timestamp of the value change.
func (c *ControlPoint) Timestamp() gst.ClockTime {
	valptr := &c.native.timestamp
	var _v gst.ClockTime // out
	_v = uint64(*valptr)
	type _ = gst.ClockTime
	type _ = uint64
	return _v
}

// Value: new value.
func (c *ControlPoint) Value() float64 {
	valptr := &c.native.value
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Value: new value.
func (c *ControlPoint) SetValue(value float64) {
	valptr := &c.native.value
	*valptr = C.gdouble(value)
}

// Copy copies a ControlPoint.
//
// The function returns the following values:
//
//    - controlPoint: copy of cp.
//
func (cp *ControlPoint) Copy() *ControlPoint {
	var _arg0 *C.GstControlPoint // out
	var _cret *C.GstControlPoint // in

	_arg0 = (*C.GstControlPoint)(gextras.StructNative(unsafe.Pointer(cp)))

	_cret = C.gst_control_point_copy(_arg0)
	runtime.KeepAlive(cp)

	var _controlPoint *ControlPoint // out

	_controlPoint = (*ControlPoint)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_controlPoint)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_control_point_free((*C.GstControlPoint)(intern.C))
		},
	)

	return _controlPoint
}

// TimedValueControlSourceClass: instance of this type is always passed by
// reference.
type TimedValueControlSourceClass struct {
	*timedValueControlSourceClass
}

// timedValueControlSourceClass is the struct that's finalized.
type timedValueControlSourceClass struct {
	native *C.GstTimedValueControlSourceClass
}

func (t *TimedValueControlSourceClass) ParentClass() *gst.ControlSourceClass {
	valptr := &t.native.parent_class
	var _v *gst.ControlSourceClass // out
	_v = (*gst.ControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
