// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
import "C"

// GType values.
var (
	GTypeProxyControlBinding = coreglib.Type(C.gst_proxy_control_binding_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeProxyControlBinding, F: marshalProxyControlBinding},
	})
}

// ProxyControlBindingOverrides contains methods that are overridable.
type ProxyControlBindingOverrides struct {
}

func defaultProxyControlBindingOverrides(v *ProxyControlBinding) ProxyControlBindingOverrides {
	return ProxyControlBindingOverrides{}
}

// ProxyControlBinding that forwards requests to another ControlBinding.
type ProxyControlBinding struct {
	_ [0]func() // equal guard
	gst.ControlBinding
}

var (
	_ gst.ControlBindinger = (*ProxyControlBinding)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ProxyControlBinding, *ProxyControlBindingClass, ProxyControlBindingOverrides](
		GTypeProxyControlBinding,
		initProxyControlBindingClass,
		wrapProxyControlBinding,
		defaultProxyControlBindingOverrides,
	)
}

func initProxyControlBindingClass(gclass unsafe.Pointer, overrides ProxyControlBindingOverrides, classInitFunc func(*ProxyControlBindingClass)) {
	if classInitFunc != nil {
		class := (*ProxyControlBindingClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapProxyControlBinding(obj *coreglib.Object) *ProxyControlBinding {
	return &ProxyControlBinding{
		ControlBinding: gst.ControlBinding{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalProxyControlBinding(p uintptr) (interface{}, error) {
	return wrapProxyControlBinding(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewProxyControlBinding forwards all access to data or sync_values() requests
// from property_name on object to the control binding at ref_property_name on
// ref_object.
//
// The function takes the following parameters:
//
//    - object: Object.
//    - propertyName: property name in object to control.
//    - refObject to forward all ControlBinding requests to.
//    - refPropertyName: property_name in ref_object to control.
//
// The function returns the following values:
//
//    - proxyControlBinding: new ControlBinding that proxies the control
//      interface between properties on different Object's.
//
func NewProxyControlBinding(object gst.GstObjector, propertyName string, refObject gst.GstObjector, refPropertyName string) *ProxyControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstObject         // out
	var _arg4 *C.gchar             // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(refObject).Native()))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(refPropertyName)))
	defer C.free(unsafe.Pointer(_arg4))

	_cret = C.gst_proxy_control_binding_new(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(refObject)
	runtime.KeepAlive(refPropertyName)

	var _proxyControlBinding *ProxyControlBinding // out

	_proxyControlBinding = wrapProxyControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _proxyControlBinding
}

// ProxyControlBindingClass: opaque ProxyControlBindingClass struct
//
// An instance of this type is always passed by reference.
type ProxyControlBindingClass struct {
	*proxyControlBindingClass
}

// proxyControlBindingClass is the struct that's finalized.
type proxyControlBindingClass struct {
	native *C.GstProxyControlBindingClass
}
