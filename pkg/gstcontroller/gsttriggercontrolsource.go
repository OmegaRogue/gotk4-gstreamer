// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
import "C"

// GType values.
var (
	GTypeTriggerControlSource = coreglib.Type(C.gst_trigger_control_source_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTriggerControlSource, F: marshalTriggerControlSource},
	})
}

// TriggerControlSourceOverrides contains methods that are overridable.
type TriggerControlSourceOverrides struct {
}

func defaultTriggerControlSourceOverrides(v *TriggerControlSource) TriggerControlSourceOverrides {
	return TriggerControlSourceOverrides{}
}

// TriggerControlSource is a ControlSource, that returns values from user-given
// control points. It allows for a tolerance on the time-stamps.
//
// To use TriggerControlSource get a new instance by calling
// gst_trigger_control_source_new(), bind it to a Spec and set some control
// points by calling gst_timed_value_control_source_set().
//
// All functions are MT-safe.
type TriggerControlSource struct {
	_ [0]func() // equal guard
	TimedValueControlSource
}

var (
	_ TimedValueControlSourcer = (*TriggerControlSource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TriggerControlSource, *TriggerControlSourceClass, TriggerControlSourceOverrides](
		GTypeTriggerControlSource,
		initTriggerControlSourceClass,
		wrapTriggerControlSource,
		defaultTriggerControlSourceOverrides,
	)
}

func initTriggerControlSourceClass(gclass unsafe.Pointer, overrides TriggerControlSourceOverrides, classInitFunc func(*TriggerControlSourceClass)) {
	if classInitFunc != nil {
		class := (*TriggerControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTriggerControlSource(obj *coreglib.Object) *TriggerControlSource {
	return &TriggerControlSource{
		TimedValueControlSource: TimedValueControlSource{
			ControlSource: gst.ControlSource{
				GstObject: gst.GstObject{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalTriggerControlSource(p uintptr) (interface{}, error) {
	return wrapTriggerControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewTriggerControlSource: this returns a new, unbound TriggerControlSource.
//
// The function returns the following values:
//
//    - triggerControlSource: new, unbound TriggerControlSource.
//
func NewTriggerControlSource() *TriggerControlSource {
	var _cret *C.GstControlSource // in

	_cret = C.gst_trigger_control_source_new()

	var _triggerControlSource *TriggerControlSource // out

	_triggerControlSource = wrapTriggerControlSource(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _triggerControlSource
}

// TriggerControlSourceClass: instance of this type is always passed by
// reference.
type TriggerControlSourceClass struct {
	*triggerControlSourceClass
}

// triggerControlSourceClass is the struct that's finalized.
type triggerControlSourceClass struct {
	native *C.GstTriggerControlSourceClass
}

func (t *TriggerControlSourceClass) ParentClass() *TimedValueControlSourceClass {
	valptr := &t.native.parent_class
	var _v *TimedValueControlSourceClass // out
	_v = (*TimedValueControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
