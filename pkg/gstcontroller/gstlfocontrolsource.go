// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"fmt"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
import "C"

// GType values.
var (
	GTypeLFOWaveform      = coreglib.Type(C.gst_lfo_waveform_get_type())
	GTypeLFOControlSource = coreglib.Type(C.gst_lfo_control_source_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLFOWaveform, F: marshalLFOWaveform},
		coreglib.TypeMarshaler{T: GTypeLFOControlSource, F: marshalLFOControlSource},
	})
}

// LFOWaveform various waveform modes available.
type LFOWaveform C.gint

const (
	// LfoWaveformSine: sine waveform.
	LfoWaveformSine LFOWaveform = iota
	// LfoWaveformSquare: square waveform.
	LfoWaveformSquare
	// LfoWaveformSaw: saw waveform.
	LfoWaveformSaw
	// LfoWaveformReverseSaw: reverse saw waveform.
	LfoWaveformReverseSaw
	// LfoWaveformTriangle: triangle waveform.
	LfoWaveformTriangle
)

func marshalLFOWaveform(p uintptr) (interface{}, error) {
	return LFOWaveform(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for LFOWaveform.
func (l LFOWaveform) String() string {
	switch l {
	case LfoWaveformSine:
		return "Sine"
	case LfoWaveformSquare:
		return "Square"
	case LfoWaveformSaw:
		return "Saw"
	case LfoWaveformReverseSaw:
		return "ReverseSaw"
	case LfoWaveformTriangle:
		return "Triangle"
	default:
		return fmt.Sprintf("LFOWaveform(%d)", l)
	}
}

// LFOControlSourceOverrides contains methods that are overridable.
type LFOControlSourceOverrides struct {
}

func defaultLFOControlSourceOverrides(v *LFOControlSource) LFOControlSourceOverrides {
	return LFOControlSourceOverrides{}
}

// LFOControlSource is a ControlSource, that provides several periodic waveforms
// as control values.
//
// To use LFOControlSource get a new instance by calling
// gst_lfo_control_source_new(), bind it to a Spec and set the relevant
// properties.
//
// All functions are MT-safe.
type LFOControlSource struct {
	_ [0]func() // equal guard
	gst.ControlSource
}

var (
	_ gst.ControlSourcer = (*LFOControlSource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*LFOControlSource, *LFOControlSourceClass, LFOControlSourceOverrides](
		GTypeLFOControlSource,
		initLFOControlSourceClass,
		wrapLFOControlSource,
		defaultLFOControlSourceOverrides,
	)
}

func initLFOControlSourceClass(gclass unsafe.Pointer, overrides LFOControlSourceOverrides, classInitFunc func(*LFOControlSourceClass)) {
	if classInitFunc != nil {
		class := (*LFOControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLFOControlSource(obj *coreglib.Object) *LFOControlSource {
	return &LFOControlSource{
		ControlSource: gst.ControlSource{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalLFOControlSource(p uintptr) (interface{}, error) {
	return wrapLFOControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewLFOControlSource: this returns a new, unbound LFOControlSource.
//
// The function returns the following values:
//
//    - lfoControlSource: new, unbound LFOControlSource.
//
func NewLFOControlSource() *LFOControlSource {
	var _cret *C.GstControlSource // in

	_cret = C.gst_lfo_control_source_new()

	var _lfoControlSource *LFOControlSource // out

	_lfoControlSource = wrapLFOControlSource(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _lfoControlSource
}

// LFOControlSourceClass: instance of this type is always passed by reference.
type LFOControlSourceClass struct {
	*lfoControlSourceClass
}

// lfoControlSourceClass is the struct that's finalized.
type lfoControlSourceClass struct {
	native *C.GstLFOControlSourceClass
}

func (l *LFOControlSourceClass) ParentClass() *gst.ControlSourceClass {
	valptr := &l.native.parent_class
	var _v *gst.ControlSourceClass // out
	_v = (*gst.ControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
