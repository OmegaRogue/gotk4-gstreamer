// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
import "C"

// GType values.
var (
	GTypeDirectControlBinding = coreglib.Type(C.gst_direct_control_binding_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDirectControlBinding, F: marshalDirectControlBinding},
	})
}

// DirectControlBindingOverrides contains methods that are overridable.
type DirectControlBindingOverrides struct {
}

func defaultDirectControlBindingOverrides(v *DirectControlBinding) DirectControlBindingOverrides {
	return DirectControlBindingOverrides{}
}

// DirectControlBinding: value mapping object that attaches control sources to
// gobject properties. It will map the control values directly to the target
// property range. If a non-absolute direct control binding is used, the value
// range [0.0 ... 1.0] is mapped to full target property range, and all values
// outside the range will be clipped. An absolute control binding will not do
// any value transformations.
type DirectControlBinding struct {
	_ [0]func() // equal guard
	gst.ControlBinding
}

var (
	_ gst.ControlBindinger = (*DirectControlBinding)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DirectControlBinding, *DirectControlBindingClass, DirectControlBindingOverrides](
		GTypeDirectControlBinding,
		initDirectControlBindingClass,
		wrapDirectControlBinding,
		defaultDirectControlBindingOverrides,
	)
}

func initDirectControlBindingClass(gclass unsafe.Pointer, overrides DirectControlBindingOverrides, classInitFunc func(*DirectControlBindingClass)) {
	if classInitFunc != nil {
		class := (*DirectControlBindingClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDirectControlBinding(obj *coreglib.Object) *DirectControlBinding {
	return &DirectControlBinding{
		ControlBinding: gst.ControlBinding{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalDirectControlBinding(p uintptr) (interface{}, error) {
	return wrapDirectControlBinding(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewDirectControlBinding: create a new control-binding that attaches the
// ControlSource to the #GObject property. It will map the control source range
// [0.0 ... 1.0] to the full target property range, and clip all values outside
// this range.
//
// The function takes the following parameters:
//
//    - object of the property.
//    - propertyName: property-name to attach the control source.
//    - cs: control source.
//
// The function returns the following values:
//
//    - directControlBinding: new DirectControlBinding.
//
func NewDirectControlBinding(object gst.GstObjector, propertyName string, cs gst.ControlSourcer) *DirectControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstControlSource  // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(cs).Native()))

	_cret = C.gst_direct_control_binding_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(cs)

	var _directControlBinding *DirectControlBinding // out

	_directControlBinding = wrapDirectControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _directControlBinding
}

// NewDirectControlBindingAbsolute: create a new control-binding that attaches
// the ControlSource to the #GObject property. It will directly map the control
// source values to the target property range without any transformations.
//
// The function takes the following parameters:
//
//    - object of the property.
//    - propertyName: property-name to attach the control source.
//    - cs: control source.
//
// The function returns the following values:
//
//    - directControlBinding: new DirectControlBinding.
//
func NewDirectControlBindingAbsolute(object gst.GstObjector, propertyName string, cs gst.ControlSourcer) *DirectControlBinding {
	var _arg1 *C.GstObject         // out
	var _arg2 *C.gchar             // out
	var _arg3 *C.GstControlSource  // out
	var _cret *C.GstControlBinding // in

	_arg1 = (*C.GstObject)(unsafe.Pointer(coreglib.InternObject(object).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(propertyName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.GstControlSource)(unsafe.Pointer(coreglib.InternObject(cs).Native()))

	_cret = C.gst_direct_control_binding_new_absolute(_arg1, _arg2, _arg3)
	runtime.KeepAlive(object)
	runtime.KeepAlive(propertyName)
	runtime.KeepAlive(cs)

	var _directControlBinding *DirectControlBinding // out

	_directControlBinding = wrapDirectControlBinding(coreglib.Take(unsafe.Pointer(_cret)))

	return _directControlBinding
}

// DirectControlBindingClass class structure of DirectControlBinding.
//
// An instance of this type is always passed by reference.
type DirectControlBindingClass struct {
	*directControlBindingClass
}

// directControlBindingClass is the struct that's finalized.
type directControlBindingClass struct {
	native *C.GstDirectControlBindingClass
}

// ParentClass: parent class.
func (d *DirectControlBindingClass) ParentClass() *gst.ControlBindingClass {
	valptr := &d.native.parent_class
	var _v *gst.ControlBindingClass // out
	_v = (*gst.ControlBindingClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
