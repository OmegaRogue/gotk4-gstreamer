// Code generated by girgen. DO NOT EDIT.

package gstcontroller

import (
	"fmt"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/controller/controller.h>
import "C"

// GType values.
var (
	GTypeInterpolationMode          = coreglib.Type(C.gst_interpolation_mode_get_type())
	GTypeInterpolationControlSource = coreglib.Type(C.gst_interpolation_control_source_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInterpolationMode, F: marshalInterpolationMode},
		coreglib.TypeMarshaler{T: GTypeInterpolationControlSource, F: marshalInterpolationControlSource},
	})
}

// InterpolationMode various interpolation modes available.
type InterpolationMode C.gint

const (
	// InterpolationModeNone: steps-like interpolation, default.
	InterpolationModeNone InterpolationMode = iota
	// InterpolationModeLinear: linear interpolation.
	InterpolationModeLinear
	// InterpolationModeCubic: cubic interpolation (natural), may overshoot the
	// min or max values set by the control point, but is more 'curvy'.
	InterpolationModeCubic
	// InterpolationModeCubicMonotonic: monotonic cubic interpolation, will not
	// produce any values outside of the min-max range set by the control points
	// (Since: 1.8).
	InterpolationModeCubicMonotonic
)

func marshalInterpolationMode(p uintptr) (interface{}, error) {
	return InterpolationMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for InterpolationMode.
func (i InterpolationMode) String() string {
	switch i {
	case InterpolationModeNone:
		return "None"
	case InterpolationModeLinear:
		return "Linear"
	case InterpolationModeCubic:
		return "Cubic"
	case InterpolationModeCubicMonotonic:
		return "CubicMonotonic"
	default:
		return fmt.Sprintf("InterpolationMode(%d)", i)
	}
}

// InterpolationControlSourceOverrides contains methods that are overridable.
type InterpolationControlSourceOverrides struct {
}

func defaultInterpolationControlSourceOverrides(v *InterpolationControlSource) InterpolationControlSourceOverrides {
	return InterpolationControlSourceOverrides{}
}

// InterpolationControlSource is a ControlSource, that interpolates values
// between user-given control points. It supports several interpolation modes
// and property types.
//
// To use InterpolationControlSource get a new instance by calling
// gst_interpolation_control_source_new(), bind it to a Spec and set some
// control points by calling gst_timed_value_control_source_set().
//
// All functions are MT-safe.
type InterpolationControlSource struct {
	_ [0]func() // equal guard
	TimedValueControlSource
}

var (
	_ TimedValueControlSourcer = (*InterpolationControlSource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*InterpolationControlSource, *InterpolationControlSourceClass, InterpolationControlSourceOverrides](
		GTypeInterpolationControlSource,
		initInterpolationControlSourceClass,
		wrapInterpolationControlSource,
		defaultInterpolationControlSourceOverrides,
	)
}

func initInterpolationControlSourceClass(gclass unsafe.Pointer, overrides InterpolationControlSourceOverrides, classInitFunc func(*InterpolationControlSourceClass)) {
	if classInitFunc != nil {
		class := (*InterpolationControlSourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInterpolationControlSource(obj *coreglib.Object) *InterpolationControlSource {
	return &InterpolationControlSource{
		TimedValueControlSource: TimedValueControlSource{
			ControlSource: gst.ControlSource{
				GstObject: gst.GstObject{
					InitiallyUnowned: coreglib.InitiallyUnowned{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalInterpolationControlSource(p uintptr) (interface{}, error) {
	return wrapInterpolationControlSource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewInterpolationControlSource: this returns a new, unbound
// InterpolationControlSource.
//
// The function returns the following values:
//
//    - interpolationControlSource: new, unbound InterpolationControlSource.
//
func NewInterpolationControlSource() *InterpolationControlSource {
	var _cret *C.GstControlSource // in

	_cret = C.gst_interpolation_control_source_new()

	var _interpolationControlSource *InterpolationControlSource // out

	_interpolationControlSource = wrapInterpolationControlSource(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _interpolationControlSource
}

// InterpolationControlSourceClass: instance of this type is always passed by
// reference.
type InterpolationControlSourceClass struct {
	*interpolationControlSourceClass
}

// interpolationControlSourceClass is the struct that's finalized.
type interpolationControlSourceClass struct {
	native *C.GstInterpolationControlSourceClass
}

func (i *InterpolationControlSourceClass) ParentClass() *TimedValueControlSourceClass {
	valptr := &i.native.parent_class
	var _v *TimedValueControlSourceClass // out
	_v = (*TimedValueControlSourceClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
