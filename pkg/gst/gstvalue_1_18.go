// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// ValueArrayInit initializes and pre-allocates a #GValue of type T_TYPE_ARRAY.
//
// The function takes the following parameters:
//
//    - value: zero-filled (uninitialized) #GValue structure.
//    - prealloc: number of entries to pre-allocate in the array.
//
// The function returns the following values:
//
//    - ret structure that has been passed in.
//
func ValueArrayInit(value *coreglib.Value, prealloc uint) *coreglib.Value {
	var _arg1 *C.GValue // out
	var _arg2 C.guint   // out
	var _cret *C.GValue // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))
	_arg2 = C.guint(prealloc)

	_cret = C.gst_value_array_init(_arg1, _arg2)
	runtime.KeepAlive(value)
	runtime.KeepAlive(prealloc)

	var _ret *coreglib.Value // out

	_ret = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _ret
}

// ValueListInit initializes and pre-allocates a #GValue of type T_TYPE_LIST.
//
// The function takes the following parameters:
//
//    - value: zero-filled (uninitialized) #GValue structure.
//    - prealloc: number of entries to pre-allocate in the list.
//
// The function returns the following values:
//
//    - ret structure that has been passed in.
//
func ValueListInit(value *coreglib.Value, prealloc uint) *coreglib.Value {
	var _arg1 *C.GValue // out
	var _arg2 C.guint   // out
	var _cret *C.GValue // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))
	_arg2 = C.guint(prealloc)

	_cret = C.gst_value_list_init(_arg1, _arg2)
	runtime.KeepAlive(value)
	runtime.KeepAlive(prealloc)

	var _ret *coreglib.Value // out

	_ret = coreglib.ValueFromNative(unsafe.Pointer(_cret))

	return _ret
}
