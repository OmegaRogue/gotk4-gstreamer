// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// ParentBufferMeta is a Meta which can be attached to a Buffer to hold a
// reference to another buffer that is only released when the child Buffer is
// released.
//
// Typically, ParentBufferMeta is used when the child buffer is directly using
// the Memory of the parent buffer, and wants to prevent the parent buffer from
// being returned to a buffer pool until the Memory is available for re-use.
//
// An instance of this type is always passed by reference.
type ParentBufferMeta struct {
	*parentBufferMeta
}

// parentBufferMeta is the struct that's finalized.
type parentBufferMeta struct {
	native *C.GstParentBufferMeta
}

// Parent: parent Meta structure.
func (p *ParentBufferMeta) Parent() *Meta {
	valptr := &p.native.parent
	var _v *Meta // out
	_v = (*Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Buffer on which a reference is being held.
func (p *ParentBufferMeta) Buffer() *Buffer {
	valptr := &p.native.buffer
	var _v *Buffer // out
	_v = (*Buffer)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// ParentBufferMetaGetInfo gets the global MetaInfo describing the
// ParentBufferMeta meta.
//
// The function returns the following values:
//
//    - metaInfo: MetaInfo.
//
func ParentBufferMetaGetInfo() *MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_parent_buffer_meta_get_info()

	var _metaInfo *MetaInfo // out

	_metaInfo = (*MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
