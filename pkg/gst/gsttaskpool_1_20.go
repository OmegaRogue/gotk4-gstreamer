// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeSharedTaskPool = coreglib.Type(C.gst_shared_task_pool_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSharedTaskPool, F: marshalSharedTaskPool},
	})
}

// SharedTaskPoolOverrides contains methods that are overridable.
type SharedTaskPoolOverrides struct {
}

func defaultSharedTaskPoolOverrides(v *SharedTaskPool) SharedTaskPoolOverrides {
	return SharedTaskPoolOverrides{}
}

// SharedTaskPool object.
type SharedTaskPool struct {
	_ [0]func() // equal guard
	TaskPool
}

var (
	_ GstObjector = (*SharedTaskPool)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SharedTaskPool, *SharedTaskPoolClass, SharedTaskPoolOverrides](
		GTypeSharedTaskPool,
		initSharedTaskPoolClass,
		wrapSharedTaskPool,
		defaultSharedTaskPoolOverrides,
	)
}

func initSharedTaskPoolClass(gclass unsafe.Pointer, overrides SharedTaskPoolOverrides, classInitFunc func(*SharedTaskPoolClass)) {
	if classInitFunc != nil {
		class := (*SharedTaskPoolClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSharedTaskPool(obj *coreglib.Object) *SharedTaskPool {
	return &SharedTaskPool{
		TaskPool: TaskPool{
			GstObject: GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalSharedTaskPool(p uintptr) (interface{}, error) {
	return wrapSharedTaskPool(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSharedTaskPool: create a new shared task pool. The shared task pool will
// queue tasks on a maximum number of threads, 1 by default.
//
// Do not use a SharedTaskPool to manage potentially inter-dependent tasks such
// as pad tasks, as having one task waiting on another to return before
// returning would cause obvious deadlocks if they happen to share the same
// thread.
//
// The function returns the following values:
//
//    - sharedTaskPool: new SharedTaskPool. gst_object_unref() after usage.
//
func NewSharedTaskPool() *SharedTaskPool {
	var _cret *C.GstTaskPool // in

	_cret = C.gst_shared_task_pool_new()

	var _sharedTaskPool *SharedTaskPool // out

	_sharedTaskPool = wrapSharedTaskPool(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _sharedTaskPool
}

// The function returns the following values:
//
//    - guint: maximum number of threads pool is configured to spawn.
//
func (pool *SharedTaskPool) MaxThreads() uint {
	var _arg0 *C.GstSharedTaskPool // out
	var _cret C.guint              // in

	_arg0 = (*C.GstSharedTaskPool)(unsafe.Pointer(coreglib.InternObject(pool).Native()))

	_cret = C.gst_shared_task_pool_get_max_threads(_arg0)
	runtime.KeepAlive(pool)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SetMaxThreads: update the maximal number of threads the pool may spawn. When
// the maximal number of threads is reduced, existing threads are not
// immediately shut down, see g_thread_pool_set_max_threads().
//
// Setting max_threads to 0 effectively freezes the pool.
//
// The function takes the following parameters:
//
//    - maxThreads: maximum number of threads to spawn.
//
func (pool *SharedTaskPool) SetMaxThreads(maxThreads uint) {
	var _arg0 *C.GstSharedTaskPool // out
	var _arg1 C.guint              // out

	_arg0 = (*C.GstSharedTaskPool)(unsafe.Pointer(coreglib.InternObject(pool).Native()))
	_arg1 = C.guint(maxThreads)

	C.gst_shared_task_pool_set_max_threads(_arg0, _arg1)
	runtime.KeepAlive(pool)
	runtime.KeepAlive(maxThreads)
}

// SharedTaskPoolClass object.
//
// An instance of this type is always passed by reference.
type SharedTaskPoolClass struct {
	*sharedTaskPoolClass
}

// sharedTaskPoolClass is the struct that's finalized.
type sharedTaskPoolClass struct {
	native *C.GstSharedTaskPoolClass
}

func (s *SharedTaskPoolClass) ParentClass() *TaskPoolClass {
	valptr := &s.native.parent_class
	var _v *TaskPoolClass // out
	_v = (*TaskPoolClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
