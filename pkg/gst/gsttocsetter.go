// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeTocSetter = coreglib.Type(C.gst_toc_setter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTocSetter, F: marshalTocSetter},
	})
}

// TocSetterOverrider contains methods that are overridable.
type TocSetterOverrider interface {
}

// TocSetter: element interface that allows setting of the TOC.
//
// Elements that support some kind of chapters or editions (or tracks like in
// the FLAC cue sheet) will implement this interface.
//
// If you just want to retrieve the TOC in your application then all you need to
// do is watch for TOC messages on your pipeline's bus (or you can perform TOC
// query). This interface is only for setting TOC data, not for extracting it.
// To set TOC from the application, find proper tocsetter element and set TOC
// using gst_toc_setter_set_toc().
//
// Elements implementing the TocSetter interface can extend existing TOC by
// getting extend UID for that (you can use gst_toc_find_entry() to retrieve it)
// with any TOC entries received from downstream.
//
// TocSetter wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TocSetter struct {
	_ [0]func() // equal guard
	Element
}

var (
	_ Elementer = (*TocSetter)(nil)
)

// TocSetterer describes TocSetter's interface methods.
type TocSetterer interface {
	coreglib.Objector

	// Toc: return current TOC the setter uses.
	Toc() *Toc
	// Reset the internal TOC.
	Reset()
	// SetToc: set the given TOC on the setter.
	SetToc(toc *Toc)
}

var _ TocSetterer = (*TocSetter)(nil)

func ifaceInitTocSetterer(gifacePtr, data C.gpointer) {
}

func wrapTocSetter(obj *coreglib.Object) *TocSetter {
	return &TocSetter{
		Element: Element{
			GstObject: GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalTocSetter(p uintptr) (interface{}, error) {
	return wrapTocSetter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Toc: return current TOC the setter uses. The TOC should not be modified
// without making it writable first.
//
// The function returns the following values:
//
//    - toc (optional): TOC set, or NULL. Unref with gst_toc_unref() when no
//      longer needed.
//
func (setter *TocSetter) Toc() *Toc {
	var _arg0 *C.GstTocSetter // out
	var _cret *C.GstToc       // in

	_arg0 = (*C.GstTocSetter)(unsafe.Pointer(coreglib.InternObject(setter).Native()))

	_cret = C.gst_toc_setter_get_toc(_arg0)
	runtime.KeepAlive(setter)

	var _toc *Toc // out

	if _cret != nil {
		_toc = (*Toc)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_toc)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.free(intern.C)
			},
		)
	}

	return _toc
}

// Reset the internal TOC. Elements should call this from within the
// state-change handler.
func (setter *TocSetter) Reset() {
	var _arg0 *C.GstTocSetter // out

	_arg0 = (*C.GstTocSetter)(unsafe.Pointer(coreglib.InternObject(setter).Native()))

	C.gst_toc_setter_reset(_arg0)
	runtime.KeepAlive(setter)
}

// SetToc: set the given TOC on the setter. Previously set TOC will be unreffed
// before setting a new one.
//
// The function takes the following parameters:
//
//    - toc (optional) to set.
//
func (setter *TocSetter) SetToc(toc *Toc) {
	var _arg0 *C.GstTocSetter // out
	var _arg1 *C.GstToc       // out

	_arg0 = (*C.GstTocSetter)(unsafe.Pointer(coreglib.InternObject(setter).Native()))
	if toc != nil {
		_arg1 = (*C.GstToc)(gextras.StructNative(unsafe.Pointer(toc)))
	}

	C.gst_toc_setter_set_toc(_arg0, _arg1)
	runtime.KeepAlive(setter)
	runtime.KeepAlive(toc)
}

// TocSetterInterface interface.
//
// An instance of this type is always passed by reference.
type TocSetterInterface struct {
	*tocSetterInterface
}

// tocSetterInterface is the struct that's finalized.
type tocSetterInterface struct {
	native *C.GstTocSetterInterface
}
