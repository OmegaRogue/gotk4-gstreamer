// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// ValueArrayAppendAndTakeValue appends append_value to the GstValueArray in
// value.
//
// The function takes the following parameters:
//
//    - value of type T_TYPE_ARRAY.
//    - appendValue: value to append.
//
func ValueArrayAppendAndTakeValue(value, appendValue *coreglib.Value) {
	var _arg1 *C.GValue // out
	var _arg2 *C.GValue // out

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(appendValue.Native()))

	C.gst_value_array_append_and_take_value(_arg1, _arg2)
	runtime.KeepAlive(value)
	runtime.KeepAlive(appendValue)
}

// ValueListAppendAndTakeValue appends append_value to the GstValueList in
// value.
//
// The function takes the following parameters:
//
//    - value of type T_TYPE_LIST.
//    - appendValue: value to append.
//
func ValueListAppendAndTakeValue(value, appendValue *coreglib.Value) {
	var _arg1 *C.GValue // out
	var _arg2 *C.GValue // out

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))
	_arg2 = (*C.GValue)(unsafe.Pointer(appendValue.Native()))

	C.gst_value_list_append_and_take_value(_arg1, _arg2)
	runtime.KeepAlive(value)
	runtime.KeepAlive(appendValue)
}
