// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// DebugLogLiteral logs the given message using the currently registered
// debugging handlers.
//
// The function takes the following parameters:
//
//    - category to log.
//    - level of the message is in.
//    - file that emitted the message, usually the __FILE__ identifier.
//    - function that emitted the message.
//    - line from that the message was emitted, usually __LINE__.
//    - object (optional) this message relates to, or NULL if none.
//    - messageString: message string.
//
func DebugLogLiteral(category *DebugCategory, level DebugLevel, file, function string, line int, object *coreglib.Object, messageString string) {
	var _arg1 *C.GstDebugCategory // out
	var _arg2 C.GstDebugLevel     // out
	var _arg3 *C.gchar            // out
	var _arg4 *C.gchar            // out
	var _arg5 C.gint              // out
	var _arg6 *C.GObject          // out
	var _arg7 *C.gchar            // out

	_arg1 = (*C.GstDebugCategory)(gextras.StructNative(unsafe.Pointer(category)))
	_arg2 = C.GstDebugLevel(level)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(file)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(function)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = C.gint(line)
	if object != nil {
		_arg6 = (*C.GObject)(unsafe.Pointer(object.Native()))
	}
	_arg7 = (*C.gchar)(unsafe.Pointer(C.CString(messageString)))
	defer C.free(unsafe.Pointer(_arg7))

	C.gst_debug_log_literal(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(category)
	runtime.KeepAlive(level)
	runtime.KeepAlive(file)
	runtime.KeepAlive(function)
	runtime.KeepAlive(line)
	runtime.KeepAlive(object)
	runtime.KeepAlive(messageString)
}
