// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeTocLoopType = coreglib.Type(C.gst_toc_loop_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTocLoopType, F: marshalTocLoopType},
	})
}

// TOC_REPEAT_COUNT_INFINITE: special value for the repeat_count set in
// gst_toc_entry_set_loop() or returned by gst_toc_entry_set_loop() to indicate
// infinite looping.
const TOC_REPEAT_COUNT_INFINITE = -1

// TocLoopType: how a TocEntry should be repeated. By default, entries are
// played a single time.
type TocLoopType C.gint

const (
	// TocLoopNone: single forward playback.
	TocLoopNone TocLoopType = iota
	// TocLoopForward: repeat forward.
	TocLoopForward
	// TocLoopReverse: repeat backward.
	TocLoopReverse
	// TocLoopPingPong: repeat forward and backward.
	TocLoopPingPong
)

func marshalTocLoopType(p uintptr) (interface{}, error) {
	return TocLoopType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TocLoopType.
func (t TocLoopType) String() string {
	switch t {
	case TocLoopNone:
		return "None"
	case TocLoopForward:
		return "Forward"
	case TocLoopReverse:
		return "Reverse"
	case TocLoopPingPong:
		return "PingPong"
	default:
		return fmt.Sprintf("TocLoopType(%d)", t)
	}
}
