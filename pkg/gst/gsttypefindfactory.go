// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeTypeFindFactory = coreglib.Type(C.gst_type_find_factory_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTypeFindFactory, F: marshalTypeFindFactory},
	})
}

// TypeFindFactory: these functions allow querying information about registered
// typefind functions. How to create and register these functions is described
// in the section <link linkend="gstreamer-Writing-typefind-functions"> "Writing
// typefind functions"</link>.
//
// The following example shows how to write a very simple typefinder that
// identifies the given data. You can get quite a bit more complicated than that
// though.
//
//    typedef struct {
//      guint8 *data;
//      guint size;
//      guint probability;
//      GstCaps *data;
//    } MyTypeFind;
//    static void
//    my_peek (gpointer data, gint64 offset, guint size)
//    {
//      MyTypeFind *find = (MyTypeFind *) data;
//      if (offset >= 0 && offset + size <= find->size) {
//        return find->data + offset;
//      }
//      return NULL;
//    }
//    static void
//    my_suggest (gpointer data, guint probability, GstCaps *caps)
//    {
//      MyTypeFind *find = (MyTypeFind *) data;
//      if (probability > find->probability) {
//        find->probability = probability;
//        gst_caps_replace (&find->caps, caps);
//      }
//    }
//    static GstCaps *
//    find_type (guint8 *data, guint size)
//    {
//      GList *walk, *type_list;
//      MyTypeFind find = {data, size, 0, NULL};
//      GstTypeFind gst_find = {my_peek, my_suggest, &find, };
//      walk = type_list = gst_type_find_factory_get_list ();
//      while (walk) {
//        GstTypeFindFactory *factory = GST_TYPE_FIND_FACTORY (walk->data);
//        walk = g_list_next (walk)
//        gst_type_find_factory_call_function (factory, &gst_find);
//      }
//      g_list_free (type_list);
//      return find.caps;
//    };.
type TypeFindFactory struct {
	_ [0]func() // equal guard
	PluginFeature
}

var (
	_ PluginFeaturer = (*TypeFindFactory)(nil)
)

func wrapTypeFindFactory(obj *coreglib.Object) *TypeFindFactory {
	return &TypeFindFactory{
		PluginFeature: PluginFeature{
			GstObject: GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalTypeFindFactory(p uintptr) (interface{}, error) {
	return wrapTypeFindFactory(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CallFunction calls the TypeFindFunction associated with this factory.
//
// The function takes the following parameters:
//
//    - find: properly setup TypeFind entry. The get_data and suggest_type
//      members must be set.
//
func (factory *TypeFindFactory) CallFunction(find *TypeFind) {
	var _arg0 *C.GstTypeFindFactory // out
	var _arg1 *C.GstTypeFind        // out

	_arg0 = (*C.GstTypeFindFactory)(unsafe.Pointer(coreglib.InternObject(factory).Native()))
	_arg1 = (*C.GstTypeFind)(gextras.StructNative(unsafe.Pointer(find)))

	C.gst_type_find_factory_call_function(_arg0, _arg1)
	runtime.KeepAlive(factory)
	runtime.KeepAlive(find)
}

// Caps gets the Caps associated with a typefind factory.
//
// The function returns the following values:
//
//    - caps (optional) associated with this factory.
//
func (factory *TypeFindFactory) Caps() *Caps {
	var _arg0 *C.GstTypeFindFactory // out
	var _cret *C.GstCaps            // in

	_arg0 = (*C.GstTypeFindFactory)(unsafe.Pointer(coreglib.InternObject(factory).Native()))

	_cret = C.gst_type_find_factory_get_caps(_arg0)
	runtime.KeepAlive(factory)

	var _caps *Caps // out

	if _cret != nil {
		_caps = (*Caps)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _caps
}

// Extensions gets the extensions associated with a TypeFindFactory. The
// returned array should not be changed. If you need to change stuff in it, you
// should copy it using g_strdupv(). This function may return NULL to indicate a
// 0-length list.
//
// The function returns the following values:
//
//    - utf8s (optional): a NULL-terminated array of extensions associated with
//      this factory.
//
func (factory *TypeFindFactory) Extensions() []string {
	var _arg0 *C.GstTypeFindFactory // out
	var _cret **C.gchar             // in

	_arg0 = (*C.GstTypeFindFactory)(unsafe.Pointer(coreglib.InternObject(factory).Native()))

	_cret = C.gst_type_find_factory_get_extensions(_arg0)
	runtime.KeepAlive(factory)

	var _utf8s []string // out

	if _cret != nil {
		{
			var i int
			var z *C.gchar
			for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
				i++
			}

			src := unsafe.Slice(_cret, i)
			_utf8s = make([]string, i)
			for i := range src {
				_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			}
		}
	}

	return _utf8s
}

// HasFunction: check whether the factory has a typefind function. Typefind
// factories without typefind functions are a last-effort fallback mechanism to
// e.g. assume a certain media type based on the file extension.
//
// The function returns the following values:
//
//    - ok: TRUE if the factory has a typefind functions set, otherwise FALSE.
//
func (factory *TypeFindFactory) HasFunction() bool {
	var _arg0 *C.GstTypeFindFactory // out
	var _cret C.gboolean            // in

	_arg0 = (*C.GstTypeFindFactory)(unsafe.Pointer(coreglib.InternObject(factory).Native()))

	_cret = C.gst_type_find_factory_has_function(_arg0)
	runtime.KeepAlive(factory)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TypeFindFactoryGetList gets the list of all registered typefind factories.
// You must free the list using gst_plugin_feature_list_free().
//
// The returned factories are sorted by highest rank first, and then by factory
// name.
//
// Free-function: gst_plugin_feature_list_free.
//
// The function returns the following values:
//
//    - list of all registered TypeFindFactory.
//
func TypeFindFactoryGetList() []*TypeFindFactory {
	var _cret *C.GList // in

	_cret = C.gst_type_find_factory_get_list()

	var _list []*TypeFindFactory // out

	_list = make([]*TypeFindFactory, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstTypeFindFactory)(v)
		var dst *TypeFindFactory // out
		dst = wrapTypeFindFactory(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}
