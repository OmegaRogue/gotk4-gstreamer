// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// PROTECTION_SYSTEM_ID_CAPS_FIELD: field name in a GstCaps that is used to
// signal the UUID of the protection system.
const PROTECTION_SYSTEM_ID_CAPS_FIELD = "protection-system"

// ProtectionSelectSystem iterates the supplied list of UUIDs and checks the
// GstRegistry for an element that supports one of the supplied UUIDs. If more
// than one element matches, the system ID of the highest ranked element is
// selected.
//
// The function takes the following parameters:
//
//    - systemIdentifiers: null terminated array of strings that contains the
//      UUID values of each protection system that is to be checked.
//
// The function returns the following values:
//
//    - utf8 (optional): one of the strings from system_identifiers that
//      indicates the highest ranked element that implements the protection
//      system indicated by that system ID, or NULL if no element has been found.
//
func ProtectionSelectSystem(systemIdentifiers []string) string {
	var _arg1 **C.gchar // out
	var _cret *C.gchar  // in

	{
		_arg1 = (**C.gchar)(C.calloc(C.size_t((len(systemIdentifiers) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg1))
		{
			out := unsafe.Slice(_arg1, len(systemIdentifiers)+1)
			var zero *C.gchar
			out[len(systemIdentifiers)] = zero
			for i := range systemIdentifiers {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(systemIdentifiers[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	_cret = C.gst_protection_select_system(_arg1)
	runtime.KeepAlive(systemIdentifiers)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// ProtectionMeta: metadata type that holds information about a sample from a
// protection-protected track, including the information needed to decrypt it
// (if it is encrypted).
//
// An instance of this type is always passed by reference.
type ProtectionMeta struct {
	*protectionMeta
}

// protectionMeta is the struct that's finalized.
type protectionMeta struct {
	native *C.GstProtectionMeta
}

// Meta: parent Meta.
func (p *ProtectionMeta) Meta() *Meta {
	valptr := &p.native.meta
	var _v *Meta // out
	_v = (*Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Info: cryptographic information needed to decrypt the sample.
func (p *ProtectionMeta) Info() *Structure {
	valptr := &p.native.info
	var _v *Structure // out
	_v = (*Structure)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}
