// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_ClockCallback
func _gotk4_gst1_ClockCallback(arg1 *C.GstClock, arg2 C.GstClockTime, arg3 C.GstClockID, arg4 C.gpointer) (cret C.gboolean) {
	var fn ClockCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ClockCallback)
	}

	var _clock Clocker  // out
	var _time ClockTime // out
	var _id ClockID     // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.Clocker is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Clocker)
			return ok
		})
		rv, ok := casted.(Clocker)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Clocker")
		}
		_clock = rv
	}
	_time = uint64(arg2)
	type _ = ClockTime
	type _ = uint64
	_id = (unsafe.Pointer)(unsafe.Pointer(arg3))
	type _ = ClockID
	type _ = unsafe.Pointer

	ok := fn(_clock, _time, _id)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_Clock_ConnectSynced
func _gotk4_gst1_Clock_ConnectSynced(arg0 C.gpointer, arg1 C.gboolean, arg2 C.guintptr) {
	var f func(synced bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(synced bool))
	}

	var _synced bool // out

	if arg1 != 0 {
		_synced = true
	}

	f(_synced)
}
