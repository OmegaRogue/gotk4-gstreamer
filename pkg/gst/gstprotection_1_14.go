// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// ProtectionFilterSystemsByAvailableDecryptors iterates the supplied list of
// UUIDs and checks the GstRegistry for all the decryptors supporting one of the
// supplied UUIDs.
//
// The function takes the following parameters:
//
//    - systemIdentifiers: A null terminated array of strings that contains the
//      UUID values of each protection system that is to be checked.
//
// The function returns the following values:
//
//    - utf8s (optional): A null terminated array containing all the
//      system_identifiers supported by the set of available decryptors, or NULL
//      if no matches were found.
//
func ProtectionFilterSystemsByAvailableDecryptors(systemIdentifiers []string) []string {
	var _arg1 **C.gchar // out
	var _cret **C.gchar // in

	{
		_arg1 = (**C.gchar)(C.calloc(C.size_t((len(systemIdentifiers) + 1)), C.size_t(unsafe.Sizeof(uint(0)))))
		defer C.free(unsafe.Pointer(_arg1))
		{
			out := unsafe.Slice(_arg1, len(systemIdentifiers)+1)
			var zero *C.gchar
			out[len(systemIdentifiers)] = zero
			for i := range systemIdentifiers {
				out[i] = (*C.gchar)(unsafe.Pointer(C.CString(systemIdentifiers[i])))
				defer C.free(unsafe.Pointer(out[i]))
			}
		}
	}

	_cret = C.gst_protection_filter_systems_by_available_decryptors(_arg1)
	runtime.KeepAlive(systemIdentifiers)

	var _utf8s []string // out

	if _cret != nil {
		defer C.free(unsafe.Pointer(_cret))
		{
			var i int
			var z *C.gchar
			for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
				i++
			}

			src := unsafe.Slice(_cret, i)
			_utf8s = make([]string, i)
			for i := range src {
				_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
				defer C.free(unsafe.Pointer(src[i]))
			}
		}
	}

	return _utf8s
}
