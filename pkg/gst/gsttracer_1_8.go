// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeTracer = coreglib.Type(C.gst_tracer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTracer, F: marshalTracer},
	})
}

// TracerOverrides contains methods that are overridable.
type TracerOverrides struct {
}

func defaultTracerOverrides(v *Tracer) TracerOverrides {
	return TracerOverrides{}
}

// Tracer: tracing modules will subclass Tracer and register through
// gst_tracer_register(). Modules can attach to various hook-types - see
// gst_tracing_register_hook(). When invoked they receive hook specific
// contextual data, which they must not modify.
type Tracer struct {
	_ [0]func() // equal guard
	GstObject
}

var (
	_ GstObjector = (*Tracer)(nil)
)

// Tracerer describes types inherited from class Tracer.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Tracerer interface {
	coreglib.Objector
	baseTracer() *Tracer
}

var _ Tracerer = (*Tracer)(nil)

func init() {
	coreglib.RegisterClassInfo[*Tracer, *TracerClass, TracerOverrides](
		GTypeTracer,
		initTracerClass,
		wrapTracer,
		defaultTracerOverrides,
	)
}

func initTracerClass(gclass unsafe.Pointer, overrides TracerOverrides, classInitFunc func(*TracerClass)) {
	if classInitFunc != nil {
		class := (*TracerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTracer(obj *coreglib.Object) *Tracer {
	return &Tracer{
		GstObject: GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalTracer(p uintptr) (interface{}, error) {
	return wrapTracer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *Tracer) baseTracer() *Tracer {
	return v
}

// BaseTracer returns the underlying base object.
func BaseTracer(obj Tracerer) *Tracer {
	return obj.baseTracer()
}
