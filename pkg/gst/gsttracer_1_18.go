// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// TracingGetActiveTracers: get a list of all active tracer objects owned by the
// tracing framework for the entirety of the run-time of the process or till
// gst_deinit() is called.
//
// The function returns the following values:
//
//    - list of Tracer objects.
//
func TracingGetActiveTracers() []Tracerer {
	var _cret *C.GList // in

	_cret = C.gst_tracing_get_active_tracers()

	var _list []Tracerer // out

	_list = make([]Tracerer, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstTracer)(v)
		var dst Tracerer // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gst.Tracerer is nil")
			}

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Tracerer)
				return ok
			})
			rv, ok := casted.(Tracerer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Tracerer")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}
