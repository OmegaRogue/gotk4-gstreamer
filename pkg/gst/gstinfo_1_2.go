// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// DebugGetColorMode changes the coloring mode for debug output.
//
// The function returns the following values:
//
//    - debugColorMode: see GstDebugColorMode for possible values.
//
func DebugGetColorMode() DebugColorMode {
	var _cret C.GstDebugColorMode // in

	_cret = C.gst_debug_get_color_mode()

	var _debugColorMode DebugColorMode // out

	_debugColorMode = DebugColorMode(_cret)

	return _debugColorMode
}

// DebugSetColorMode changes the coloring mode for debug output.
//
// This function may be called before gst_init().
//
// The function takes the following parameters:
//
//    - mode: coloring mode for debug output. See GstDebugColorMode.
//
func DebugSetColorMode(mode DebugColorMode) {
	var _arg1 C.GstDebugColorMode // out

	_arg1 = C.GstDebugColorMode(mode)

	C.gst_debug_set_color_mode(_arg1)
	runtime.KeepAlive(mode)
}

// DebugSetColorModeFromString changes the coloring mode for debug output.
//
// This function may be called before gst_init().
//
// The function takes the following parameters:
//
//    - mode: coloring mode for debug output. One of the following: "on", "auto",
//      "off", "disable", "unix".
//
func DebugSetColorModeFromString(mode string) {
	var _arg1 *C.gchar // out

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(mode)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gst_debug_set_color_mode_from_string(_arg1)
	runtime.KeepAlive(mode)
}

// DebugSetThresholdFromString sets the debug logging wanted in the same form as
// with the GST_DEBUG environment variable. You can use wildcards such as '*',
// but note that the order matters when you use wild cards, e.g.
// "foosrc:6,*src:3,*:2" sets everything to log level 2.
//
// The function takes the following parameters:
//
//    - list: comma-separated list of "category:level" pairs to be used as debug
//      logging levels.
//    - reset: TRUE to clear all previously-set debug levels before setting new
//      thresholds FALSE if adding the threshold described by list to the one
//      already set.
//
func DebugSetThresholdFromString(list string, reset bool) {
	var _arg1 *C.gchar   // out
	var _arg2 C.gboolean // out

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(list)))
	defer C.free(unsafe.Pointer(_arg1))
	if reset {
		_arg2 = C.TRUE
	}

	C.gst_debug_set_threshold_from_string(_arg1, _arg2)
	runtime.KeepAlive(list)
	runtime.KeepAlive(reset)
}
