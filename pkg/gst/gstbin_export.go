// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_Bin_ConnectDeepElementAdded
func _gotk4_gst1_Bin_ConnectDeepElementAdded(arg0 C.gpointer, arg1 *C.GstBin, arg2 *C.GstElement, arg3 C.guintptr) {
	var f func(subBin *Bin, element Elementer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(subBin *Bin, element Elementer))
	}

	var _subBin *Bin       // out
	var _element Elementer // out

	_subBin = wrapBin(coreglib.Take(unsafe.Pointer(arg1)))
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gst.Elementer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Elementer)
			return ok
		})
		rv, ok := casted.(Elementer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Elementer")
		}
		_element = rv
	}

	f(_subBin, _element)
}

//export _gotk4_gst1_Bin_ConnectDeepElementRemoved
func _gotk4_gst1_Bin_ConnectDeepElementRemoved(arg0 C.gpointer, arg1 *C.GstBin, arg2 *C.GstElement, arg3 C.guintptr) {
	var f func(subBin *Bin, element Elementer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(subBin *Bin, element Elementer))
	}

	var _subBin *Bin       // out
	var _element Elementer // out

	_subBin = wrapBin(coreglib.Take(unsafe.Pointer(arg1)))
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gst.Elementer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Elementer)
			return ok
		})
		rv, ok := casted.(Elementer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Elementer")
		}
		_element = rv
	}

	f(_subBin, _element)
}

//export _gotk4_gst1_Bin_ConnectDoLatency
func _gotk4_gst1_Bin_ConnectDoLatency(arg0 C.gpointer, arg1 C.guintptr) (cret C.gboolean) {
	var f func() (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func() (ok bool))
	}

	ok := f()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_Bin_ConnectElementAdded
func _gotk4_gst1_Bin_ConnectElementAdded(arg0 C.gpointer, arg1 *C.GstElement, arg2 C.guintptr) {
	var f func(element Elementer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(element Elementer))
	}

	var _element Elementer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.Elementer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Elementer)
			return ok
		})
		rv, ok := casted.(Elementer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Elementer")
		}
		_element = rv
	}

	f(_element)
}

//export _gotk4_gst1_Bin_ConnectElementRemoved
func _gotk4_gst1_Bin_ConnectElementRemoved(arg0 C.gpointer, arg1 *C.GstElement, arg2 C.guintptr) {
	var f func(element Elementer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(element Elementer))
	}

	var _element Elementer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.Elementer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Elementer)
			return ok
		})
		rv, ok := casted.(Elementer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Elementer")
		}
		_element = rv
	}

	f(_element)
}
