// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_PluginFeatureFilter
func _gotk4_gst1_PluginFeatureFilter(arg1 *C.GstPluginFeature, arg2 C.gpointer) (cret C.gboolean) {
	var fn PluginFeatureFilter
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PluginFeatureFilter)
	}

	var _feature PluginFeaturer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.PluginFeaturer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(PluginFeaturer)
			return ok
		})
		rv, ok := casted.(PluginFeaturer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.PluginFeaturer")
		}
		_feature = rv
	}

	ok := fn(_feature)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
