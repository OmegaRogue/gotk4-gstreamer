// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_IteratorFoldFunction
func _gotk4_gst1_IteratorFoldFunction(arg1 *C.GValue, arg2 *C.GValue, arg3 C.gpointer) (cret C.gboolean) {
	var fn IteratorFoldFunction
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(IteratorFoldFunction)
	}

	var _item *coreglib.Value // out
	var _ret *coreglib.Value  // out

	_item = coreglib.ValueFromNative(unsafe.Pointer(arg1))
	_ret = coreglib.ValueFromNative(unsafe.Pointer(arg2))

	ok := fn(_item, _ret)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_IteratorForEachFunction
func _gotk4_gst1_IteratorForEachFunction(arg1 *C.GValue, arg2 C.gpointer) {
	var fn IteratorForEachFunction
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(IteratorForEachFunction)
	}

	var _item *coreglib.Value // out

	_item = coreglib.ValueFromNative(unsafe.Pointer(arg1))

	fn(_item)
}
