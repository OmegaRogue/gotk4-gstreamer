// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_BusFunc
func _gotk4_gst1_BusFunc(arg1 *C.GstBus, arg2 *C.GstMessage, arg3 C.gpointer) (cret C.gboolean) {
	var fn BusFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(BusFunc)
	}

	var _bus *Bus         // out
	var _message *Message // out

	_bus = wrapBus(coreglib.Take(unsafe.Pointer(arg1)))
	_message = (*Message)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	ok := fn(_bus, _message)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_BusSyncHandler
func _gotk4_gst1_BusSyncHandler(arg1 *C.GstBus, arg2 *C.GstMessage, arg3 C.gpointer) (cret C.GstBusSyncReply) {
	var fn BusSyncHandler
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(BusSyncHandler)
	}

	var _bus *Bus         // out
	var _message *Message // out

	_bus = wrapBus(coreglib.Take(unsafe.Pointer(arg1)))
	_message = (*Message)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	busSyncReply := fn(_bus, _message)

	var _ BusSyncReply

	cret = C.GstBusSyncReply(busSyncReply)

	return cret
}

//export _gotk4_gst1_Bus_ConnectMessage
func _gotk4_gst1_Bus_ConnectMessage(arg0 C.gpointer, arg1 *C.GstMessage, arg2 C.guintptr) {
	var f func(message *Message)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *Message))
	}

	var _message *Message // out

	_message = (*Message)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_message)
}

//export _gotk4_gst1_Bus_ConnectSyncMessage
func _gotk4_gst1_Bus_ConnectSyncMessage(arg0 C.gpointer, arg1 *C.GstMessage, arg2 C.guintptr) {
	var f func(message *Message)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *Message))
	}

	var _message *Message // out

	_message = (*Message)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_message)
}
