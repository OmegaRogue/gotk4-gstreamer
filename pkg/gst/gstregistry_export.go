// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_Registry_ConnectFeatureAdded
func _gotk4_gst1_Registry_ConnectFeatureAdded(arg0 C.gpointer, arg1 *C.GstPluginFeature, arg2 C.guintptr) {
	var f func(feature PluginFeaturer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(feature PluginFeaturer))
	}

	var _feature PluginFeaturer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gst.PluginFeaturer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(PluginFeaturer)
			return ok
		})
		rv, ok := casted.(PluginFeaturer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.PluginFeaturer")
		}
		_feature = rv
	}

	f(_feature)
}

//export _gotk4_gst1_Registry_ConnectPluginAdded
func _gotk4_gst1_Registry_ConnectPluginAdded(arg0 C.gpointer, arg1 *C.GstPlugin, arg2 C.guintptr) {
	var f func(plugin *Plugin)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(plugin *Plugin))
	}

	var _plugin *Plugin // out

	_plugin = wrapPlugin(coreglib.Take(unsafe.Pointer(arg1)))

	f(_plugin)
}
