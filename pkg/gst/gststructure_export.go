// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_StructureFilterMapFunc
func _gotk4_gst1_StructureFilterMapFunc(arg1 C.GQuark, arg2 *C.GValue, arg3 C.gpointer) (cret C.gboolean) {
	var fn StructureFilterMapFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(StructureFilterMapFunc)
	}

	var _fieldId glib.Quark    // out
	var _value *coreglib.Value // out

	_fieldId = uint32(arg1)
	type _ = glib.Quark
	type _ = uint32
	_value = coreglib.ValueFromNative(unsafe.Pointer(arg2))

	ok := fn(_fieldId, _value)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_StructureForEachFunc
func _gotk4_gst1_StructureForEachFunc(arg1 C.GQuark, arg2 *C.GValue, arg3 C.gpointer) (cret C.gboolean) {
	var fn StructureForEachFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(StructureForEachFunc)
	}

	var _fieldId glib.Quark    // out
	var _value *coreglib.Value // out

	_fieldId = uint32(arg1)
	type _ = glib.Quark
	type _ = uint32
	_value = coreglib.ValueFromNative(unsafe.Pointer(arg2))

	ok := fn(_fieldId, _value)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_StructureMapFunc
func _gotk4_gst1_StructureMapFunc(arg1 C.GQuark, arg2 *C.GValue, arg3 C.gpointer) (cret C.gboolean) {
	var fn StructureMapFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(StructureMapFunc)
	}

	var _fieldId glib.Quark    // out
	var _value *coreglib.Value // out

	_fieldId = uint32(arg1)
	type _ = glib.Quark
	type _ = uint32
	_value = coreglib.ValueFromNative(unsafe.Pointer(arg2))

	ok := fn(_fieldId, _value)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
