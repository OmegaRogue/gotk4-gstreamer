// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_CustomMetaTransformFunction
func _gotk4_gst1_CustomMetaTransformFunction(arg1 *C.GstBuffer, arg2 *C.GstCustomMeta, arg3 *C.GstBuffer, arg4 C.GQuark, arg5 C.gpointer, arg6 C.gpointer) (cret C.gboolean) {
	var fn CustomMetaTransformFunction
	{
		v := gbox.Get(uintptr(arg6))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(CustomMetaTransformFunction)
	}

	var _transbuf *Buffer    // out
	var _meta *CustomMeta    // out
	var _buffer *Buffer      // out
	var _typ glib.Quark      // out
	var _data unsafe.Pointer // out

	_transbuf = (*Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_meta = (*CustomMeta)(gextras.NewStructNative(unsafe.Pointer(arg2)))
	_buffer = (*Buffer)(gextras.NewStructNative(unsafe.Pointer(arg3)))
	_typ = uint32(arg4)
	type _ = glib.Quark
	type _ = uint32
	_data = (unsafe.Pointer)(unsafe.Pointer(arg5))

	ok := fn(_transbuf, _meta, _buffer, _typ, _data)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
