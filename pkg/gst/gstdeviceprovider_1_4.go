// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
// extern void _gotk4_gst1_DeviceProvider_ConnectProviderUnhidden(gpointer, gchar*, guintptr);
// extern void _gotk4_gst1_DeviceProvider_ConnectProviderHidden(gpointer, gchar*, guintptr);
// extern void _gotk4_gst1_DeviceProviderClass_stop(GstDeviceProvider*);
// extern gboolean _gotk4_gst1_DeviceProviderClass_start(GstDeviceProvider*);
// gboolean _gotk4_gst1_DeviceProvider_virtual_start(void* fnptr, GstDeviceProvider* arg0) {
//   return ((gboolean (*)(GstDeviceProvider*))(fnptr))(arg0);
// };
// void _gotk4_gst1_DeviceProvider_virtual_stop(void* fnptr, GstDeviceProvider* arg0) {
//   ((void (*)(GstDeviceProvider*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeDeviceProvider = coreglib.Type(C.gst_device_provider_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDeviceProvider, F: marshalDeviceProvider},
	})
}

// DeviceProviderOverrides contains methods that are overridable.
type DeviceProviderOverrides struct {
	// Start starts providering the devices. This will cause
	// T_MESSAGE_DEVICE_ADDED and T_MESSAGE_DEVICE_REMOVED messages to be posted
	// on the provider's bus when devices are added or removed from the system.
	//
	// Since the DeviceProvider is a singleton, gst_device_provider_start() may
	// already have been called by another user of the object,
	// gst_device_provider_stop() needs to be called the same number of times.
	//
	// After this function has been called, gst_device_provider_get_devices()
	// will return the same objects that have been received from the
	// T_MESSAGE_DEVICE_ADDED messages and will no longer probe.
	//
	// The function returns the following values:
	//
	//    - ok: TRUE if the device providering could be started.
	//
	Start func() bool
	// Stop decreases the use-count by one. If the use count reaches zero, this
	// DeviceProvider will stop providering the devices. This needs to be called
	// the same number of times that gst_device_provider_start() was called.
	Stop func()
}

func defaultDeviceProviderOverrides(v *DeviceProvider) DeviceProviderOverrides {
	return DeviceProviderOverrides{
		Start: v.start,
		Stop:  v.stop,
	}
}

// DeviceProvider subclass is provided by a plugin that handles devices if there
// is a way to programmatically list connected devices. It can also optionally
// provide updates to the list of connected devices.
//
// Each DeviceProvider subclass is a singleton, a plugin should normally provide
// a single subclass for all devices.
//
// Applications would normally use a DeviceMonitor to monitor devices from all
// relevant providers.
type DeviceProvider struct {
	_ [0]func() // equal guard
	GstObject
}

var (
	_ GstObjector = (*DeviceProvider)(nil)
)

// DeviceProviderer describes types inherited from class DeviceProvider.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type DeviceProviderer interface {
	coreglib.Objector
	baseDeviceProvider() *DeviceProvider
}

var _ DeviceProviderer = (*DeviceProvider)(nil)

func init() {
	coreglib.RegisterClassInfo[*DeviceProvider, *DeviceProviderClass, DeviceProviderOverrides](
		GTypeDeviceProvider,
		initDeviceProviderClass,
		wrapDeviceProvider,
		defaultDeviceProviderOverrides,
	)
}

func initDeviceProviderClass(gclass unsafe.Pointer, overrides DeviceProviderOverrides, classInitFunc func(*DeviceProviderClass)) {
	pclass := (*C.GstDeviceProviderClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeDeviceProvider))))

	if overrides.Start != nil {
		pclass.start = (*[0]byte)(C._gotk4_gst1_DeviceProviderClass_start)
	}

	if overrides.Stop != nil {
		pclass.stop = (*[0]byte)(C._gotk4_gst1_DeviceProviderClass_stop)
	}

	if classInitFunc != nil {
		class := (*DeviceProviderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDeviceProvider(obj *coreglib.Object) *DeviceProvider {
	return &DeviceProvider{
		GstObject: GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalDeviceProvider(p uintptr) (interface{}, error) {
	return wrapDeviceProvider(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (provider *DeviceProvider) baseDeviceProvider() *DeviceProvider {
	return provider
}

// BaseDeviceProvider returns the underlying base object.
func BaseDeviceProvider(obj DeviceProviderer) *DeviceProvider {
	return obj.baseDeviceProvider()
}

func (provider *DeviceProvider) ConnectProviderHidden(f func(object string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(provider, "provider-hidden", false, unsafe.Pointer(C._gotk4_gst1_DeviceProvider_ConnectProviderHidden), f)
}

func (provider *DeviceProvider) ConnectProviderUnhidden(f func(object string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(provider, "provider-unhidden", false, unsafe.Pointer(C._gotk4_gst1_DeviceProvider_ConnectProviderUnhidden), f)
}

// The function returns the following values:
//
func (provider *DeviceProvider) CanMonitor() bool {
	var _arg0 *C.GstDeviceProvider // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_can_monitor(_arg0)
	runtime.KeepAlive(provider)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DeviceAdd posts a message on the provider's Bus to inform applications that a
// new device has been added.
//
// This is for use by subclasses.
//
// device's reference count will be incremented, and any floating reference will
// be removed (see gst_object_ref_sink()).
//
// The function takes the following parameters:
//
//    - device that has been added.
//
func (provider *DeviceProvider) DeviceAdd(device Devicer) {
	var _arg0 *C.GstDeviceProvider // out
	var _arg1 *C.GstDevice         // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GstDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))

	C.gst_device_provider_device_add(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(device)
}

// DeviceChanged: this function is used when changed_device was modified into
// its new form device. This will post a DEVICE_CHANGED message on the bus to
// let the application know that the device was modified. Device is immutable
// for MT. safety purposes so this is an "atomic" way of letting the application
// know when a device was modified.
//
// The function takes the following parameters:
//
//    - device: new version of changed_device.
//    - changedDevice: old version of the device that has been updated.
//
func (provider *DeviceProvider) DeviceChanged(device, changedDevice Devicer) {
	var _arg0 *C.GstDeviceProvider // out
	var _arg1 *C.GstDevice         // out
	var _arg2 *C.GstDevice         // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GstDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))
	_arg2 = (*C.GstDevice)(unsafe.Pointer(coreglib.InternObject(changedDevice).Native()))

	C.gst_device_provider_device_changed(_arg0, _arg1, _arg2)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(device)
	runtime.KeepAlive(changedDevice)
}

// DeviceRemove posts a message on the provider's Bus to inform applications
// that a device has been removed.
//
// This is for use by subclasses.
//
// The function takes the following parameters:
//
//    - device that has been removed.
//
func (provider *DeviceProvider) DeviceRemove(device Devicer) {
	var _arg0 *C.GstDeviceProvider // out
	var _arg1 *C.GstDevice         // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.GstDevice)(unsafe.Pointer(coreglib.InternObject(device).Native()))

	C.gst_device_provider_device_remove(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(device)
}

// Bus gets the Bus of this DeviceProvider.
//
// The function returns the following values:
//
//    - bus: Bus.
//
func (provider *DeviceProvider) Bus() *Bus {
	var _arg0 *C.GstDeviceProvider // out
	var _cret *C.GstBus            // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_get_bus(_arg0)
	runtime.KeepAlive(provider)

	var _bus *Bus // out

	_bus = wrapBus(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _bus
}

// Devices gets a list of devices that this provider understands. This may
// actually probe the hardware if the provider is not currently started.
//
// If the provider has been started, this will returned the same Device objedcts
// that have been returned by the T_MESSAGE_DEVICE_ADDED messages.
//
// The function returns the following values:
//
//    - list of Device.
//
func (provider *DeviceProvider) Devices() []Devicer {
	var _arg0 *C.GstDeviceProvider // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_get_devices(_arg0)
	runtime.KeepAlive(provider)

	var _list []Devicer // out

	_list = make([]Devicer, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDevice)(v)
		var dst Devicer // out
		{
			objptr := unsafe.Pointer(src)
			if objptr == nil {
				panic("object of type gst.Devicer is nil")
			}

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Devicer)
				return ok
			})
			rv, ok := casted.(Devicer)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Devicer")
			}
			dst = rv
		}
		_list = append(_list, dst)
	})

	return _list
}

// Factory retrieves the factory that was used to create this device provider.
//
// The function returns the following values:
//
//    - deviceProviderFactory (optional) used for creating this device provider.
//      no refcounting is needed.
//
func (provider *DeviceProvider) Factory() *DeviceProviderFactory {
	var _arg0 *C.GstDeviceProvider        // out
	var _cret *C.GstDeviceProviderFactory // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_get_factory(_arg0)
	runtime.KeepAlive(provider)

	var _deviceProviderFactory *DeviceProviderFactory // out

	if _cret != nil {
		_deviceProviderFactory = wrapDeviceProviderFactory(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _deviceProviderFactory
}

// HiddenProviders: get the provider factory names of the DeviceProvider
// instances that are hidden by provider.
//
// The function returns the following values:
//
//    - utf8s: a list of hidden providers factory names or NULL when nothing is
//      hidden by provider. Free with g_strfreev.
//
func (provider *DeviceProvider) HiddenProviders() []string {
	var _arg0 *C.GstDeviceProvider // out
	var _cret **C.gchar            // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_get_hidden_providers(_arg0)
	runtime.KeepAlive(provider)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// Metadata: get metadata with key in provider.
//
// The function takes the following parameters:
//
//    - key to get.
//
// The function returns the following values:
//
//    - utf8: metadata for key.
//
func (provider *DeviceProvider) Metadata(key string) string {
	var _arg0 *C.GstDeviceProvider // out
	var _arg1 *C.gchar             // out
	var _cret *C.gchar             // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_device_provider_get_metadata(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(key)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// HideProvider: make provider hide the devices from the factory with name.
//
// This function is used when provider will also provide the devices reported by
// provider factory name. A monitor should stop monitoring the device provider
// with name to avoid duplicate devices.
//
// The function takes the following parameters:
//
//    - name: provider factory name.
//
func (provider *DeviceProvider) HideProvider(name string) {
	var _arg0 *C.GstDeviceProvider // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gst_device_provider_hide_provider(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(name)
}

// IsStarted: this function can be used to know if the provider was successfully
// started.
//
// The function returns the following values:
//
func (provider *DeviceProvider) IsStarted() bool {
	var _arg0 *C.GstDeviceProvider // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_is_started(_arg0)
	runtime.KeepAlive(provider)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Start starts providering the devices. This will cause T_MESSAGE_DEVICE_ADDED
// and T_MESSAGE_DEVICE_REMOVED messages to be posted on the provider's bus when
// devices are added or removed from the system.
//
// Since the DeviceProvider is a singleton, gst_device_provider_start() may
// already have been called by another user of the object,
// gst_device_provider_stop() needs to be called the same number of times.
//
// After this function has been called, gst_device_provider_get_devices() will
// return the same objects that have been received from the
// T_MESSAGE_DEVICE_ADDED messages and will no longer probe.
//
// The function returns the following values:
//
//    - ok: TRUE if the device providering could be started.
//
func (provider *DeviceProvider) Start() bool {
	var _arg0 *C.GstDeviceProvider // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C.gst_device_provider_start(_arg0)
	runtime.KeepAlive(provider)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Stop decreases the use-count by one. If the use count reaches zero, this
// DeviceProvider will stop providering the devices. This needs to be called the
// same number of times that gst_device_provider_start() was called.
func (provider *DeviceProvider) Stop() {
	var _arg0 *C.GstDeviceProvider // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C.gst_device_provider_stop(_arg0)
	runtime.KeepAlive(provider)
}

// UnhideProvider: make provider unhide the devices from factory name.
//
// This function is used when provider will no longer provide the devices
// reported by provider factory name. A monitor should start monitoring the
// devices from provider factory name in order to see all devices again.
//
// The function takes the following parameters:
//
//    - name: provider factory name.
//
func (provider *DeviceProvider) UnhideProvider(name string) {
	var _arg0 *C.GstDeviceProvider // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gst_device_provider_unhide_provider(_arg0, _arg1)
	runtime.KeepAlive(provider)
	runtime.KeepAlive(name)
}

// Start starts providering the devices. This will cause T_MESSAGE_DEVICE_ADDED
// and T_MESSAGE_DEVICE_REMOVED messages to be posted on the provider's bus when
// devices are added or removed from the system.
//
// Since the DeviceProvider is a singleton, gst_device_provider_start() may
// already have been called by another user of the object,
// gst_device_provider_stop() needs to be called the same number of times.
//
// After this function has been called, gst_device_provider_get_devices() will
// return the same objects that have been received from the
// T_MESSAGE_DEVICE_ADDED messages and will no longer probe.
//
// The function returns the following values:
//
//    - ok: TRUE if the device providering could be started.
//
func (provider *DeviceProvider) start() bool {
	gclass := (*C.GstDeviceProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.start

	var _arg0 *C.GstDeviceProvider // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	_cret = C._gotk4_gst1_DeviceProvider_virtual_start(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(provider)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Stop decreases the use-count by one. If the use count reaches zero, this
// DeviceProvider will stop providering the devices. This needs to be called the
// same number of times that gst_device_provider_start() was called.
func (provider *DeviceProvider) stop() {
	gclass := (*C.GstDeviceProviderClass)(coreglib.PeekParentClass(provider))
	fnarg := gclass.stop

	var _arg0 *C.GstDeviceProvider // out

	_arg0 = (*C.GstDeviceProvider)(unsafe.Pointer(coreglib.InternObject(provider).Native()))

	C._gotk4_gst1_DeviceProvider_virtual_stop(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(provider)
}

// DeviceProviderClass: structure of the base DeviceProviderClass
//
// An instance of this type is always passed by reference.
type DeviceProviderClass struct {
	*deviceProviderClass
}

// deviceProviderClass is the struct that's finalized.
type deviceProviderClass struct {
	native *C.GstDeviceProviderClass
}

// ParentClass: parent ObjectClass structure.
func (d *DeviceProviderClass) ParentClass() *ObjectClass {
	valptr := &d.native.parent_class
	var _v *ObjectClass // out
	_v = (*ObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Factory: pointer to the DeviceProviderFactory that creates this provider.
func (d *DeviceProviderClass) Factory() *DeviceProviderFactory {
	valptr := &d.native.factory
	var _v *DeviceProviderFactory // out
	_v = wrapDeviceProviderFactory(coreglib.Take(unsafe.Pointer(*valptr)))
	return _v
}

// AddMetadata: set key with value as metadata in klass.
//
// The function takes the following parameters:
//
//    - key to set.
//    - value to set.
//
func (klass *DeviceProviderClass) AddMetadata(key string, value string) {
	var _arg0 *C.GstDeviceProviderClass // out
	var _arg1 *C.gchar                  // out
	var _arg2 *C.gchar                  // out

	_arg0 = (*C.GstDeviceProviderClass)(gextras.StructNative(unsafe.Pointer(klass)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	C.gst_device_provider_class_add_metadata(_arg0, _arg1, _arg2)
	runtime.KeepAlive(klass)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// AddStaticMetadata: set key with value as metadata in klass.
//
// Same as gst_device_provider_class_add_metadata(), but value must be a static
// string or an inlined string, as it will not be copied. (GStreamer plugins
// will be made resident once loaded, so this function can be used even from
// dynamically loaded plugins.).
//
// The function takes the following parameters:
//
//    - key to set.
//    - value to set.
//
func (klass *DeviceProviderClass) AddStaticMetadata(key string, value string) {
	var _arg0 *C.GstDeviceProviderClass // out
	var _arg1 *C.gchar                  // out
	var _arg2 *C.gchar                  // out

	_arg0 = (*C.GstDeviceProviderClass)(gextras.StructNative(unsafe.Pointer(klass)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))

	C.gst_device_provider_class_add_static_metadata(_arg0, _arg1, _arg2)
	runtime.KeepAlive(klass)
	runtime.KeepAlive(key)
	runtime.KeepAlive(value)
}

// Metadata: get metadata with key in klass.
//
// The function takes the following parameters:
//
//    - key to get.
//
// The function returns the following values:
//
//    - utf8 (optional): metadata for key.
//
func (klass *DeviceProviderClass) Metadata(key string) string {
	var _arg0 *C.GstDeviceProviderClass // out
	var _arg1 *C.gchar                  // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GstDeviceProviderClass)(gextras.StructNative(unsafe.Pointer(klass)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(key)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_device_provider_class_get_metadata(_arg0, _arg1)
	runtime.KeepAlive(klass)
	runtime.KeepAlive(key)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// SetMetadata sets the detailed information for a DeviceProviderClass.
//
// > This function is for use in _class_init functions only.
//
// The function takes the following parameters:
//
//    - longname: long English name of the device provider. E.g. "File Sink".
//    - classification: string describing the type of device provider, as an
//      unordered list separated with slashes ('/'). See draft-klass.txt of the
//      design docs for more details and common types. E.g: "Sink/File".
//    - description: sentence describing the purpose of the device provider. E.g:
//      "Write stream to a file".
//    - author: name and contact details of the author(s). Use \n to separate
//      multiple author metadata. E.g: "Joe Bloggs &lt;joe.blogs at foo.com&gt;".
//
func (klass *DeviceProviderClass) SetMetadata(longname string, classification string, description string, author string) {
	var _arg0 *C.GstDeviceProviderClass // out
	var _arg1 *C.gchar                  // out
	var _arg2 *C.gchar                  // out
	var _arg3 *C.gchar                  // out
	var _arg4 *C.gchar                  // out

	_arg0 = (*C.GstDeviceProviderClass)(gextras.StructNative(unsafe.Pointer(klass)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(longname)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(classification)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(author)))
	defer C.free(unsafe.Pointer(_arg4))

	C.gst_device_provider_class_set_metadata(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(klass)
	runtime.KeepAlive(longname)
	runtime.KeepAlive(classification)
	runtime.KeepAlive(description)
	runtime.KeepAlive(author)
}

// SetStaticMetadata sets the detailed information for a DeviceProviderClass.
//
// > This function is for use in _class_init functions only.
//
// Same as gst_device_provider_class_set_metadata(), but longname,
// classification, description, and author must be static strings or inlined
// strings, as they will not be copied. (GStreamer plugins will be made resident
// once loaded, so this function can be used even from dynamically loaded
// plugins.).
//
// The function takes the following parameters:
//
//    - longname: long English name of the element. E.g. "File Sink".
//    - classification: string describing the type of element, as an unordered
//      list separated with slashes ('/'). See draft-klass.txt of the design docs
//      for more details and common types. E.g: "Sink/File".
//    - description: sentence describing the purpose of the element. E.g: "Write
//      stream to a file".
//    - author: name and contact details of the author(s). Use \n to separate
//      multiple author metadata. E.g: "Joe Bloggs &lt;joe.blogs at foo.com&gt;".
//
func (klass *DeviceProviderClass) SetStaticMetadata(longname string, classification string, description string, author string) {
	var _arg0 *C.GstDeviceProviderClass // out
	var _arg1 *C.gchar                  // out
	var _arg2 *C.gchar                  // out
	var _arg3 *C.gchar                  // out
	var _arg4 *C.gchar                  // out

	_arg0 = (*C.GstDeviceProviderClass)(gextras.StructNative(unsafe.Pointer(klass)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(longname)))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(classification)))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(description)))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(author)))

	C.gst_device_provider_class_set_static_metadata(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(klass)
	runtime.KeepAlive(longname)
	runtime.KeepAlive(classification)
	runtime.KeepAlive(description)
	runtime.KeepAlive(author)
}
