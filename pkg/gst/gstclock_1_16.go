// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// ClockIDGetClock: this function returns the underlying clock.
//
// The function takes the following parameters:
//
//    - id: ClockID.
//
// The function returns the following values:
//
//    - clock (optional) or NULL when the underlying clock has been freed.
//
func ClockIDGetClock(id ClockID) Clocker {
	var _arg1 C.GstClockID // out
	var _cret *C.GstClock  // in

	_arg1 = (C.gpointer)(unsafe.Pointer(id))
	type _ = ClockID
	type _ = unsafe.Pointer

	_cret = C.gst_clock_id_get_clock(_arg1)
	runtime.KeepAlive(id)

	var _clock Clocker // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Clocker)
				return ok
			})
			rv, ok := casted.(Clocker)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching gst.Clocker")
			}
			_clock = rv
		}
	}

	return _clock
}

// ClockIDUsesClock: this function returns whether id uses clock as the
// underlying clock. clock can be NULL, in which case the return value indicates
// whether the underlying clock has been freed. If this is the case, the id is
// no longer usable and should be freed.
//
// The function takes the following parameters:
//
//    - id to check.
//    - clock to compare against.
//
// The function returns the following values:
//
//    - ok: whether the clock id uses the same underlying Clock clock.
//
func ClockIDUsesClock(id ClockID, clock Clocker) bool {
	var _arg1 C.GstClockID // out
	var _arg2 *C.GstClock  // out
	var _cret C.gboolean   // in

	_arg1 = (C.gpointer)(unsafe.Pointer(id))
	type _ = ClockID
	type _ = unsafe.Pointer
	_arg2 = (*C.GstClock)(unsafe.Pointer(coreglib.InternObject(clock).Native()))

	_cret = C.gst_clock_id_uses_clock(_arg1, _arg2)
	runtime.KeepAlive(id)
	runtime.KeepAlive(clock)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
