// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

//export _gotk4_gst1_PadForwardFunction
func _gotk4_gst1_PadForwardFunction(arg1 *C.GstPad, arg2 C.gpointer) (cret C.gboolean) {
	var fn PadForwardFunction
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PadForwardFunction)
	}

	var _pad *Pad // out

	_pad = wrapPad(coreglib.Take(unsafe.Pointer(arg1)))

	ok := fn(_pad)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_PadProbeCallback
func _gotk4_gst1_PadProbeCallback(arg1 *C.GstPad, arg2 *C.GstPadProbeInfo, arg3 C.gpointer) (cret C.GstPadProbeReturn) {
	var fn PadProbeCallback
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PadProbeCallback)
	}

	var _pad *Pad           // out
	var _info *PadProbeInfo // out

	_pad = wrapPad(coreglib.Take(unsafe.Pointer(arg1)))
	_info = (*PadProbeInfo)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	padProbeReturn := fn(_pad, _info)

	var _ PadProbeReturn

	cret = C.GstPadProbeReturn(padProbeReturn)

	return cret
}

//export _gotk4_gst1_PadStickyEventsForEachFunction
func _gotk4_gst1_PadStickyEventsForEachFunction(arg1 *C.GstPad, arg2 **C.GstEvent, arg3 C.gpointer) (cret C.gboolean) {
	var fn PadStickyEventsForEachFunction
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(PadStickyEventsForEachFunction)
	}

	var _pad *Pad     // out
	var _event *Event // out

	_pad = wrapPad(coreglib.Take(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_event = (*Event)(gextras.NewStructNative(unsafe.Pointer((*arg2))))
	}

	ok := fn(_pad, _event)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_gst1_Pad_ConnectLinked
func _gotk4_gst1_Pad_ConnectLinked(arg0 C.gpointer, arg1 *C.GstPad, arg2 C.guintptr) {
	var f func(peer *Pad)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(peer *Pad))
	}

	var _peer *Pad // out

	_peer = wrapPad(coreglib.Take(unsafe.Pointer(arg1)))

	f(_peer)
}

//export _gotk4_gst1_Pad_ConnectUnlinked
func _gotk4_gst1_Pad_ConnectUnlinked(arg0 C.gpointer, arg1 *C.GstPad, arg2 C.guintptr) {
	var f func(peer *Pad)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(peer *Pad))
	}

	var _peer *Pad // out

	_peer = wrapPad(coreglib.Take(unsafe.Pointer(arg1)))

	f(_peer)
}
