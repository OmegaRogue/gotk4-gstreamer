// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// ReferenceTimestampMeta can be used to attach alternative timestamps and
// possibly durations to a Buffer. These are generally not according to the
// pipeline clock and could be e.g. the NTP timestamp when the media was
// captured.
//
// The reference is stored as a Caps in reference. Examples of valid references
// would be timestamp/x-drivername-stream for timestamps that are locally
// generated by some driver named drivername when generating the stream, e.g.
// based on a frame counter, or timestamp/x-ntp, host=pool.ntp.org, port=123 for
// timestamps based on a specific NTP server.
//
// An instance of this type is always passed by reference.
type ReferenceTimestampMeta struct {
	*referenceTimestampMeta
}

// referenceTimestampMeta is the struct that's finalized.
type referenceTimestampMeta struct {
	native *C.GstReferenceTimestampMeta
}

// Parent: parent Meta structure.
func (r *ReferenceTimestampMeta) Parent() *Meta {
	valptr := &r.native.parent
	var _v *Meta // out
	_v = (*Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Reference: identifier for the timestamp reference.
func (r *ReferenceTimestampMeta) Reference() *Caps {
	valptr := &r.native.reference
	var _v *Caps // out
	_v = (*Caps)(gextras.NewStructNative(unsafe.Pointer(*valptr)))
	return _v
}

// Timestamp: timestamp.
func (r *ReferenceTimestampMeta) Timestamp() ClockTime {
	valptr := &r.native.timestamp
	var _v ClockTime // out
	_v = uint64(*valptr)
	type _ = ClockTime
	type _ = uint64
	return _v
}

// Duration: duration, or GST_CLOCK_TIME_NONE.
func (r *ReferenceTimestampMeta) Duration() ClockTime {
	valptr := &r.native.duration
	var _v ClockTime // out
	_v = uint64(*valptr)
	type _ = ClockTime
	type _ = uint64
	return _v
}

// ReferenceTimestampMetaGetInfo gets the global MetaInfo describing the
// ReferenceTimestampMeta meta.
//
// The function returns the following values:
//
//    - metaInfo: MetaInfo.
//
func ReferenceTimestampMetaGetInfo() *MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_reference_timestamp_meta_get_info()

	var _metaInfo *MetaInfo // out

	_metaInfo = (*MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
