// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// DebugAddRingBufferLogger adds a memory ringbuffer based debug logger that
// stores up to max_size_per_thread bytes of logs per thread and times out
// threads after thread_timeout seconds of inactivity.
//
// Logs can be fetched with gst_debug_ring_buffer_logger_get_logs() and the
// logger can be removed again with gst_debug_remove_ring_buffer_logger(). Only
// one logger at a time is possible.
//
// The function takes the following parameters:
//
//    - maxSizePerThread: maximum size of log per thread in bytes.
//    - threadTimeout: timeout for threads in seconds.
//
func DebugAddRingBufferLogger(maxSizePerThread, threadTimeout uint) {
	var _arg1 C.guint // out
	var _arg2 C.guint // out

	_arg1 = C.guint(maxSizePerThread)
	_arg2 = C.guint(threadTimeout)

	C.gst_debug_add_ring_buffer_logger(_arg1, _arg2)
	runtime.KeepAlive(maxSizePerThread)
	runtime.KeepAlive(threadTimeout)
}

// DebugRemoveRingBufferLogger removes any previously added ring buffer logger
// with gst_debug_add_ring_buffer_logger().
func DebugRemoveRingBufferLogger() {
	C.gst_debug_remove_ring_buffer_logger()
}

// DebugRingBufferLoggerGetLogs fetches the current logs per thread from the
// ring buffer logger. See gst_debug_add_ring_buffer_logger() for details.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array of strings with the debug output per thread.
//
func DebugRingBufferLoggerGetLogs() []string {
	var _cret **C.gchar // in

	_cret = C.gst_debug_ring_buffer_logger_get_logs()

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}
