// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeDebugGraphDetails = coreglib.Type(C.gst_debug_graph_details_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDebugGraphDetails, F: marshalDebugGraphDetails},
	})
}

// DebugGraphDetails: available details for pipeline graphs produced by
// GST_DEBUG_BIN_TO_DOT_FILE() and GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS().
type DebugGraphDetails C.guint

const (
	// DebugGraphShowMediaType: show caps-name on edges.
	DebugGraphShowMediaType DebugGraphDetails = 0b1
	// DebugGraphShowCapsDetails: show caps-details on edges.
	DebugGraphShowCapsDetails DebugGraphDetails = 0b10
	// DebugGraphShowNonDefaultParams: show modified parameters on elements.
	DebugGraphShowNonDefaultParams DebugGraphDetails = 0b100
	// DebugGraphShowStates: show element states.
	DebugGraphShowStates DebugGraphDetails = 0b1000
	// DebugGraphShowFullParams: show full element parameter values even if they
	// are very long.
	DebugGraphShowFullParams DebugGraphDetails = 0b10000
	// DebugGraphShowAll: show all the typical details that one might want.
	DebugGraphShowAll DebugGraphDetails = 0b1111
	// DebugGraphShowVerbose: show all details regardless of how large or
	// verbose they make the resulting output.
	DebugGraphShowVerbose DebugGraphDetails = 0b11111111111111111111111111111111
)

func marshalDebugGraphDetails(p uintptr) (interface{}, error) {
	return DebugGraphDetails(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for DebugGraphDetails.
func (d DebugGraphDetails) String() string {
	if d == 0 {
		return "DebugGraphDetails(0)"
	}

	var builder strings.Builder
	builder.Grow(166)

	for d != 0 {
		next := d & (d - 1)
		bit := d - next

		switch bit {
		case DebugGraphShowMediaType:
			builder.WriteString("MediaType|")
		case DebugGraphShowCapsDetails:
			builder.WriteString("CapsDetails|")
		case DebugGraphShowNonDefaultParams:
			builder.WriteString("NonDefaultParams|")
		case DebugGraphShowStates:
			builder.WriteString("States|")
		case DebugGraphShowFullParams:
			builder.WriteString("FullParams|")
		case DebugGraphShowAll:
			builder.WriteString("All|")
		case DebugGraphShowVerbose:
			builder.WriteString("Verbose|")
		default:
			builder.WriteString(fmt.Sprintf("DebugGraphDetails(0b%b)|", bit))
		}

		d = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if d contains other.
func (d DebugGraphDetails) Has(other DebugGraphDetails) bool {
	return (d & other) == other
}

// DebugBinToDotData: to aid debugging applications one can use this method to
// obtain the whole network of gstreamer elements that form the pipeline into a
// dot file. This data can be processed with graphviz to get an image.
//
// The function takes the following parameters:
//
//    - bin: top-level pipeline that should be analyzed.
//    - details: type of DebugGraphDetails to use.
//
// The function returns the following values:
//
//    - utf8: string containing the pipeline in graphviz dot format.
//
func DebugBinToDotData(bin *Bin, details DebugGraphDetails) string {
	var _arg1 *C.GstBin              // out
	var _arg2 C.GstDebugGraphDetails // out
	var _cret *C.gchar               // in

	_arg1 = (*C.GstBin)(unsafe.Pointer(coreglib.InternObject(bin).Native()))
	_arg2 = C.GstDebugGraphDetails(details)

	_cret = C.gst_debug_bin_to_dot_data(_arg1, _arg2)
	runtime.KeepAlive(bin)
	runtime.KeepAlive(details)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DebugBinToDotFile: to aid debugging applications one can use this method to
// write out the whole network of gstreamer elements that form the pipeline into
// a dot file. This file can be processed with graphviz to get an image.
//
//    shell  dot -Tpng -oimage.png graph_lowlevel.dot.
//
// The function takes the following parameters:
//
//    - bin: top-level pipeline that should be analyzed.
//    - details: type of DebugGraphDetails to use.
//    - fileName: output base filename (e.g. "myplayer").
//
func DebugBinToDotFile(bin *Bin, details DebugGraphDetails, fileName string) {
	var _arg1 *C.GstBin              // out
	var _arg2 C.GstDebugGraphDetails // out
	var _arg3 *C.gchar               // out

	_arg1 = (*C.GstBin)(unsafe.Pointer(coreglib.InternObject(bin).Native()))
	_arg2 = C.GstDebugGraphDetails(details)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg3))

	C.gst_debug_bin_to_dot_file(_arg1, _arg2, _arg3)
	runtime.KeepAlive(bin)
	runtime.KeepAlive(details)
	runtime.KeepAlive(fileName)
}

// DebugBinToDotFileWithTs: this works like gst_debug_bin_to_dot_file(), but
// adds the current timestamp to the filename, so that it can be used to take
// multiple snapshots.
//
// The function takes the following parameters:
//
//    - bin: top-level pipeline that should be analyzed.
//    - details: type of DebugGraphDetails to use.
//    - fileName: output base filename (e.g. "myplayer").
//
func DebugBinToDotFileWithTs(bin *Bin, details DebugGraphDetails, fileName string) {
	var _arg1 *C.GstBin              // out
	var _arg2 C.GstDebugGraphDetails // out
	var _arg3 *C.gchar               // out

	_arg1 = (*C.GstBin)(unsafe.Pointer(coreglib.InternObject(bin).Native()))
	_arg2 = C.GstDebugGraphDetails(details)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(fileName)))
	defer C.free(unsafe.Pointer(_arg3))

	C.gst_debug_bin_to_dot_file_with_ts(_arg1, _arg2, _arg3)
	runtime.KeepAlive(bin)
	runtime.KeepAlive(details)
	runtime.KeepAlive(fileName)
}
