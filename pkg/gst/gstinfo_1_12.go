// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// The function takes the following parameters:
//
//    - flags: set of StackTraceFlags to determine how the stack trace should
//      look like. Pass T_STACK_TRACE_SHOW_NONE to retrieve a minimal backtrace.
//
// The function returns the following values:
//
//    - utf8 (optional): stack trace, if libunwind or glibc backtrace are
//      present, else NULL.
//
func DebugGetStackTrace(flags StackTraceFlags) string {
	var _arg1 C.GstStackTraceFlags // out
	var _cret *C.gchar             // in

	_arg1 = C.GstStackTraceFlags(flags)

	_cret = C.gst_debug_get_stack_trace(_arg1)
	runtime.KeepAlive(flags)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
