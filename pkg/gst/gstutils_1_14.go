// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/gst.h>
import "C"

// GROUP_ID_INVALID: value which is guaranteed to never be returned by
// gst_util_group_id_next().
//
// Can be used as a default value in variables used to store group_id.
const GROUP_ID_INVALID = 0

// SEQNUM_INVALID: value which is guaranteed to never be returned by
// gst_util_seqnum_next().
//
// Can be used as a default value in variables used to store seqnum.
const SEQNUM_INVALID = 0

// StateChangeGetName gets a string representing the given state transition.
//
// The function takes the following parameters:
//
//    - transition to get the name of.
//
// The function returns the following values:
//
//    - utf8: string with the name of the state result.
//
func StateChangeGetName(transition StateChange) string {
	var _arg1 C.GstStateChange // out
	var _cret *C.gchar         // in

	_arg1 = C.GstStateChange(transition)

	_cret = C.gst_state_change_get_name(_arg1)
	runtime.KeepAlive(transition)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UtilDumpBuffer dumps the buffer memory into a hex representation. Useful for
// debugging.
//
// The function takes the following parameters:
//
//    - buf whose memory to dump.
//
func UtilDumpBuffer(buf *Buffer) {
	var _arg1 *C.GstBuffer // out

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buf)))

	C.gst_util_dump_buffer(_arg1)
	runtime.KeepAlive(buf)
}
