// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// GType values.
var (
	GTypeDynamicTypeFactory = coreglib.Type(C.gst_dynamic_type_factory_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDynamicTypeFactory, F: marshalDynamicTypeFactory},
	})
}

// DynamicTypeRegister registers a new DynamicTypeFactory in the registry.
//
// The function takes the following parameters:
//
//    - plugin to register dyn_type for.
//    - typ to register dynamically.
//
// The function returns the following values:
//
func DynamicTypeRegister(plugin *Plugin, typ coreglib.Type) bool {
	var _arg1 *C.GstPlugin // out
	var _arg2 C.GType      // out
	var _cret C.gboolean   // in

	_arg1 = (*C.GstPlugin)(unsafe.Pointer(coreglib.InternObject(plugin).Native()))
	_arg2 = C.GType(typ)

	_cret = C.gst_dynamic_type_register(_arg1, _arg2)
	runtime.KeepAlive(plugin)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DynamicTypeFactory is used to represent a type that can be automatically
// loaded the first time it is used. For example, a non-standard type for use in
// caps fields.
//
// In general, applications and plugins don't need to use the factory beyond
// registering the type in a plugin init function. Once that is done, the type
// is stored in the registry, and ready as soon as the registry is loaded.
//
// Registering a type for dynamic loading
//
//
//    static gboolean
//    plugin_init (GstPlugin * plugin)
//    {
//      return gst_dynamic_type_register (plugin, GST_TYPE_CUSTOM_CAPS_FIELD);
//    }.
type DynamicTypeFactory struct {
	_ [0]func() // equal guard
	PluginFeature
}

var (
	_ PluginFeaturer = (*DynamicTypeFactory)(nil)
)

func wrapDynamicTypeFactory(obj *coreglib.Object) *DynamicTypeFactory {
	return &DynamicTypeFactory{
		PluginFeature: PluginFeature{
			GstObject: GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalDynamicTypeFactory(p uintptr) (interface{}, error) {
	return wrapDynamicTypeFactory(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
