// Code generated by girgen. DO NOT EDIT.

package gst

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gst.h>
import "C"

// FLAG_SET_MASK_EXACT: mask value with all bits set, for use as a GstFlagSet
// mask where all flag bits must match exactly.
const FLAG_SET_MASK_EXACT = 4294967295

// ValueGetFlagsetFlags: retrieve the flags field of a GstFlagSet value.
//
// The function takes the following parameters:
//
//    - value: GValue initialized to T_TYPE_FLAG_SET.
//
// The function returns the following values:
//
//    - guint flags field of the flagset instance.
//
func ValueGetFlagsetFlags(value *coreglib.Value) uint {
	var _arg1 *C.GValue // out
	var _cret C.guint   // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.gst_value_get_flagset_flags(_arg1)
	runtime.KeepAlive(value)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ValueGetFlagsetMask: retrieve the mask field of a GstFlagSet value.
//
// The function takes the following parameters:
//
//    - value: GValue initialized to T_TYPE_FLAG_SET.
//
// The function returns the following values:
//
//    - guint: mask field of the flagset instance.
//
func ValueGetFlagsetMask(value *coreglib.Value) uint {
	var _arg1 *C.GValue // out
	var _cret C.guint   // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.gst_value_get_flagset_mask(_arg1)
	runtime.KeepAlive(value)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ValueSetFlagset sets value to the flags and mask values provided in flags and
// mask. The flags value indicates the values of flags, the mask represents
// which bits in the flag value have been set, and which are "don't care".
//
// The function takes the following parameters:
//
//    - value: GValue initialized to GST_TYPE_FLAG_SET.
//    - flags: value of the flags set or unset.
//    - mask indicate which flags bits must match for comparisons.
//
func ValueSetFlagset(value *coreglib.Value, flags, mask uint) {
	var _arg1 *C.GValue // out
	var _arg2 C.guint   // out
	var _arg3 C.guint   // out

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))
	_arg2 = C.guint(flags)
	_arg3 = C.guint(mask)

	C.gst_value_set_flagset(_arg1, _arg2, _arg3)
	runtime.KeepAlive(value)
	runtime.KeepAlive(flags)
	runtime.KeepAlive(mask)
}

// FlagSetRegister: create a new sub-class of T_TYPE_FLAG_SET which will
// pretty-print the human-readable flags when serializing, for easier debugging.
//
// The function takes the following parameters:
//
//    - flagsType of a TYPE_FLAGS type.
//
// The function returns the following values:
//
func FlagSetRegister(flagsType coreglib.Type) coreglib.Type {
	var _arg1 C.GType // out
	var _cret C.GType // in

	_arg1 = C.GType(flagsType)

	_cret = C.gst_flagset_register(_arg1)
	runtime.KeepAlive(flagsType)

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}
