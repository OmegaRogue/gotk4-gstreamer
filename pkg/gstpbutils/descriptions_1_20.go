// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/pbutils/pbutils.h>
import "C"

// GType values.
var (
	GTypePbUtilsCapsDescriptionFlags = coreglib.Type(C.gst_pb_utils_caps_description_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePbUtilsCapsDescriptionFlags, F: marshalPbUtilsCapsDescriptionFlags},
	})
}

// PbUtilsCapsDescriptionFlags flags that are returned by
// gst_pb_utils_get_caps_description_flags() and describe the format of the
// caps.
type PbUtilsCapsDescriptionFlags C.guint

const (
	// PbutilsCapsDescriptionFlagContainer caps describe a container format.
	PbutilsCapsDescriptionFlagContainer PbUtilsCapsDescriptionFlags = 0b1
	// PbutilsCapsDescriptionFlagAudio caps describe an audio format, or a
	// container format that can store audio.
	PbutilsCapsDescriptionFlagAudio PbUtilsCapsDescriptionFlags = 0b10
	// PbutilsCapsDescriptionFlagVideo caps describe an video format, or a
	// container format that can store video.
	PbutilsCapsDescriptionFlagVideo PbUtilsCapsDescriptionFlags = 0b100
	// PbutilsCapsDescriptionFlagImage caps describe an image format, or a
	// container format that can store image.
	PbutilsCapsDescriptionFlagImage PbUtilsCapsDescriptionFlags = 0b1000
	// PbutilsCapsDescriptionFlagSubtitle caps describe an subtitle format, or a
	// container format that can store subtitles.
	PbutilsCapsDescriptionFlagSubtitle PbUtilsCapsDescriptionFlags = 0b10000
	// PbutilsCapsDescriptionFlagTag: container format is a tags container.
	PbutilsCapsDescriptionFlagTag PbUtilsCapsDescriptionFlags = 0b100000
	// PbutilsCapsDescriptionFlagGeneric: container format can store any kind of
	// stream type.
	PbutilsCapsDescriptionFlagGeneric PbUtilsCapsDescriptionFlags = 0b1000000
)

func marshalPbUtilsCapsDescriptionFlags(p uintptr) (interface{}, error) {
	return PbUtilsCapsDescriptionFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for PbUtilsCapsDescriptionFlags.
func (p PbUtilsCapsDescriptionFlags) String() string {
	if p == 0 {
		return "PbUtilsCapsDescriptionFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(230)

	for p != 0 {
		next := p & (p - 1)
		bit := p - next

		switch bit {
		case PbutilsCapsDescriptionFlagContainer:
			builder.WriteString("Container|")
		case PbutilsCapsDescriptionFlagAudio:
			builder.WriteString("Audio|")
		case PbutilsCapsDescriptionFlagVideo:
			builder.WriteString("Video|")
		case PbutilsCapsDescriptionFlagImage:
			builder.WriteString("Image|")
		case PbutilsCapsDescriptionFlagSubtitle:
			builder.WriteString("Subtitle|")
		case PbutilsCapsDescriptionFlagTag:
			builder.WriteString("Tag|")
		case PbutilsCapsDescriptionFlagGeneric:
			builder.WriteString("Generic|")
		default:
			builder.WriteString(fmt.Sprintf("PbUtilsCapsDescriptionFlags(0b%b)|", bit))
		}

		p = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if p contains other.
func (p PbUtilsCapsDescriptionFlags) Has(other PbUtilsCapsDescriptionFlags) bool {
	return (p & other) == other
}

// PbUtilsGetCapsDescriptionFlags returns flags that describe the format of the
// caps if known. No flags are set for unknown caps.
//
// The function takes the following parameters:
//
//    - caps: (fixed) Caps for which flags are requested.
//
// The function returns the following values:
//
//    - pbUtilsCapsDescriptionFlags that describe caps, or no flags if the caps
//      are unknown.
//
func PbUtilsGetCapsDescriptionFlags(caps *gst.Caps) PbUtilsCapsDescriptionFlags {
	var _arg1 *C.GstCaps                       // out
	var _cret C.GstPbUtilsCapsDescriptionFlags // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_pb_utils_get_caps_description_flags(_arg1)
	runtime.KeepAlive(caps)

	var _pbUtilsCapsDescriptionFlags PbUtilsCapsDescriptionFlags // out

	_pbUtilsCapsDescriptionFlags = PbUtilsCapsDescriptionFlags(_cret)

	return _pbUtilsCapsDescriptionFlags
}

// PbUtilsGetFileExtensionFromCaps returns a possible file extension for the
// given caps, if known.
//
// The function takes the following parameters:
//
//    - caps: (fixed) Caps for which a file extension is needed.
//
// The function returns the following values:
//
//    - utf8 (optional): newly-allocated file extension string, or NULL on error.
//      Free string with g_free() when not needed any longer.
//
func PbUtilsGetFileExtensionFromCaps(caps *gst.Caps) string {
	var _arg1 *C.GstCaps // out
	var _cret *C.gchar   // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_pb_utils_get_file_extension_from_caps(_arg1)
	runtime.KeepAlive(caps)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
