// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/pbutils/pbutils.h>
// extern void _gotk4_gstpbutils1_Discoverer_ConnectStarting(gpointer, guintptr);
// extern void _gotk4_gstpbutils1_Discoverer_ConnectSourceSetup(gpointer, GstElement*, guintptr);
// extern void _gotk4_gstpbutils1_Discoverer_ConnectFinished(gpointer, guintptr);
// extern void _gotk4_gstpbutils1_Discoverer_ConnectDiscovered(gpointer, GstDiscovererInfo*, GError*, guintptr);
// extern void _gotk4_gstpbutils1_DiscovererClass_starting(GstDiscoverer*);
// extern void _gotk4_gstpbutils1_DiscovererClass_source_setup(GstDiscoverer*, GstElement*);
// extern void _gotk4_gstpbutils1_DiscovererClass_finished(GstDiscoverer*);
// extern void _gotk4_gstpbutils1_DiscovererClass_discovered(GstDiscoverer*, GstDiscovererInfo*, GError*);
// void _gotk4_gstpbutils1_Discoverer_virtual_discovered(void* fnptr, GstDiscoverer* arg0, GstDiscovererInfo* arg1, GError* arg2) {
//   ((void (*)(GstDiscoverer*, GstDiscovererInfo*, GError*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_gstpbutils1_Discoverer_virtual_finished(void* fnptr, GstDiscoverer* arg0) {
//   ((void (*)(GstDiscoverer*))(fnptr))(arg0);
// };
// void _gotk4_gstpbutils1_Discoverer_virtual_source_setup(void* fnptr, GstDiscoverer* arg0, GstElement* arg1) {
//   ((void (*)(GstDiscoverer*, GstElement*))(fnptr))(arg0, arg1);
// };
// void _gotk4_gstpbutils1_Discoverer_virtual_starting(void* fnptr, GstDiscoverer* arg0) {
//   ((void (*)(GstDiscoverer*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeDiscovererResult        = coreglib.Type(C.gst_discoverer_result_get_type())
	GTypeDiscoverer              = coreglib.Type(C.gst_discoverer_get_type())
	GTypeDiscovererAudioInfo     = coreglib.Type(C.gst_discoverer_audio_info_get_type())
	GTypeDiscovererContainerInfo = coreglib.Type(C.gst_discoverer_container_info_get_type())
	GTypeDiscovererInfo          = coreglib.Type(C.gst_discoverer_info_get_type())
	GTypeDiscovererStreamInfo    = coreglib.Type(C.gst_discoverer_stream_info_get_type())
	GTypeDiscovererSubtitleInfo  = coreglib.Type(C.gst_discoverer_subtitle_info_get_type())
	GTypeDiscovererVideoInfo     = coreglib.Type(C.gst_discoverer_video_info_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDiscovererResult, F: marshalDiscovererResult},
		coreglib.TypeMarshaler{T: GTypeDiscoverer, F: marshalDiscoverer},
		coreglib.TypeMarshaler{T: GTypeDiscovererAudioInfo, F: marshalDiscovererAudioInfo},
		coreglib.TypeMarshaler{T: GTypeDiscovererContainerInfo, F: marshalDiscovererContainerInfo},
		coreglib.TypeMarshaler{T: GTypeDiscovererInfo, F: marshalDiscovererInfo},
		coreglib.TypeMarshaler{T: GTypeDiscovererStreamInfo, F: marshalDiscovererStreamInfo},
		coreglib.TypeMarshaler{T: GTypeDiscovererSubtitleInfo, F: marshalDiscovererSubtitleInfo},
		coreglib.TypeMarshaler{T: GTypeDiscovererVideoInfo, F: marshalDiscovererVideoInfo},
	})
}

// DiscovererResult: result values for the discovery process.
type DiscovererResult C.gint

const (
	// DiscovererOK: discovery was successful.
	DiscovererOK DiscovererResult = iota
	// DiscovererURIInvalid: URI is invalid.
	DiscovererURIInvalid
	// DiscovererError: error happened and the GError is set.
	DiscovererError
	// DiscovererTimeout: discovery timed-out.
	DiscovererTimeout
	// DiscovererBusy: discoverer was already discovering a file.
	DiscovererBusy
	// DiscovererMissingPlugins: some plugins are missing for full discovery.
	DiscovererMissingPlugins
)

func marshalDiscovererResult(p uintptr) (interface{}, error) {
	return DiscovererResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for DiscovererResult.
func (d DiscovererResult) String() string {
	switch d {
	case DiscovererOK:
		return "OK"
	case DiscovererURIInvalid:
		return "URIInvalid"
	case DiscovererError:
		return "Error"
	case DiscovererTimeout:
		return "Timeout"
	case DiscovererBusy:
		return "Busy"
	case DiscovererMissingPlugins:
		return "MissingPlugins"
	default:
		return fmt.Sprintf("DiscovererResult(%d)", d)
	}
}

// DiscovererOverrides contains methods that are overridable.
type DiscovererOverrides struct {
	// The function takes the following parameters:
	//
	//    - info
	//    - err
	//
	Discovered func(info *DiscovererInfo, err error)
	Finished   func()
	// The function takes the following parameters:
	//
	SourceSetup func(source gst.Elementer)
	Starting    func()
}

func defaultDiscovererOverrides(v *Discoverer) DiscovererOverrides {
	return DiscovererOverrides{
		Discovered:  v.discovered,
		Finished:    v.finished,
		SourceSetup: v.sourceSetup,
		Starting:    v.starting,
	}
}

// Discoverer is a utility object which allows to get as much information as
// possible from one or many URIs.
//
// It provides two APIs, allowing usage in blocking or non-blocking mode.
//
// The blocking mode just requires calling gst_discoverer_discover_uri() with
// the URI one wishes to discover.
//
// The non-blocking mode requires a running Loop iterating a Context, where one
// connects to the various signals, appends the URIs to be processed (through
// gst_discoverer_discover_uri_async()) and then asks for the discovery to begin
// (through gst_discoverer_start()). By default this will use the GLib default
// main context unless you have set a custom context using
// g_main_context_push_thread_default().
//
// All the information is returned in a DiscovererInfo structure.
type Discoverer struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Discoverer)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Discoverer, *DiscovererClass, DiscovererOverrides](
		GTypeDiscoverer,
		initDiscovererClass,
		wrapDiscoverer,
		defaultDiscovererOverrides,
	)
}

func initDiscovererClass(gclass unsafe.Pointer, overrides DiscovererOverrides, classInitFunc func(*DiscovererClass)) {
	pclass := (*C.GstDiscovererClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeDiscoverer))))

	if overrides.Discovered != nil {
		pclass.discovered = (*[0]byte)(C._gotk4_gstpbutils1_DiscovererClass_discovered)
	}

	if overrides.Finished != nil {
		pclass.finished = (*[0]byte)(C._gotk4_gstpbutils1_DiscovererClass_finished)
	}

	if overrides.SourceSetup != nil {
		pclass.source_setup = (*[0]byte)(C._gotk4_gstpbutils1_DiscovererClass_source_setup)
	}

	if overrides.Starting != nil {
		pclass.starting = (*[0]byte)(C._gotk4_gstpbutils1_DiscovererClass_starting)
	}

	if classInitFunc != nil {
		class := (*DiscovererClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDiscoverer(obj *coreglib.Object) *Discoverer {
	return &Discoverer{
		Object: obj,
	}
}

func marshalDiscoverer(p uintptr) (interface{}, error) {
	return wrapDiscoverer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectDiscovered will be emitted in async mode when all information on a URI
// could be discovered, or an error occurred.
//
// When an error occurs, info might still contain some partial information,
// depending on the circumstances of the error.
func (discoverer *Discoverer) ConnectDiscovered(f func(info *DiscovererInfo, err error)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(discoverer, "discovered", false, unsafe.Pointer(C._gotk4_gstpbutils1_Discoverer_ConnectDiscovered), f)
}

// ConnectFinished will be emitted in async mode when all pending URIs have been
// processed.
func (discoverer *Discoverer) ConnectFinished(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(discoverer, "finished", false, unsafe.Pointer(C._gotk4_gstpbutils1_Discoverer_ConnectFinished), f)
}

// ConnectSourceSetup: this signal is emitted after the source element has been
// created for, so the URI being discovered, so it can be configured by setting
// additional properties (e.g. set a proxy server for an http source, or set the
// device and read speed for an audio cd source).
//
// This signal is usually emitted from the context of a GStreamer streaming
// thread.
func (discoverer *Discoverer) ConnectSourceSetup(f func(source gst.Elementer)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(discoverer, "source-setup", false, unsafe.Pointer(C._gotk4_gstpbutils1_Discoverer_ConnectSourceSetup), f)
}

// ConnectStarting will be emitted when the discover starts analyzing the
// pending URIs.
func (discoverer *Discoverer) ConnectStarting(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(discoverer, "starting", false, unsafe.Pointer(C._gotk4_gstpbutils1_Discoverer_ConnectStarting), f)
}

// NewDiscoverer creates a new Discoverer with the provided timeout.
//
// The function takes the following parameters:
//
//    - timeout per file, in nanoseconds. Allowed are values between one second
//      (T_SECOND) and one hour (3600 * T_SECOND).
//
// The function returns the following values:
//
//    - discoverer: new Discoverer. If an error occurred when creating the
//      discoverer, err will be set accordingly and NULL will be returned. If err
//      is set, the caller must free it when no longer needed using
//      g_error_free().
//
func NewDiscoverer(timeout gst.ClockTime) (*Discoverer, error) {
	var _arg1 C.GstClockTime   // out
	var _cret *C.GstDiscoverer // in
	var _cerr *C.GError        // in

	_arg1 = C.guint64(timeout)
	type _ = gst.ClockTime
	type _ = uint64

	_cret = C.gst_discoverer_new(_arg1, &_cerr)
	runtime.KeepAlive(timeout)

	var _discoverer *Discoverer // out
	var _goerr error            // out

	_discoverer = wrapDiscoverer(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _discoverer, _goerr
}

// DiscoverURI: synchronously discovers the given uri.
//
// A copy of uri will be made internally, so the caller can safely g_free()
// afterwards.
//
// The function takes the following parameters:
//
//    - uri: URI to run on.
//
// The function returns the following values:
//
//    - discovererInfo: result of the scanning. Can be NULL if an error occurred.
//
func (discoverer *Discoverer) DiscoverURI(uri string) (*DiscovererInfo, error) {
	var _arg0 *C.GstDiscoverer     // out
	var _arg1 *C.gchar             // out
	var _cret *C.GstDiscovererInfo // in
	var _cerr *C.GError            // in

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_discoverer_discover_uri(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(discoverer)
	runtime.KeepAlive(uri)

	var _discovererInfo *DiscovererInfo // out
	var _goerr error                    // out

	_discovererInfo = wrapDiscovererInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _discovererInfo, _goerr
}

// DiscoverURIAsync appends the given uri to the list of URIs to discoverer. The
// actual discovery of the uri will only take place if gst_discoverer_start()
// has been called.
//
// A copy of uri will be made internally, so the caller can safely g_free()
// afterwards.
//
// The function takes the following parameters:
//
//    - uri: URI to add.
//
// The function returns the following values:
//
//    - ok: TRUE if the uri was successfully appended to the list of pending
//      uris, else FALSE.
//
func (discoverer *Discoverer) DiscoverURIAsync(uri string) bool {
	var _arg0 *C.GstDiscoverer // out
	var _arg1 *C.gchar         // out
	var _cret C.gboolean       // in

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_discoverer_discover_uri_async(_arg0, _arg1)
	runtime.KeepAlive(discoverer)
	runtime.KeepAlive(uri)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Start: allow asynchronous discovering of URIs to take place. A Loop must be
// available for Discoverer to properly work in asynchronous mode.
func (discoverer *Discoverer) Start() {
	var _arg0 *C.GstDiscoverer // out

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))

	C.gst_discoverer_start(_arg0)
	runtime.KeepAlive(discoverer)
}

// Stop the discovery of any pending URIs and clears the list of pending URIS
// (if any).
func (discoverer *Discoverer) Stop() {
	var _arg0 *C.GstDiscoverer // out

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))

	C.gst_discoverer_stop(_arg0)
	runtime.KeepAlive(discoverer)
}

// The function takes the following parameters:
//
//    - info
//    - err
//
func (discoverer *Discoverer) discovered(info *DiscovererInfo, err error) {
	gclass := (*C.GstDiscovererClass)(coreglib.PeekParentClass(discoverer))
	fnarg := gclass.discovered

	var _arg0 *C.GstDiscoverer     // out
	var _arg1 *C.GstDiscovererInfo // out
	var _arg2 *C.GError            // out

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))
	_arg1 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))
	if err != nil {
		_arg2 = (*C.GError)(gerror.New(err))
	}

	C._gotk4_gstpbutils1_Discoverer_virtual_discovered(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(discoverer)
	runtime.KeepAlive(info)
	runtime.KeepAlive(err)
}

func (discoverer *Discoverer) finished() {
	gclass := (*C.GstDiscovererClass)(coreglib.PeekParentClass(discoverer))
	fnarg := gclass.finished

	var _arg0 *C.GstDiscoverer // out

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))

	C._gotk4_gstpbutils1_Discoverer_virtual_finished(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(discoverer)
}

// The function takes the following parameters:
//
func (discoverer *Discoverer) sourceSetup(source gst.Elementer) {
	gclass := (*C.GstDiscovererClass)(coreglib.PeekParentClass(discoverer))
	fnarg := gclass.source_setup

	var _arg0 *C.GstDiscoverer // out
	var _arg1 *C.GstElement    // out

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))
	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(source).Native()))

	C._gotk4_gstpbutils1_Discoverer_virtual_source_setup(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(discoverer)
	runtime.KeepAlive(source)
}

func (discoverer *Discoverer) starting() {
	gclass := (*C.GstDiscovererClass)(coreglib.PeekParentClass(discoverer))
	fnarg := gclass.starting

	var _arg0 *C.GstDiscoverer // out

	_arg0 = (*C.GstDiscoverer)(unsafe.Pointer(coreglib.InternObject(discoverer).Native()))

	C._gotk4_gstpbutils1_Discoverer_virtual_starting(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(discoverer)
}

// DiscovererAudioInfo specific to audio streams.
type DiscovererAudioInfo struct {
	_ [0]func() // equal guard
	DiscovererStreamInfo
}

var (
	_ coreglib.Objector = (*DiscovererAudioInfo)(nil)
)

func wrapDiscovererAudioInfo(obj *coreglib.Object) *DiscovererAudioInfo {
	return &DiscovererAudioInfo{
		DiscovererStreamInfo: DiscovererStreamInfo{
			Object: obj,
		},
	}
}

func marshalDiscovererAudioInfo(p uintptr) (interface{}, error) {
	return wrapDiscovererAudioInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - guint: average or nominal bitrate of the stream in bits/second.
//
func (info *DiscovererAudioInfo) Bitrate() uint {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_bitrate(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint64: channel-mask of the stream, refer to
//      gst_audio_channel_positions_from_mask() for more information.
//
func (info *DiscovererAudioInfo) ChannelMask() uint64 {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret C.guint64                 // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_channel_mask(_arg0)
	runtime.KeepAlive(info)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// The function returns the following values:
//
//    - guint: number of channels in the stream.
//
func (info *DiscovererAudioInfo) Channels() uint {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_channels(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: number of bits used per sample in each channel.
//
func (info *DiscovererAudioInfo) Depth() uint {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_depth(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - utf8: language of the stream, or NULL if unknown.
//
func (info *DiscovererAudioInfo) Language() string {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_language(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - guint: maximum bitrate of the stream in bits/second.
//
func (info *DiscovererAudioInfo) MaxBitrate() uint {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_max_bitrate(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: sample rate of the stream in Hertz.
//
func (info *DiscovererAudioInfo) SampleRate() uint {
	var _arg0 *C.GstDiscovererAudioInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererAudioInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_audio_info_get_sample_rate(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// DiscovererContainerInfo specific to container streams.
type DiscovererContainerInfo struct {
	_ [0]func() // equal guard
	DiscovererStreamInfo
}

var (
	_ coreglib.Objector = (*DiscovererContainerInfo)(nil)
)

func wrapDiscovererContainerInfo(obj *coreglib.Object) *DiscovererContainerInfo {
	return &DiscovererContainerInfo{
		DiscovererStreamInfo: DiscovererStreamInfo{
			Object: obj,
		},
	}
}

func marshalDiscovererContainerInfo(p uintptr) (interface{}, error) {
	return wrapDiscovererContainerInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - list of DiscovererStreamInfo this container stream offers. Free with
//      gst_discoverer_stream_info_list_free() after usage.
//
func (info *DiscovererContainerInfo) Streams() []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererContainerInfo // out
	var _cret *C.GList                      // in

	_arg0 = (*C.GstDiscovererContainerInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_container_info_get_streams(_arg0)
	runtime.KeepAlive(info)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// DiscovererInfo: structure containing the information of a URI analyzed by
// Discoverer.
type DiscovererInfo struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DiscovererInfo)(nil)
)

func wrapDiscovererInfo(obj *coreglib.Object) *DiscovererInfo {
	return &DiscovererInfo{
		Object: obj,
	}
}

func marshalDiscovererInfo(p uintptr) (interface{}, error) {
	return wrapDiscovererInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - discovererInfo: copy of the DiscovererInfo.
//
func (ptr *DiscovererInfo) Copy() *DiscovererInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GstDiscovererInfo // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(ptr).Native()))

	_cret = C.gst_discoverer_info_copy(_arg0)
	runtime.KeepAlive(ptr)

	var _discovererInfo *DiscovererInfo // out

	_discovererInfo = wrapDiscovererInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _discovererInfo
}

// AudioStreams finds all the DiscovererAudioInfo contained in info.
//
// The function returns the following values:
//
//    - list of matching DiscovererStreamInfo. The caller should free it with
//      gst_discoverer_stream_info_list_free().
//
func (info *DiscovererInfo) AudioStreams() []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_audio_streams(_arg0)
	runtime.KeepAlive(info)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// ContainerStreams finds all the DiscovererContainerInfo contained in info.
//
// The function returns the following values:
//
//    - list of matching DiscovererStreamInfo. The caller should free it with
//      gst_discoverer_stream_info_list_free().
//
func (info *DiscovererInfo) ContainerStreams() []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_container_streams(_arg0)
	runtime.KeepAlive(info)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// The function returns the following values:
//
//    - clockTime: duration of the URI in ClockTime (nanoseconds).
//
func (info *DiscovererInfo) Duration() gst.ClockTime {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret C.GstClockTime       // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_duration(_arg0)
	runtime.KeepAlive(info)

	var _clockTime gst.ClockTime // out

	_clockTime = uint64(_cret)
	type _ = gst.ClockTime
	type _ = uint64

	return _clockTime
}

// The function returns the following values:
//
//    - ok: whether the URI is live.
//
func (info *DiscovererInfo) Live() bool {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_live(_arg0)
	runtime.KeepAlive(info)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Misc: deprecated: This functions is deprecated since version 1.4, use
// #gst_discoverer_info_get_missing_elements_installer_details.
//
// The function returns the following values:
//
//    - structure miscellaneous information stored as a Structure (for example:
//      information about missing plugins). If you wish to use the Structure
//      after the life-time of info, you will need to copy it.
//
func (info *DiscovererInfo) Misc() *gst.Structure {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GstStructure      // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_misc(_arg0)
	runtime.KeepAlive(info)

	var _structure *gst.Structure // out

	_structure = (*gst.Structure)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _structure
}

// MissingElementsInstallerDetails: get the installer details for missing
// elements.
//
// The function returns the following values:
//
//    - utf8s: array of strings containing information about how to install the
//      various missing elements for info to be usable. If you wish to use the
//      strings after the life-time of info, you will need to copy them.
//
func (info *DiscovererInfo) MissingElementsInstallerDetails() []string {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret **C.gchar            // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_missing_elements_installer_details(_arg0)
	runtime.KeepAlive(info)

	var _utf8s []string // out

	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
		}
	}

	return _utf8s
}

// The function returns the following values:
//
//    - discovererResult: result of the discovery as a DiscovererResult.
//
func (info *DiscovererInfo) Result() DiscovererResult {
	var _arg0 *C.GstDiscovererInfo  // out
	var _cret C.GstDiscovererResult // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_result(_arg0)
	runtime.KeepAlive(info)

	var _discovererResult DiscovererResult // out

	_discovererResult = DiscovererResult(_cret)

	return _discovererResult
}

// The function returns the following values:
//
//    - ok: whether the URI is seekable.
//
func (info *DiscovererInfo) Seekable() bool {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_seekable(_arg0)
	runtime.KeepAlive(info)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//    - discovererStreamInfo: structure (or topology) of the URI as a
//      DiscovererStreamInfo. This structure can be traversed to see the original
//      hierarchy. Unref with gst_discoverer_stream_info_unref() after usage.
//
func (info *DiscovererInfo) StreamInfo() *DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo       // out
	var _cret *C.GstDiscovererStreamInfo // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_stream_info(_arg0)
	runtime.KeepAlive(info)

	var _discovererStreamInfo *DiscovererStreamInfo // out

	_discovererStreamInfo = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _discovererStreamInfo
}

// The function returns the following values:
//
//    - list of all streams contained in the #info. Free after usage with
//      gst_discoverer_stream_info_list_free().
//
func (info *DiscovererInfo) StreamList() []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_stream_list(_arg0)
	runtime.KeepAlive(info)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// Streams finds the DiscovererStreamInfo contained in info that match the given
// streamtype.
//
// The function takes the following parameters:
//
//    - streamtype derived from DiscovererStreamInfo.
//
// The function returns the following values:
//
//    - list of matching DiscovererStreamInfo. The caller should free it with
//      gst_discoverer_stream_info_list_free().
//
func (info *DiscovererInfo) Streams(streamtype coreglib.Type) []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _arg1 C.GType              // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))
	_arg1 = C.GType(streamtype)

	_cret = C.gst_discoverer_info_get_streams(_arg0, _arg1)
	runtime.KeepAlive(info)
	runtime.KeepAlive(streamtype)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// SubtitleStreams finds all the DiscovererSubtitleInfo contained in info.
//
// The function returns the following values:
//
//    - list of matching DiscovererStreamInfo. The caller should free it with
//      gst_discoverer_stream_info_list_free().
//
func (info *DiscovererInfo) SubtitleStreams() []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_subtitle_streams(_arg0)
	runtime.KeepAlive(info)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// The function returns the following values:
//
//    - toc: TOC contained in the URI. If you wish to use the TOC after the
//      life-time of info, you will need to copy it.
//
func (info *DiscovererInfo) Toc() *gst.Toc {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GstToc            // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_toc(_arg0)
	runtime.KeepAlive(info)

	var _toc *gst.Toc // out

	_toc = (*gst.Toc)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _toc
}

// The function returns the following values:
//
//    - utf8: URI to which this information corresponds to. Copy it if you wish
//      to use it after the life-time of info.
//
func (info *DiscovererInfo) URI() string {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.gchar             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_uri(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// VideoStreams finds all the DiscovererVideoInfo contained in info.
//
// The function returns the following values:
//
//    - list of matching DiscovererStreamInfo. The caller should free it with
//      gst_discoverer_stream_info_list_free().
//
func (info *DiscovererInfo) VideoStreams() []*DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererInfo // out
	var _cret *C.GList             // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_info_get_video_streams(_arg0)
	runtime.KeepAlive(info)

	var _list []*DiscovererStreamInfo // out

	_list = make([]*DiscovererStreamInfo, 0, gextras.ListSize(unsafe.Pointer(_cret)))
	gextras.MoveList(unsafe.Pointer(_cret), true, func(v unsafe.Pointer) {
		src := (*C.GstDiscovererStreamInfo)(v)
		var dst *DiscovererStreamInfo // out
		dst = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(src)))
		_list = append(_list, dst)
	})

	return _list
}

// ToVariant serializes info to a #GVariant that can be parsed again through
// gst_discoverer_info_from_variant().
//
// Note that any Toc (s) that might have been discovered will not be serialized
// for now.
//
// The function takes the following parameters:
//
//    - flags: combination of DiscovererSerializeFlags to specify what needs to
//      be serialized.
//
// The function returns the following values:
//
//    - variant: newly-allocated #GVariant representing info.
//
func (info *DiscovererInfo) ToVariant(flags DiscovererSerializeFlags) *glib.Variant {
	var _arg0 *C.GstDiscovererInfo          // out
	var _arg1 C.GstDiscovererSerializeFlags // out
	var _cret *C.GVariant                   // in

	_arg0 = (*C.GstDiscovererInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))
	_arg1 = C.GstDiscovererSerializeFlags(flags)

	_cret = C.gst_discoverer_info_to_variant(_arg0, _arg1)
	runtime.KeepAlive(info)
	runtime.KeepAlive(flags)

	var _variant *glib.Variant // out

	_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_variant)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_variant_unref((*C.GVariant)(intern.C))
		},
	)

	return _variant
}

// DiscovererStreamInfo: base structure for information concerning a media
// stream. Depending on the stream type, one can find more media-specific
// information in DiscovererAudioInfo, DiscovererVideoInfo, and
// DiscovererContainerInfo.
//
// The DiscovererStreamInfo represents the topology of the stream. Siblings can
// be iterated over with gst_discoverer_stream_info_get_next() and
// gst_discoverer_stream_info_get_previous(). Children (sub-streams) of a stream
// can be accessed using the DiscovererContainerInfo API.
//
// As a simple example, if you run Discoverer on an AVI file with one audio and
// one video stream, you will get a DiscovererContainerInfo corresponding to the
// AVI container, which in turn will have a DiscovererAudioInfo sub-stream and a
// DiscovererVideoInfo sub-stream for the audio and video streams respectively.
type DiscovererStreamInfo struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DiscovererStreamInfo)(nil)
)

func wrapDiscovererStreamInfo(obj *coreglib.Object) *DiscovererStreamInfo {
	return &DiscovererStreamInfo{
		Object: obj,
	}
}

func marshalDiscovererStreamInfo(p uintptr) (interface{}, error) {
	return wrapDiscovererStreamInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - caps of the stream. Unref with #gst_caps_unref after usage.
//
func (info *DiscovererStreamInfo) Caps() *gst.Caps {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.GstCaps                 // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_caps(_arg0)
	runtime.KeepAlive(info)

	var _caps *gst.Caps // out

	_caps = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_caps)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _caps
}

// Misc: deprecated: This functions is deprecated since version 1.4, use
// #gst_discoverer_info_get_missing_elements_installer_details.
//
// The function returns the following values:
//
//    - structure: additional information regarding the stream (for example codec
//      version, profile, etc..). If you wish to use the Structure after the
//      life-time of info you will need to copy it.
//
func (info *DiscovererStreamInfo) Misc() *gst.Structure {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.GstStructure            // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_misc(_arg0)
	runtime.KeepAlive(info)

	var _structure *gst.Structure // out

	_structure = (*gst.Structure)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _structure
}

// The function returns the following values:
//
//    - discovererStreamInfo: next DiscovererStreamInfo in a chain. NULL for
//      final streams. Unref with #gst_discoverer_stream_info_unref after usage.
//
func (info *DiscovererStreamInfo) Next() *DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.GstDiscovererStreamInfo // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_next(_arg0)
	runtime.KeepAlive(info)

	var _discovererStreamInfo *DiscovererStreamInfo // out

	_discovererStreamInfo = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _discovererStreamInfo
}

// The function returns the following values:
//
//    - discovererStreamInfo previous DiscovererStreamInfo in a chain. NULL for
//      starting points. Unref with #gst_discoverer_stream_info_unref after
//      usage.
//
func (info *DiscovererStreamInfo) Previous() *DiscovererStreamInfo {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.GstDiscovererStreamInfo // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_previous(_arg0)
	runtime.KeepAlive(info)

	var _discovererStreamInfo *DiscovererStreamInfo // out

	_discovererStreamInfo = wrapDiscovererStreamInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _discovererStreamInfo
}

// The function returns the following values:
//
//    - utf8: stream ID of this stream. If you wish to use the stream ID after
//      the life-time of info you will need to copy it.
//
func (info *DiscovererStreamInfo) StreamID() string {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_stream_id(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - gint: stream number, -1 if no index could be determined. This property
//      acts as a unique identifier as a 'int' for the stream.
//
func (info *DiscovererStreamInfo) StreamNumber() int {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret C.gint                     // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_stream_number(_arg0)
	runtime.KeepAlive(info)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function returns the following values:
//
//    - utf8: human readable name for the stream type of the given info (ex :
//      "audio", "container",...).
//
func (info *DiscovererStreamInfo) StreamTypeNick() string {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_stream_type_nick(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
//    - toc: TOC contained in this stream. If you wish to use the TOC after the
//      life-time of info you will need to copy it.
//
func (info *DiscovererStreamInfo) Toc() *gst.Toc {
	var _arg0 *C.GstDiscovererStreamInfo // out
	var _cret *C.GstToc                  // in

	_arg0 = (*C.GstDiscovererStreamInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_stream_info_get_toc(_arg0)
	runtime.KeepAlive(info)

	var _toc *gst.Toc // out

	_toc = (*gst.Toc)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _toc
}

// DiscovererSubtitleInfo specific to subtitle streams (this includes text and
// image based ones).
type DiscovererSubtitleInfo struct {
	_ [0]func() // equal guard
	DiscovererStreamInfo
}

var (
	_ coreglib.Objector = (*DiscovererSubtitleInfo)(nil)
)

func wrapDiscovererSubtitleInfo(obj *coreglib.Object) *DiscovererSubtitleInfo {
	return &DiscovererSubtitleInfo{
		DiscovererStreamInfo: DiscovererStreamInfo{
			Object: obj,
		},
	}
}

func marshalDiscovererSubtitleInfo(p uintptr) (interface{}, error) {
	return wrapDiscovererSubtitleInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - utf8: language of the stream, or NULL if unknown.
//
func (info *DiscovererSubtitleInfo) Language() string {
	var _arg0 *C.GstDiscovererSubtitleInfo // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.GstDiscovererSubtitleInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_subtitle_info_get_language(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DiscovererVideoInfo specific to video streams (this includes images).
type DiscovererVideoInfo struct {
	_ [0]func() // equal guard
	DiscovererStreamInfo
}

var (
	_ coreglib.Objector = (*DiscovererVideoInfo)(nil)
)

func wrapDiscovererVideoInfo(obj *coreglib.Object) *DiscovererVideoInfo {
	return &DiscovererVideoInfo{
		DiscovererStreamInfo: DiscovererStreamInfo{
			Object: obj,
		},
	}
}

func marshalDiscovererVideoInfo(p uintptr) (interface{}, error) {
	return wrapDiscovererVideoInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - guint: average or nominal bitrate of the video stream in bits/second.
//
func (info *DiscovererVideoInfo) Bitrate() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_bitrate(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: depth in bits of the video stream.
//
func (info *DiscovererVideoInfo) Depth() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_depth(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: framerate of the video stream (denominator).
//
func (info *DiscovererVideoInfo) FramerateDenom() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_framerate_denom(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: framerate of the video stream (numerator).
//
func (info *DiscovererVideoInfo) FramerateNum() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_framerate_num(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: height of the video stream in pixels.
//
func (info *DiscovererVideoInfo) Height() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_height(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: maximum bitrate of the video stream in bits/second.
//
func (info *DiscovererVideoInfo) MaxBitrate() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_max_bitrate(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: pixel Aspect Ratio (PAR) of the video stream (denominator).
//
func (info *DiscovererVideoInfo) ParDenom() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_par_denom(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: pixel Aspect Ratio (PAR) of the video stream (numerator).
//
func (info *DiscovererVideoInfo) ParNum() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_par_num(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - guint: width of the video stream in pixels.
//
func (info *DiscovererVideoInfo) Width() uint {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.guint                   // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_get_width(_arg0)
	runtime.KeepAlive(info)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - ok: TRUE if the video stream corresponds to an image (i.e. only contains
//      one frame).
//
func (info *DiscovererVideoInfo) IsImage() bool {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_is_image(_arg0)
	runtime.KeepAlive(info)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//    - ok: TRUE if the stream is interlaced, else FALSE.
//
func (info *DiscovererVideoInfo) IsInterlaced() bool {
	var _arg0 *C.GstDiscovererVideoInfo // out
	var _cret C.gboolean                // in

	_arg0 = (*C.GstDiscovererVideoInfo)(unsafe.Pointer(coreglib.InternObject(info).Native()))

	_cret = C.gst_discoverer_video_info_is_interlaced(_arg0)
	runtime.KeepAlive(info)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DiscovererClass: instance of this type is always passed by reference.
type DiscovererClass struct {
	*discovererClass
}

// discovererClass is the struct that's finalized.
type discovererClass struct {
	native *C.GstDiscovererClass
}

func (d *DiscovererClass) Reserved() [4]unsafe.Pointer {
	valptr := &d.native._reserved
	var _v [4]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 4; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
