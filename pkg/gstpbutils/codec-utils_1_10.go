// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/pbutils/pbutils.h>
import "C"

// CodecUtilsAacGetChannels returns the channels of the given AAC stream.
//
// The function takes the following parameters:
//
//    - audioConfig: pointer to the AudioSpecificConfig as specified in the
//      Elementary Stream Descriptor (esds) in ISO/IEC 14496-1.
//
// The function returns the following values:
//
//    - guint channels or 0 if the channel could not be determined.
//
func CodecUtilsAacGetChannels(audioConfig []byte) uint {
	var _arg1 *C.guint8 // out
	var _arg2 C.guint
	var _cret C.guint // in

	_arg2 = (C.guint)(len(audioConfig))
	if len(audioConfig) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&audioConfig[0]))
	}

	_cret = C.gst_codec_utils_aac_get_channels(_arg1, _arg2)
	runtime.KeepAlive(audioConfig)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// CodecUtilsAacGetSampleRate translates the sample rate index found in AAC
// headers to the actual sample rate.
//
// The function takes the following parameters:
//
//    - audioConfig: pointer to the AudioSpecificConfig as specified in the
//      Elementary Stream Descriptor (esds) in ISO/IEC 14496-1.
//
// The function returns the following values:
//
//    - guint: sample rate if sr_idx is valid, 0 otherwise.
//
func CodecUtilsAacGetSampleRate(audioConfig []byte) uint {
	var _arg1 *C.guint8 // out
	var _arg2 C.guint
	var _cret C.guint // in

	_arg2 = (C.guint)(len(audioConfig))
	if len(audioConfig) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&audioConfig[0]))
	}

	_cret = C.gst_codec_utils_aac_get_sample_rate(_arg1, _arg2)
	runtime.KeepAlive(audioConfig)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}
