// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/pbutils/pbutils.h>
import "C"

// IsMissingPluginMessage checks whether msg is a missing plugins message.
//
// The function takes the following parameters:
//
//    - msg: Message.
//
// The function returns the following values:
//
//    - ok: TRUE if msg is a missing-plugins message, otherwise FALSE.
//
func IsMissingPluginMessage(msg *gst.Message) bool {
	var _arg1 *C.GstMessage // out
	var _cret C.gboolean    // in

	_arg1 = (*C.GstMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_is_missing_plugin_message(_arg1)
	runtime.KeepAlive(msg)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NewMissingDecoderInstallerDetail returns an opaque string containing all the
// details about the missing element to be passed to an external installer
// called via gst_install_plugins_async() or gst_install_plugins_sync().
//
// This function is mainly for applications that call external plugin
// installation mechanisms using one of the two above-mentioned functions in the
// case where the application knows exactly what kind of plugin it is missing.
//
// The function takes the following parameters:
//
//    - decodeCaps: (fixed) caps for which a decoder element is needed.
//
// The function returns the following values:
//
//    - utf8: newly-allocated detail string, or NULL on error. Free string with
//      g_free() when not needed any longer.
//
func NewMissingDecoderInstallerDetail(decodeCaps *gst.Caps) string {
	var _arg1 *C.GstCaps // out
	var _cret *C.gchar   // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(decodeCaps)))

	_cret = C.gst_missing_decoder_installer_detail_new(_arg1)
	runtime.KeepAlive(decodeCaps)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NewMissingDecoderMessage creates a missing-plugin message for element to
// notify the application that a decoder element for a particular set of (fixed)
// caps is missing. This function is mainly for use in plugins.
//
// The function takes the following parameters:
//
//    - element posting the message.
//    - decodeCaps: (fixed) caps for which a decoder element is needed.
//
// The function returns the following values:
//
//    - message: new Message, or NULL on error.
//
func NewMissingDecoderMessage(element gst.Elementer, decodeCaps *gst.Caps) *gst.Message {
	var _arg1 *C.GstElement // out
	var _arg2 *C.GstCaps    // out
	var _cret *C.GstMessage // in

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg2 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(decodeCaps)))

	_cret = C.gst_missing_decoder_message_new(_arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(decodeCaps)

	var _message *gst.Message // out

	_message = (*gst.Message)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_message)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _message
}

// NewMissingElementInstallerDetail returns an opaque string containing all the
// details about the missing element to be passed to an external installer
// called via gst_install_plugins_async() or gst_install_plugins_sync().
//
// This function is mainly for applications that call external plugin
// installation mechanisms using one of the two above-mentioned functions in the
// case where the application knows exactly what kind of plugin it is missing.
//
// The function takes the following parameters:
//
//    - factoryName: name of the missing element (element factory), e.g.
//      "videoscale" or "cdparanoiasrc".
//
// The function returns the following values:
//
//    - utf8: newly-allocated detail string, or NULL on error. Free string with
//      g_free() when not needed any longer.
//
func NewMissingElementInstallerDetail(factoryName string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(factoryName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_missing_element_installer_detail_new(_arg1)
	runtime.KeepAlive(factoryName)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NewMissingElementMessage creates a missing-plugin message for element to
// notify the application that a certain required element is missing. This
// function is mainly for use in plugins.
//
// The function takes the following parameters:
//
//    - element posting the message.
//    - factoryName: name of the missing element (element factory), e.g.
//      "videoscale" or "cdparanoiasrc".
//
// The function returns the following values:
//
//    - message: new Message, or NULL on error.
//
func NewMissingElementMessage(element gst.Elementer, factoryName string) *gst.Message {
	var _arg1 *C.GstElement // out
	var _arg2 *C.gchar      // out
	var _cret *C.GstMessage // in

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(factoryName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_missing_element_message_new(_arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(factoryName)

	var _message *gst.Message // out

	_message = (*gst.Message)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_message)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _message
}

// NewMissingEncoderInstallerDetail returns an opaque string containing all the
// details about the missing element to be passed to an external installer
// called via gst_install_plugins_async() or gst_install_plugins_sync().
//
// This function is mainly for applications that call external plugin
// installation mechanisms using one of the two above-mentioned functions in the
// case where the application knows exactly what kind of plugin it is missing.
//
// The function takes the following parameters:
//
//    - encodeCaps: (fixed) caps for which an encoder element is needed.
//
// The function returns the following values:
//
//    - utf8: newly-allocated detail string, or NULL on error. Free string with
//      g_free() when not needed any longer.
//
func NewMissingEncoderInstallerDetail(encodeCaps *gst.Caps) string {
	var _arg1 *C.GstCaps // out
	var _cret *C.gchar   // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(encodeCaps)))

	_cret = C.gst_missing_encoder_installer_detail_new(_arg1)
	runtime.KeepAlive(encodeCaps)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NewMissingEncoderMessage creates a missing-plugin message for element to
// notify the application that an encoder element for a particular set of
// (fixed) caps is missing. This function is mainly for use in plugins.
//
// The function takes the following parameters:
//
//    - element posting the message.
//    - encodeCaps: (fixed) caps for which an encoder element is needed.
//
// The function returns the following values:
//
//    - message: new Message, or NULL on error.
//
func NewMissingEncoderMessage(element gst.Elementer, encodeCaps *gst.Caps) *gst.Message {
	var _arg1 *C.GstElement // out
	var _arg2 *C.GstCaps    // out
	var _cret *C.GstMessage // in

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg2 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(encodeCaps)))

	_cret = C.gst_missing_encoder_message_new(_arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(encodeCaps)

	var _message *gst.Message // out

	_message = (*gst.Message)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_message)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _message
}

// MissingPluginMessageGetDescription returns a localised string describing the
// missing feature, for use in error dialogs and the like. Should never return
// NULL unless msg is not a valid missing-plugin message.
//
// This function is mainly for applications that need a human-readable string
// describing a missing plugin, given a previously collected missing-plugin
// message.
//
// The function takes the following parameters:
//
//    - msg: missing-plugin Message of type T_MESSAGE_ELEMENT.
//
// The function returns the following values:
//
//    - utf8: newly-allocated description string, or NULL on error. Free string
//      with g_free() when not needed any longer.
//
func MissingPluginMessageGetDescription(msg *gst.Message) string {
	var _arg1 *C.GstMessage // out
	var _cret *C.gchar      // in

	_arg1 = (*C.GstMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_missing_plugin_message_get_description(_arg1)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// MissingPluginMessageGetInstallerDetail returns an opaque string containing
// all the details about the missing element to be passed to an external
// installer called via gst_install_plugins_async() or
// gst_install_plugins_sync().
//
// This function is mainly for applications that call external plugin
// installation mechanisms using one of the two above-mentioned functions.
//
// The function takes the following parameters:
//
//    - msg: missing-plugin Message of type T_MESSAGE_ELEMENT.
//
// The function returns the following values:
//
//    - utf8: newly-allocated detail string, or NULL on error. Free string with
//      g_free() when not needed any longer.
//
func MissingPluginMessageGetInstallerDetail(msg *gst.Message) string {
	var _arg1 *C.GstMessage // out
	var _cret *C.gchar      // in

	_arg1 = (*C.GstMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_missing_plugin_message_get_installer_detail(_arg1)
	runtime.KeepAlive(msg)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NewMissingURISinkInstallerDetail returns an opaque string containing all the
// details about the missing element to be passed to an external installer
// called via gst_install_plugins_async() or gst_install_plugins_sync().
//
// This function is mainly for applications that call external plugin
// installation mechanisms using one of the two above-mentioned functions in the
// case where the application knows exactly what kind of plugin it is missing.
//
// The function takes the following parameters:
//
//    - protocol: URI protocol the missing source needs to implement, e.g. "http"
//      or "mms".
//
// The function returns the following values:
//
//    - utf8: newly-allocated detail string, or NULL on error. Free string with
//      g_free() when not needed any longer.
//
func NewMissingURISinkInstallerDetail(protocol string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(protocol)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_missing_uri_sink_installer_detail_new(_arg1)
	runtime.KeepAlive(protocol)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NewMissingURISinkMessage creates a missing-plugin message for element to
// notify the application that a sink element for a particular URI protocol is
// missing. This function is mainly for use in plugins.
//
// The function takes the following parameters:
//
//    - element posting the message.
//    - protocol: URI protocol the missing sink needs to implement, e.g. "http"
//      or "smb".
//
// The function returns the following values:
//
//    - message: new Message, or NULL on error.
//
func NewMissingURISinkMessage(element gst.Elementer, protocol string) *gst.Message {
	var _arg1 *C.GstElement // out
	var _arg2 *C.gchar      // out
	var _cret *C.GstMessage // in

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(protocol)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_missing_uri_sink_message_new(_arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(protocol)

	var _message *gst.Message // out

	_message = (*gst.Message)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_message)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _message
}

// NewMissingURISourceInstallerDetail returns an opaque string containing all
// the details about the missing element to be passed to an external installer
// called via gst_install_plugins_async() or gst_install_plugins_sync().
//
// This function is mainly for applications that call external plugin
// installation mechanisms using one of the two above-mentioned functions in the
// case where the application knows exactly what kind of plugin it is missing.
//
// The function takes the following parameters:
//
//    - protocol: URI protocol the missing source needs to implement, e.g. "http"
//      or "mms".
//
// The function returns the following values:
//
//    - utf8: newly-allocated detail string, or NULL on error. Free string with
//      g_free() when not needed any longer.
//
func NewMissingURISourceInstallerDetail(protocol string) string {
	var _arg1 *C.gchar // out
	var _cret *C.gchar // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(protocol)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_missing_uri_source_installer_detail_new(_arg1)
	runtime.KeepAlive(protocol)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NewMissingURISourceMessage creates a missing-plugin message for element to
// notify the application that a source element for a particular URI protocol is
// missing. This function is mainly for use in plugins.
//
// The function takes the following parameters:
//
//    - element posting the message.
//    - protocol: URI protocol the missing source needs to implement, e.g. "http"
//      or "mms".
//
// The function returns the following values:
//
//    - message: new Message, or NULL on error.
//
func NewMissingURISourceMessage(element gst.Elementer, protocol string) *gst.Message {
	var _arg1 *C.GstElement // out
	var _arg2 *C.gchar      // out
	var _cret *C.GstMessage // in

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(protocol)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_missing_uri_source_message_new(_arg1, _arg2)
	runtime.KeepAlive(element)
	runtime.KeepAlive(protocol)

	var _message *gst.Message // out

	_message = (*gst.Message)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_message)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _message
}
