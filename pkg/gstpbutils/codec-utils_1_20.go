// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/pbutils/pbutils.h>
import "C"

// CodecUtilsCapsGetMIMECodec converts caps to a RFC 6381 compatible codec
// string if possible.
//
// Useful for providing the 'codecs' field inside the 'Content-Type' HTTP header
// for containerized formats, such as mp4 or matroska.
//
// Registered codecs can be found at http://mp4ra.org/#/codecs.
//
// The function takes the following parameters:
//
//    - caps to convert to mime codec.
//
// The function returns the following values:
//
//    - utf8 (optional): RFC 6381 compatible codec string or NULL.
//
func CodecUtilsCapsGetMIMECodec(caps *gst.Caps) string {
	var _arg1 *C.GstCaps // out
	var _cret *C.gchar   // in

	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C.gst_codec_utils_caps_get_mime_codec(_arg1)
	runtime.KeepAlive(caps)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// CodecUtilsH264GetProfileFlagsLevel parses profile, flags, and level from a
// H264 AVCC extradata/sequence_header. These are most commonly retrieved from a
// video/x-h264 caps with a codec_data buffer.
//
// The format of H264 AVCC extradata/sequence_header is documented in the ITU-T
// H.264 specification section 7.3.2.1.1 as well as in ISO/IEC 14496-15 section
// 5.3.3.1.2.
//
// The function takes the following parameters:
//
//    - codecData: h264 AVCC extradata.
//
// The function returns the following values:
//
//    - profile (optional): return location for h264 profile_idc or NULL.
//    - flags (optional): return location for h264 constraint set flags or NULL.
//    - level (optional): return location h264 level_idc or NULL.
//    - ok: TRUE on success, FALSE on failure.
//
func CodecUtilsH264GetProfileFlagsLevel(codecData []byte) (profile, flags, level byte, ok bool) {
	var _arg1 *C.guint8 // out
	var _arg2 C.guint
	var _arg3 C.guint8   // in
	var _arg4 C.guint8   // in
	var _arg5 C.guint8   // in
	var _cret C.gboolean // in

	_arg2 = (C.guint)(len(codecData))
	if len(codecData) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&codecData[0]))
	}

	_cret = C.gst_codec_utils_h264_get_profile_flags_level(_arg1, _arg2, &_arg3, &_arg4, &_arg5)
	runtime.KeepAlive(codecData)

	var _profile byte // out
	var _flags byte   // out
	var _level byte   // out
	var _ok bool      // out

	_profile = byte(_arg3)
	_flags = byte(_arg4)
	_level = byte(_arg5)
	if _cret != 0 {
		_ok = true
	}

	return _profile, _flags, _level, _ok
}
