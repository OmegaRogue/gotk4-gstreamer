// Code generated by girgen. DO NOT EDIT.

package gstpbutils

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/pbutils/pbutils.h>
import "C"

// GType values.
var (
	GTypeDiscovererSerializeFlags = coreglib.Type(C.gst_discoverer_serialize_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDiscovererSerializeFlags, F: marshalDiscovererSerializeFlags},
	})
}

// DiscovererSerializeFlags: you can use these flags to control what is
// serialized by gst_discoverer_info_to_variant().
type DiscovererSerializeFlags C.guint

const (
	// DiscovererSerializeBasic: serialize only basic information, excluding
	// caps, tags and miscellaneous information.
	DiscovererSerializeBasic DiscovererSerializeFlags = 0b0
	// DiscovererSerializeCaps: serialize the caps for each stream.
	DiscovererSerializeCaps DiscovererSerializeFlags = 0b1
	// DiscovererSerializeTags: serialize the tags for each stream.
	DiscovererSerializeTags DiscovererSerializeFlags = 0b10
	// DiscovererSerializeMisc: serialize miscellaneous information for each
	// stream.
	DiscovererSerializeMisc DiscovererSerializeFlags = 0b100
	// DiscovererSerializeAll: serialize all the available info, including caps,
	// tags and miscellaneous information.
	DiscovererSerializeAll DiscovererSerializeFlags = 0b111
)

func marshalDiscovererSerializeFlags(p uintptr) (interface{}, error) {
	return DiscovererSerializeFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for DiscovererSerializeFlags.
func (d DiscovererSerializeFlags) String() string {
	if d == 0 {
		return "DiscovererSerializeFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(119)

	for d != 0 {
		next := d & (d - 1)
		bit := d - next

		switch bit {
		case DiscovererSerializeBasic:
			builder.WriteString("Basic|")
		case DiscovererSerializeCaps:
			builder.WriteString("Caps|")
		case DiscovererSerializeTags:
			builder.WriteString("Tags|")
		case DiscovererSerializeMisc:
			builder.WriteString("Misc|")
		case DiscovererSerializeAll:
			builder.WriteString("All|")
		default:
			builder.WriteString(fmt.Sprintf("DiscovererSerializeFlags(0b%b)|", bit))
		}

		d = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if d contains other.
func (d DiscovererSerializeFlags) Has(other DiscovererSerializeFlags) bool {
	return (d & other) == other
}

// DiscovererInfoFromVariant parses a #GVariant as produced by
// gst_discoverer_info_to_variant() back to a DiscovererInfo.
//
// The function takes the following parameters:
//
//    - variant to deserialize into a DiscovererInfo.
//
// The function returns the following values:
//
//    - discovererInfo: newly-allocated DiscovererInfo.
//
func DiscovererInfoFromVariant(variant *glib.Variant) *DiscovererInfo {
	var _arg1 *C.GVariant          // out
	var _cret *C.GstDiscovererInfo // in

	_arg1 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(variant)))

	_cret = C.gst_discoverer_info_from_variant(_arg1)
	runtime.KeepAlive(variant)

	var _discovererInfo *DiscovererInfo // out

	_discovererInfo = wrapDiscovererInfo(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _discovererInfo
}
