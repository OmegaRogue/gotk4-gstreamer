// Code generated by girgen. DO NOT EDIT.

package gsttag

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/tag/tag.h>
import "C"

// GType values.
var (
	GTypeTagXmpWriter = coreglib.Type(C.gst_tag_xmp_writer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTagXmpWriter, F: marshalTagXmpWriter},
	})
}

// TagXmpWriterOverrider contains methods that are overridable.
type TagXmpWriterOverrider interface {
}

// TagXmpWriter: this interface is implemented by elements that are able to do
// XMP serialization. Examples for such elements are #jifmux and #qtmux.
//
// Applications can use this interface to configure which XMP schemas should be
// used when serializing tags into XMP. Schemas are represented by their names,
// a full list of the supported schemas can be obtained from
// gst_tag_xmp_list_schemas(). By default, all schemas are used.
//
// TagXmpWriter wraps an interface. This means the user can get the
// underlying type by calling Cast().
type TagXmpWriter struct {
	_ [0]func() // equal guard
	gst.Element
}

var (
	_ gst.Elementer = (*TagXmpWriter)(nil)
)

// TagXmpWriterer describes TagXmpWriter's interface methods.
type TagXmpWriterer interface {
	coreglib.Objector

	// AddAllSchemas adds all available XMP schemas to the configuration.
	AddAllSchemas()
	// AddSchema adds schema to the list schemas.
	AddSchema(schema string)
	// HasSchema checks if schema is going to be used.
	HasSchema(schema string) bool
	// RemoveAllSchemas removes all schemas from the list of schemas to use.
	RemoveAllSchemas()
	// RemoveSchema removes a schema from the list of schemas to use.
	RemoveSchema(schema string)
}

var _ TagXmpWriterer = (*TagXmpWriter)(nil)

func ifaceInitTagXmpWriterer(gifacePtr, data C.gpointer) {
}

func wrapTagXmpWriter(obj *coreglib.Object) *TagXmpWriter {
	return &TagXmpWriter{
		Element: gst.Element{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalTagXmpWriter(p uintptr) (interface{}, error) {
	return wrapTagXmpWriter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddAllSchemas adds all available XMP schemas to the configuration. Meaning
// that all will be used.
func (config *TagXmpWriter) AddAllSchemas() {
	var _arg0 *C.GstTagXmpWriter // out

	_arg0 = (*C.GstTagXmpWriter)(unsafe.Pointer(coreglib.InternObject(config).Native()))

	C.gst_tag_xmp_writer_add_all_schemas(_arg0)
	runtime.KeepAlive(config)
}

// AddSchema adds schema to the list schemas.
//
// The function takes the following parameters:
//
//    - schema to be added.
//
func (config *TagXmpWriter) AddSchema(schema string) {
	var _arg0 *C.GstTagXmpWriter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GstTagXmpWriter)(unsafe.Pointer(coreglib.InternObject(config).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(schema)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gst_tag_xmp_writer_add_schema(_arg0, _arg1)
	runtime.KeepAlive(config)
	runtime.KeepAlive(schema)
}

// HasSchema checks if schema is going to be used.
//
// The function takes the following parameters:
//
//    - schema to test.
//
// The function returns the following values:
//
//    - ok: TRUE if it is going to be used.
//
func (config *TagXmpWriter) HasSchema(schema string) bool {
	var _arg0 *C.GstTagXmpWriter // out
	var _arg1 *C.gchar           // out
	var _cret C.gboolean         // in

	_arg0 = (*C.GstTagXmpWriter)(unsafe.Pointer(coreglib.InternObject(config).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(schema)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_tag_xmp_writer_has_schema(_arg0, _arg1)
	runtime.KeepAlive(config)
	runtime.KeepAlive(schema)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveAllSchemas removes all schemas from the list of schemas to use. Meaning
// that no XMP will be generated.
func (config *TagXmpWriter) RemoveAllSchemas() {
	var _arg0 *C.GstTagXmpWriter // out

	_arg0 = (*C.GstTagXmpWriter)(unsafe.Pointer(coreglib.InternObject(config).Native()))

	C.gst_tag_xmp_writer_remove_all_schemas(_arg0)
	runtime.KeepAlive(config)
}

// RemoveSchema removes a schema from the list of schemas to use. Nothing is
// done if the schema wasn't in the list.
//
// The function takes the following parameters:
//
//    - schema to remove.
//
func (config *TagXmpWriter) RemoveSchema(schema string) {
	var _arg0 *C.GstTagXmpWriter // out
	var _arg1 *C.gchar           // out

	_arg0 = (*C.GstTagXmpWriter)(unsafe.Pointer(coreglib.InternObject(config).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(schema)))
	defer C.free(unsafe.Pointer(_arg1))

	C.gst_tag_xmp_writer_remove_schema(_arg0, _arg1)
	runtime.KeepAlive(config)
	runtime.KeepAlive(schema)
}

// TagXmpWriterInterface: instance of this type is always passed by reference.
type TagXmpWriterInterface struct {
	*tagXmpWriterInterface
}

// tagXmpWriterInterface is the struct that's finalized.
type tagXmpWriterInterface struct {
	native *C.GstTagXmpWriterInterface
}
