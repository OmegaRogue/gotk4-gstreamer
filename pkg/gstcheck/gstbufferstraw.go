// Code generated by girgen. DO NOT EDIT.

package gstcheck

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/check/check.h>
import "C"

// BufferStrawGetBuffer: get one buffer from pad. Implemented via buffer probes.
// This function will block until the pipeline passes a buffer over pad, so for
// robust behavior in unit tests, you need to use check's timeout to fail out in
// the case that a buffer never arrives.
//
// You must have previously called gst_buffer_straw_start_pipeline() on pipeline
// and pad.
//
// The function takes the following parameters:
//
//    - bin: pipeline previously started via gst_buffer_straw_start_pipeline().
//    - pad previously passed to gst_buffer_straw_start_pipeline().
//
// The function returns the following values:
//
//    - buffer: captured Buffer.
//
func BufferStrawGetBuffer(bin gst.Elementer, pad *gst.Pad) *gst.Buffer {
	var _arg1 *C.GstElement // out
	var _arg2 *C.GstPad     // out
	var _cret *C.GstBuffer  // in

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(bin).Native()))
	_arg2 = (*C.GstPad)(unsafe.Pointer(coreglib.InternObject(pad).Native()))

	_cret = C.gst_buffer_straw_get_buffer(_arg1, _arg2)
	runtime.KeepAlive(bin)
	runtime.KeepAlive(pad)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// BufferStrawStartPipeline sets up a pipeline for buffer sucking. This will
// allow you to call gst_buffer_straw_get_buffer() to access buffers as they
// pass over pad.
//
// This function is normally used in unit tests that want to verify that a
// particular element is outputting correct buffers. For example, you would make
// a pipeline via gst_parse_launch(), pull out the pad you want to monitor, then
// call gst_buffer_straw_get_buffer() to get the buffers that pass through pad.
// The pipeline will block until you have sucked off the buffers.
//
// This function will set the state of bin to PLAYING; to clean up, be sure to
// call gst_buffer_straw_stop_pipeline().
//
// Note that you may not start two buffer straws at the same time. This function
// is intended for unit tests, not general API use. In fact it calls fail_if
// from libcheck, so you cannot use it outside unit tests.
//
// The function takes the following parameters:
//
//    - bin: pipeline to run.
//    - pad on an element in bin.
//
func BufferStrawStartPipeline(bin gst.Elementer, pad *gst.Pad) {
	var _arg1 *C.GstElement // out
	var _arg2 *C.GstPad     // out

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(bin).Native()))
	_arg2 = (*C.GstPad)(unsafe.Pointer(coreglib.InternObject(pad).Native()))

	C.gst_buffer_straw_start_pipeline(_arg1, _arg2)
	runtime.KeepAlive(bin)
	runtime.KeepAlive(pad)
}

// BufferStrawStopPipeline: set bin to T_STATE_NULL and release resource
// allocated in gst_buffer_straw_start_pipeline().
//
// You must have previously called gst_buffer_straw_start_pipeline() on pipeline
// and pad.
//
// The function takes the following parameters:
//
//    - bin: pipeline previously started via gst_buffer_straw_start_pipeline().
//    - pad previously passed to gst_buffer_straw_start_pipeline().
//
func BufferStrawStopPipeline(bin gst.Elementer, pad *gst.Pad) {
	var _arg1 *C.GstElement // out
	var _arg2 *C.GstPad     // out

	_arg1 = (*C.GstElement)(unsafe.Pointer(coreglib.InternObject(bin).Native()))
	_arg2 = (*C.GstPad)(unsafe.Pointer(coreglib.InternObject(pad).Native()))

	C.gst_buffer_straw_stop_pipeline(_arg1, _arg2)
	runtime.KeepAlive(bin)
	runtime.KeepAlive(pad)
}
