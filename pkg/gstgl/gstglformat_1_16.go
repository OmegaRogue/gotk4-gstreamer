// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// The function takes the following parameters:
//
//    - context: GLContext.
//    - format to check is supported by context.
//
// The function returns the following values:
//
//    - ok: whether format is supported by context based on the OpenGL API,
//      version, or available OpenGL extension/s.
//
func GLFormatIsSupported(context GLContexter, format GLFormat) bool {
	var _arg1 *C.GstGLContext // out
	var _arg2 C.GstGLFormat   // out
	var _cret C.gboolean      // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.GstGLFormat(format)

	_cret = C.gst_gl_format_is_supported(_arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(format)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GLFormatTypeFromSizedGLFormat: get the unsized format and type from format
// for usage in glReadPixels, glTex{Sub}Image*, glTexImage* and similar
// functions.
//
// The function takes the following parameters:
//
//    - format: sized internal GLFormat.
//
// The function returns the following values:
//
//    - unsizedFormat: location for the resulting unsized GLFormat.
//    - glType: location for the resulting GL type.
//
func GLFormatTypeFromSizedGLFormat(format GLFormat) (GLFormat, uint) {
	var _arg1 C.GstGLFormat // out
	var _arg2 C.GstGLFormat // in
	var _arg3 C.guint       // in

	_arg1 = C.GstGLFormat(format)

	C.gst_gl_format_type_from_sized_gl_format(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(format)

	var _unsizedFormat GLFormat // out
	var _glType uint            // out

	_unsizedFormat = GLFormat(_arg2)
	_glType = uint(_arg3)

	return _unsizedFormat, _glType
}
