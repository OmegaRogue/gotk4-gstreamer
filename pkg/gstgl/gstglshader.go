// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLShader = coreglib.Type(C.gst_gl_shader_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLShader, F: marshalGLShader},
	})
}

// GLShaderOverrides contains methods that are overridable.
type GLShaderOverrides struct {
}

func defaultGLShaderOverrides(v *GLShader) GLShaderOverrides {
	return GLShaderOverrides{}
}

type GLShader struct {
	_ [0]func() // equal guard
	gst.GstObject
}

var (
	_ gst.GstObjector = (*GLShader)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLShader, *GLShaderClass, GLShaderOverrides](
		GTypeGLShader,
		initGLShaderClass,
		wrapGLShader,
		defaultGLShaderOverrides,
	)
}

func initGLShaderClass(gclass unsafe.Pointer, overrides GLShaderOverrides, classInitFunc func(*GLShaderClass)) {
	if classInitFunc != nil {
		class := (*GLShaderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLShader(obj *coreglib.Object) *GLShader {
	return &GLShader{
		GstObject: gst.GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalGLShader(p uintptr) (interface{}, error) {
	return wrapGLShader(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewGLShader: note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//
// The function returns the following values:
//
//    - glShader: new empty shader.
//
func NewGLShader(context GLContexter) *GLShader {
	var _arg1 *C.GstGLContext // out
	var _cret *C.GstGLShader  // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gst_gl_shader_new(_arg1)
	runtime.KeepAlive(context)

	var _glShader *GLShader // out

	_glShader = wrapGLShader(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _glShader
}

// NewGLShaderDefault: note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//
// The function returns the following values:
//
//    - glShader: default shader or NULL on failure.
//
func NewGLShaderDefault(context GLContexter) (*GLShader, error) {
	var _arg1 *C.GstGLContext // out
	var _cret *C.GstGLShader  // in
	var _cerr *C.GError       // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gst_gl_shader_new_default(_arg1, &_cerr)
	runtime.KeepAlive(context)

	var _glShader *GLShader // out
	var _goerr error        // out

	_glShader = wrapGLShader(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _glShader, _goerr
}

// Attach attaches stage to shader. stage must have been successfully compiled
// with gst_glsl_stage_compile().
//
// Note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - stage to attach.
//
// The function returns the following values:
//
//    - ok: whether stage could be attached to shader.
//
func (shader *GLShader) Attach(stage *GLSLStage) bool {
	var _arg0 *C.GstGLShader  // out
	var _arg1 *C.GstGLSLStage // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	_cret = C.gst_gl_shader_attach(_arg0, _arg1)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(stage)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AttachUnlocked attaches stage to shader. stage must have been successfully
// compiled with gst_glsl_stage_compile().
//
// Note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - stage to attach.
//
// The function returns the following values:
//
//    - ok: whether stage could be attached to shader.
//
func (shader *GLShader) AttachUnlocked(stage *GLSLStage) bool {
	var _arg0 *C.GstGLShader  // out
	var _arg1 *C.GstGLSLStage // out
	var _cret C.gboolean      // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	_cret = C.gst_gl_shader_attach_unlocked(_arg0, _arg1)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(stage)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// BindAttributeLocation: bind attribute name to the specified location index
// using glBindAttributeLocation().
//
// The function takes the following parameters:
//
//    - index: attribute index to set.
//    - name of the attribute.
//
func (shader *GLShader) BindAttributeLocation(index uint, name string) {
	var _arg0 *C.GstGLShader // out
	var _arg1 C.guint        // out
	var _arg2 *C.gchar       // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = C.guint(index)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))

	C.gst_gl_shader_bind_attribute_location(_arg0, _arg1, _arg2)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(index)
	runtime.KeepAlive(name)
}

// BindFragDataLocation: bind attribute name to the specified location index
// using glBindFragDataLocation().
//
// The function takes the following parameters:
//
//    - index: attribute index to set.
//    - name of the attribute.
//
func (shader *GLShader) BindFragDataLocation(index uint, name string) {
	var _arg0 *C.GstGLShader // out
	var _arg1 C.guint        // out
	var _arg2 *C.gchar       // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = C.guint(index)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg2))

	C.gst_gl_shader_bind_frag_data_location(_arg0, _arg1, _arg2)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(index)
	runtime.KeepAlive(name)
}

// CompileAttachStage compiles stage and attaches it to shader.
//
// Note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - stage to attach.
//
func (shader *GLShader) CompileAttachStage(stage *GLSLStage) error {
	var _arg0 *C.GstGLShader  // out
	var _arg1 *C.GstGLSLStage // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	C.gst_gl_shader_compile_attach_stage(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(stage)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Detach detaches stage from shader. stage must have been successfully attached
// to shader with gst_gl_shader_attach() or gst_gl_shader_attach_unlocked().
//
// Note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - stage to attach.
//
func (shader *GLShader) Detach(stage *GLSLStage) {
	var _arg0 *C.GstGLShader  // out
	var _arg1 *C.GstGLSLStage // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	C.gst_gl_shader_detach(_arg0, _arg1)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(stage)
}

// DetachUnlocked detaches stage from shader. stage must have been successfully
// attached to shader with gst_gl_shader_attach() or
// gst_gl_shader_attach_unlocked().
//
// Note: must be called in the GL thread.
//
// The function takes the following parameters:
//
//    - stage to attach.
//
func (shader *GLShader) DetachUnlocked(stage *GLSLStage) {
	var _arg0 *C.GstGLShader  // out
	var _arg1 *C.GstGLSLStage // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	C.gst_gl_shader_detach_unlocked(_arg0, _arg1)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(stage)
}

// The function takes the following parameters:
//
//    - name of the attribute.
//
// The function returns the following values:
//
//    - gint: attribute index for name in shader or -1 on failure.
//
func (shader *GLShader) AttributeLocation(name string) int {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _cret C.gint         // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_gl_shader_get_attribute_location(_arg0, _arg1)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function returns the following values:
//
//    - gint: GL program handle for this shader.
//
func (shader *GLShader) ProgramHandle() int {
	var _arg0 *C.GstGLShader // out
	var _cret C.int          // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))

	_cret = C.gst_gl_shader_get_program_handle(_arg0)
	runtime.KeepAlive(shader)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// IsLinked: note: must be called in the GL thread.
//
// The function returns the following values:
//
//    - ok: whether shader has been successfully linked.
//
func (shader *GLShader) IsLinked() bool {
	var _arg0 *C.GstGLShader // out
	var _cret C.gboolean     // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))

	_cret = C.gst_gl_shader_is_linked(_arg0)
	runtime.KeepAlive(shader)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Link links the current list of GLSLStage's in shader.
//
// Note: must be called in the GL thread.
func (shader *GLShader) Link() error {
	var _arg0 *C.GstGLShader // out
	var _cerr *C.GError      // in

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))

	C.gst_gl_shader_link(_arg0, &_cerr)
	runtime.KeepAlive(shader)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Release releases the shader and stages.
//
// Note: must be called in the GL thread.
func (shader *GLShader) Release() {
	var _arg0 *C.GstGLShader // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))

	C.gst_gl_shader_release(_arg0)
	runtime.KeepAlive(shader)
}

// ReleaseUnlocked releases the shader and stages.
//
// Note: must be called in the GL thread.
func (shader *GLShader) ReleaseUnlocked() {
	var _arg0 *C.GstGLShader // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))

	C.gst_gl_shader_release_unlocked(_arg0)
	runtime.KeepAlive(shader)
}

// SetUniform1F: perform glUniform1f() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value to set.
//
func (shader *GLShader) SetUniform1F(name string, value float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gfloat       // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gfloat(value)

	C.gst_gl_shader_set_uniform_1f(_arg0, _arg1, _arg2)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform1Fv: perform glUniform1fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform1Fv(name string, value []float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gfloat      // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	if len(value) > 0 {
		_arg3 = (*C.gfloat)(unsafe.Pointer(&value[0]))
	}

	C.gst_gl_shader_set_uniform_1fv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform1I: perform glUniform1i() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value to set.
//
func (shader *GLShader) SetUniform1I(name string, value int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(value)

	C.gst_gl_shader_set_uniform_1i(_arg0, _arg1, _arg2)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform1Iv: perform glUniform1iv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform1Iv(name string, value []int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gint        // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	_arg3 = (*C.gint)(C.calloc(C.size_t(len(value)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((*C.gint)(_arg3), len(value))
		for i := range value {
			out[i] = C.gint(value[i])
		}
	}

	C.gst_gl_shader_set_uniform_1iv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform2F: perform glUniform2f() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - v0: first value to set.
//    - v1: second value to set.
//
func (shader *GLShader) SetUniform2F(name string, v0, v1 float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gfloat       // out
	var _arg3 C.gfloat       // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gfloat(v0)
	_arg3 = C.gfloat(v1)

	C.gst_gl_shader_set_uniform_2f(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
}

// SetUniform2Fv: perform glUniform2fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform2Fv(name string, value []float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gfloat      // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	if len(value) > 0 {
		_arg3 = (*C.gfloat)(unsafe.Pointer(&value[0]))
	}

	C.gst_gl_shader_set_uniform_2fv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform2I: perform glUniform2i() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - v0: first value to set.
//    - v1: second value to set.
//
func (shader *GLShader) SetUniform2I(name string, v0, v1 int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gint         // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(v0)
	_arg3 = C.gint(v1)

	C.gst_gl_shader_set_uniform_2i(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
}

// SetUniform2Iv: perform glUniform2iv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform2Iv(name string, value []int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gint        // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	_arg3 = (*C.gint)(C.calloc(C.size_t(len(value)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((*C.gint)(_arg3), len(value))
		for i := range value {
			out[i] = C.gint(value[i])
		}
	}

	C.gst_gl_shader_set_uniform_2iv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform3F: perform glUniform3f() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - v0: first value to set.
//    - v1: second value to set.
//    - v2: third value to set.
//
func (shader *GLShader) SetUniform3F(name string, v0, v1, v2 float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gfloat       // out
	var _arg3 C.gfloat       // out
	var _arg4 C.gfloat       // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gfloat(v0)
	_arg3 = C.gfloat(v1)
	_arg4 = C.gfloat(v2)

	C.gst_gl_shader_set_uniform_3f(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
}

// SetUniform3Fv: perform glUniform3fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform3Fv(name string, value []float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gfloat      // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	if len(value) > 0 {
		_arg3 = (*C.gfloat)(unsafe.Pointer(&value[0]))
	}

	C.gst_gl_shader_set_uniform_3fv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform3I: perform glUniform3i() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - v0: first value to set.
//    - v1: second value to set.
//    - v2: third value to set.
//
func (shader *GLShader) SetUniform3I(name string, v0, v1, v2 int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gint         // out
	var _arg4 C.gint         // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(v0)
	_arg3 = C.gint(v1)
	_arg4 = C.gint(v2)

	C.gst_gl_shader_set_uniform_3i(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
}

// SetUniform3Iv: perform glUniform3iv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform3Iv(name string, value []int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gint        // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	_arg3 = (*C.gint)(C.calloc(C.size_t(len(value)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((*C.gint)(_arg3), len(value))
		for i := range value {
			out[i] = C.gint(value[i])
		}
	}

	C.gst_gl_shader_set_uniform_3iv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform4F: perform glUniform4f() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - v0: first value to set.
//    - v1: second value to set.
//    - v2: third value to set.
//    - v3: fourth value to set.
//
func (shader *GLShader) SetUniform4F(name string, v0, v1, v2, v3 float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gfloat       // out
	var _arg3 C.gfloat       // out
	var _arg4 C.gfloat       // out
	var _arg5 C.gfloat       // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gfloat(v0)
	_arg3 = C.gfloat(v1)
	_arg4 = C.gfloat(v2)
	_arg5 = C.gfloat(v3)

	C.gst_gl_shader_set_uniform_4f(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
	runtime.KeepAlive(v3)
}

// SetUniform4Fv: perform glUniform4fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform4Fv(name string, value []float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gfloat      // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	if len(value) > 0 {
		_arg3 = (*C.gfloat)(unsafe.Pointer(&value[0]))
	}

	C.gst_gl_shader_set_uniform_4fv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniform4I: perform glUniform4i() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - v0: first value to set.
//    - v1: second value to set.
//    - v2: third value to set.
//    - v3: fourth value to set.
//
func (shader *GLShader) SetUniform4I(name string, v0, v1, v2, v3 int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gint         // out
	var _arg4 C.gint         // out
	var _arg5 C.gint         // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(v0)
	_arg3 = C.gint(v1)
	_arg4 = C.gint(v2)
	_arg5 = C.gint(v3)

	C.gst_gl_shader_set_uniform_4i(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(v0)
	runtime.KeepAlive(v1)
	runtime.KeepAlive(v2)
	runtime.KeepAlive(v3)
}

// SetUniform4Iv: perform glUniform4iv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - value values to set.
//
func (shader *GLShader) SetUniform4Iv(name string, value []int) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg3 *C.gint        // out
	var _arg2 C.guint

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (C.guint)(len(value))
	_arg3 = (*C.gint)(C.calloc(C.size_t(len(value)), C.size_t(C.sizeof_gint)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((*C.gint)(_arg3), len(value))
		for i := range value {
			out[i] = C.gint(value[i])
		}
	}

	C.gst_gl_shader_set_uniform_4iv(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)
}

// SetUniformMatrix2Fv: perform glUniformMatrix2fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 2x2 matrices to set.
//    - transpose the matrix.
//    - value: matrix to set.
//
func (shader *GLShader) SetUniformMatrix2Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_2fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix2X3Fv: perform glUniformMatrix2x3fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 2x3 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix2X3Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_2x3fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix2X4Fv: perform glUniformMatrix2x4fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 2x4 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix2X4Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_2x4fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix3Fv: perform glUniformMatrix3fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 3x3 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix3Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_3fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix3X2Fv: perform glUniformMatrix3x2fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 3x2 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix3X2Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_3x2fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix3X4Fv: perform glUniformMatrix3x4fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 3x4 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix3X4Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_3x4fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix4Fv: perform glUniformMatrix4fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 4x4 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix4Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_4fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix4X2Fv: perform glUniformMatrix4x2fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 4x2 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix4X2Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_4x2fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// SetUniformMatrix4X3Fv: perform glUniformMatrix4x3fv() for name on shader.
//
// The function takes the following parameters:
//
//    - name of the uniform.
//    - count: number of 4x3 matrices to set.
//    - transpose the matrix.
//    - value values to set.
//
func (shader *GLShader) SetUniformMatrix4X3Fv(name string, count int, transpose bool, value *float32) {
	var _arg0 *C.GstGLShader // out
	var _arg1 *C.gchar       // out
	var _arg2 C.gint         // out
	var _arg3 C.gboolean     // out
	var _arg4 *C.gfloat      // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(count)
	if transpose {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.gfloat)(unsafe.Pointer(value))

	C.gst_gl_shader_set_uniform_matrix_4x3fv(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(shader)
	runtime.KeepAlive(name)
	runtime.KeepAlive(count)
	runtime.KeepAlive(transpose)
	runtime.KeepAlive(value)
}

// Use mark's shader as being used for the next GL draw command.
//
// Note: must be called in the GL thread and shader must have been linked.
func (shader *GLShader) Use() {
	var _arg0 *C.GstGLShader // out

	_arg0 = (*C.GstGLShader)(unsafe.Pointer(coreglib.InternObject(shader).Native()))

	C.gst_gl_shader_use(_arg0)
	runtime.KeepAlive(shader)
}

// GLShaderClass: instance of this type is always passed by reference.
type GLShaderClass struct {
	*glShaderClass
}

// glShaderClass is the struct that's finalized.
type glShaderClass struct {
	native *C.GstGLShaderClass
}
