// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLSLStage = coreglib.Type(C.gst_glsl_stage_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLSLStage, F: marshalGLSLStage},
	})
}

// GLSLStageOverrides contains methods that are overridable.
type GLSLStageOverrides struct {
}

func defaultGLSLStageOverrides(v *GLSLStage) GLSLStageOverrides {
	return GLSLStageOverrides{}
}

// GLSLStage holds and represents a single OpenGL shader stage.
type GLSLStage struct {
	_ [0]func() // equal guard
	gst.GstObject
}

var (
	_ gst.GstObjector = (*GLSLStage)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLSLStage, *GLSLStageClass, GLSLStageOverrides](
		GTypeGLSLStage,
		initGLSLStageClass,
		wrapGLSLStage,
		defaultGLSLStageOverrides,
	)
}

func initGLSLStageClass(gclass unsafe.Pointer, overrides GLSLStageOverrides, classInitFunc func(*GLSLStageClass)) {
	if classInitFunc != nil {
		class := (*GLSLStageClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLSLStage(obj *coreglib.Object) *GLSLStage {
	return &GLSLStage{
		GstObject: gst.GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalGLSLStage(p uintptr) (interface{}, error) {
	return wrapGLSLStage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//    - context: GLContext.
//    - typ: GL enum shader stage type.
//
// The function returns the following values:
//
//    - glslStage: new GLSLStage of the specified type.
//
func NewGLSLStage(context GLContexter, typ uint) *GLSLStage {
	var _arg1 *C.GstGLContext // out
	var _arg2 C.guint         // out
	var _cret *C.GstGLSLStage // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.guint(typ)

	_cret = C.gst_glsl_stage_new(_arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(typ)

	var _glslStage *GLSLStage // out

	_glslStage = wrapGLSLStage(coreglib.Take(unsafe.Pointer(_cret)))

	return _glslStage
}

// The function takes the following parameters:
//
//    - context: GLContext.
//
// The function returns the following values:
//
//    - glslStage: new GLSLStage with the default fragment shader.
//
func NewGLSLStageDefaultFragment(context GLContexter) *GLSLStage {
	var _arg1 *C.GstGLContext // out
	var _cret *C.GstGLSLStage // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gst_glsl_stage_new_default_fragment(_arg1)
	runtime.KeepAlive(context)

	var _glslStage *GLSLStage // out

	_glslStage = wrapGLSLStage(coreglib.Take(unsafe.Pointer(_cret)))

	return _glslStage
}

// The function takes the following parameters:
//
//    - context: GLContext.
//
// The function returns the following values:
//
//    - glslStage: new GLSLStage with the default vertex shader.
//
func NewGLSLStageDefaultVertex(context GLContexter) *GLSLStage {
	var _arg1 *C.GstGLContext // out
	var _cret *C.GstGLSLStage // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gst_glsl_stage_new_default_vertex(_arg1)
	runtime.KeepAlive(context)

	var _glslStage *GLSLStage // out

	_glslStage = wrapGLSLStage(coreglib.Take(unsafe.Pointer(_cret)))

	return _glslStage
}

// The function takes the following parameters:
//
//    - context: GLContext.
//    - typ: GL enum shader stage type.
//    - version: GLSLVersion.
//    - profile: GLSLProfile.
//    - str: shader string.
//
// The function returns the following values:
//
//    - glslStage: new GLSLStage of the specified type.
//
func NewGLSLStageWithString(context GLContexter, typ uint, version GLSLVersion, profile GLSLProfile, str string) *GLSLStage {
	var _arg1 *C.GstGLContext  // out
	var _arg2 C.guint          // out
	var _arg3 C.GstGLSLVersion // out
	var _arg4 C.GstGLSLProfile // out
	var _arg5 *C.gchar         // out
	var _cret *C.GstGLSLStage  // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.guint(typ)
	_arg3 = C.GstGLSLVersion(version)
	_arg4 = C.GstGLSLProfile(profile)
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg5))

	_cret = C.gst_glsl_stage_new_with_string(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(context)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)
	runtime.KeepAlive(str)

	var _glslStage *GLSLStage // out

	_glslStage = wrapGLSLStage(coreglib.Take(unsafe.Pointer(_cret)))

	return _glslStage
}

// The function takes the following parameters:
//
//    - context: GLContext.
//    - typ: GL enum shader stage type.
//    - version: GLSLVersion.
//    - profile: GLSLProfile.
//    - str: an array of strings concatted together to produce a shader.
//
// The function returns the following values:
//
//    - glslStage: new GLSLStage of the specified type.
//
func NewGLSLStageWithStrings(context GLContexter, typ uint, version GLSLVersion, profile GLSLProfile, str []string) *GLSLStage {
	var _arg1 *C.GstGLContext  // out
	var _arg2 C.guint          // out
	var _arg3 C.GstGLSLVersion // out
	var _arg4 C.GstGLSLProfile // out
	var _arg6 **C.gchar        // out
	var _arg5 C.gint
	var _cret *C.GstGLSLStage // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.guint(typ)
	_arg3 = C.GstGLSLVersion(version)
	_arg4 = C.GstGLSLProfile(profile)
	_arg5 = (C.gint)(len(str))
	_arg6 = (**C.gchar)(C.calloc(C.size_t(len(str)), C.size_t(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg6))
	{
		out := unsafe.Slice((**C.gchar)(_arg6), len(str))
		for i := range str {
			out[i] = (*C.gchar)(unsafe.Pointer(C.CString(str[i])))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_cret = C.gst_glsl_stage_new_with_strings(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6)
	runtime.KeepAlive(context)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)
	runtime.KeepAlive(str)

	var _glslStage *GLSLStage // out

	_glslStage = wrapGLSLStage(coreglib.Take(unsafe.Pointer(_cret)))

	return _glslStage
}

func (stage *GLSLStage) Compile() error {
	var _arg0 *C.GstGLSLStage // out
	var _cerr *C.GError       // in

	_arg0 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	C.gst_glsl_stage_compile(_arg0, &_cerr)
	runtime.KeepAlive(stage)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// The function returns the following values:
//
//    - guint: GL handle for this shader stage.
//
func (stage *GLSLStage) Handle() uint {
	var _arg0 *C.GstGLSLStage // out
	var _cret C.guint         // in

	_arg0 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	_cret = C.gst_glsl_stage_get_handle(_arg0)
	runtime.KeepAlive(stage)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - glslProfile: GLSL profile for the current shader stage.
//
func (stage *GLSLStage) Profile() GLSLProfile {
	var _arg0 *C.GstGLSLStage  // out
	var _cret C.GstGLSLProfile // in

	_arg0 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	_cret = C.gst_glsl_stage_get_profile(_arg0)
	runtime.KeepAlive(stage)

	var _glslProfile GLSLProfile // out

	_glslProfile = GLSLProfile(_cret)

	return _glslProfile
}

// The function returns the following values:
//
//    - guint: GL shader type for this shader stage.
//
func (stage *GLSLStage) ShaderType() uint {
	var _arg0 *C.GstGLSLStage // out
	var _cret C.guint         // in

	_arg0 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	_cret = C.gst_glsl_stage_get_shader_type(_arg0)
	runtime.KeepAlive(stage)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - glslVersion: GLSL version for the current shader stage.
//
func (stage *GLSLStage) Version() GLSLVersion {
	var _arg0 *C.GstGLSLStage  // out
	var _cret C.GstGLSLVersion // in

	_arg0 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))

	_cret = C.gst_glsl_stage_get_version(_arg0)
	runtime.KeepAlive(stage)

	var _glslVersion GLSLVersion // out

	_glslVersion = GLSLVersion(_cret)

	return _glslVersion
}

// SetStrings replaces the current shader string with str.
//
// The function takes the following parameters:
//
//    - version: GLSLVersion.
//    - profile: GLSLProfile.
//    - str: GLSL shader string.
//
// The function returns the following values:
//
func (stage *GLSLStage) SetStrings(version GLSLVersion, profile GLSLProfile, str []string) bool {
	var _arg0 *C.GstGLSLStage  // out
	var _arg1 C.GstGLSLVersion // out
	var _arg2 C.GstGLSLProfile // out
	var _arg4 **C.gchar        // out
	var _arg3 C.gint
	var _cret C.gboolean // in

	_arg0 = (*C.GstGLSLStage)(unsafe.Pointer(coreglib.InternObject(stage).Native()))
	_arg1 = C.GstGLSLVersion(version)
	_arg2 = C.GstGLSLProfile(profile)
	_arg3 = (C.gint)(len(str))
	_arg4 = (**C.gchar)(C.calloc(C.size_t(len(str)), C.size_t(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg4))
	{
		out := unsafe.Slice((**C.gchar)(_arg4), len(str))
		for i := range str {
			out[i] = (*C.gchar)(unsafe.Pointer(C.CString(str[i])))
			defer C.free(unsafe.Pointer(out[i]))
		}
	}

	_cret = C.gst_glsl_stage_set_strings(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(stage)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)
	runtime.KeepAlive(str)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GLSLStageClass: opaque GLSLStageClass struct
//
// An instance of this type is always passed by reference.
type GLSLStageClass struct {
	*glslStageClass
}

// glslStageClass is the struct that's finalized.
type glslStageClass struct {
	native *C.GstGLSLStageClass
}
