// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

type GLAsyncDebugLogGetMessage func() (utf8 string)

// GLAsyncDebug an opaque structure and should only be accessed through the
// provided API.
//
// An instance of this type is always passed by reference.
type GLAsyncDebug struct {
	*glAsyncDebug
}

// glAsyncDebug is the struct that's finalized.
type glAsyncDebug struct {
	native *C.GstGLAsyncDebug
}

// Freeze: freeze the debug output. While frozen, any call to
// gst_gl_async_debug_output_log_msg() will not output any messages but
// subsequent calls to gst_gl_async_debug_store_log_msg() will overwrite
// previous messages.
func (ad *GLAsyncDebug) Freeze() {
	var _arg0 *C.GstGLAsyncDebug // out

	_arg0 = (*C.GstGLAsyncDebug)(gextras.StructNative(unsafe.Pointer(ad)))

	C.gst_gl_async_debug_freeze(_arg0)
	runtime.KeepAlive(ad)
}

// Init: initialize ad. Intended for use with GLAsyncDebug's that are embedded
// in other structs.
func (ad *GLAsyncDebug) Init() {
	var _arg0 *C.GstGLAsyncDebug // out

	_arg0 = (*C.GstGLAsyncDebug)(gextras.StructNative(unsafe.Pointer(ad)))

	C.gst_gl_async_debug_init(_arg0)
	runtime.KeepAlive(ad)
}

// OutputLogMsg outputs a previously stored debug message.
func (ad *GLAsyncDebug) OutputLogMsg() {
	var _arg0 *C.GstGLAsyncDebug // out

	_arg0 = (*C.GstGLAsyncDebug)(gextras.StructNative(unsafe.Pointer(ad)))

	C.gst_gl_async_debug_output_log_msg(_arg0)
	runtime.KeepAlive(ad)
}

// Thaw: unfreeze the debug output. See gst_gl_async_debug_freeze() for what
// freezing means.
func (ad *GLAsyncDebug) Thaw() {
	var _arg0 *C.GstGLAsyncDebug // out

	_arg0 = (*C.GstGLAsyncDebug)(gextras.StructNative(unsafe.Pointer(ad)))

	C.gst_gl_async_debug_thaw(_arg0)
	runtime.KeepAlive(ad)
}

// Unset any dynamically allocated data. Intended for use with GLAsyncDebug's
// that are embedded in other structs.
func (ad *GLAsyncDebug) Unset() {
	var _arg0 *C.GstGLAsyncDebug // out

	_arg0 = (*C.GstGLAsyncDebug)(gextras.StructNative(unsafe.Pointer(ad)))

	C.gst_gl_async_debug_unset(_arg0)
	runtime.KeepAlive(ad)
}
