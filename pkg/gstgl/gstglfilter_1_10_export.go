// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

//export _gotk4_gstgl1_GLFilterRenderFunc
func _gotk4_gstgl1_GLFilterRenderFunc(arg1 *C.GstGLFilter, arg2 *C.GstGLMemory, arg3 C.gpointer) (cret C.gboolean) {
	var fn GLFilterRenderFunc
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(GLFilterRenderFunc)
	}

	var _filter *GLFilter // out
	var _inTex *GLMemory  // out

	_filter = wrapGLFilter(coreglib.Take(unsafe.Pointer(arg1)))
	_inTex = (*GLMemory)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	ok := fn(_filter, _inTex)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
