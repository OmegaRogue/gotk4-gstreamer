// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// BUFFER_POOL_OPTION_GL_SYNC_META: option that can be activated on bufferpools
// to request OpenGL synchronization metadata on buffers from the pool.
const BUFFER_POOL_OPTION_GL_SYNC_META = "GstBufferPoolOptionGLSyncMeta"

// The function returns the following values:
//
func GLSyncMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_gl_sync_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// GLSyncMeta provides the ability to synchronize the OpenGL command stream with
// the CPU or with other OpenGL contexts.
//
// An instance of this type is always passed by reference.
type GLSyncMeta struct {
	*glSyncMeta
}

// glSyncMeta is the struct that's finalized.
type glSyncMeta struct {
	native *C.GstGLSyncMeta
}

// Parent: parent Meta.
func (g *GLSyncMeta) Parent() *gst.Meta {
	valptr := &g.native.parent
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Context used to allocate the meta.
func (g *GLSyncMeta) Context() GLContexter {
	valptr := &g.native.context
	var _v GLContexter // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type gstgl.GLContexter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(GLContexter)
			return ok
		})
		rv, ok := casted.(GLContexter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gstgl.GLContexter")
		}
		_v = rv
	}
	return _v
}

// Data: custom data pointer for the implementation.
func (g *GLSyncMeta) Data() unsafe.Pointer {
	valptr := &g.native.data
	var _v unsafe.Pointer // out
	_v = (unsafe.Pointer)(unsafe.Pointer(*valptr))
	return _v
}

// SetSyncPoint: set a sync point to possibly wait on at a later time.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//
func (syncMeta *GLSyncMeta) SetSyncPoint(context GLContexter) {
	var _arg0 *C.GstGLSyncMeta // out
	var _arg1 *C.GstGLContext  // out

	_arg0 = (*C.GstGLSyncMeta)(gextras.StructNative(unsafe.Pointer(syncMeta)))
	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gst_gl_sync_meta_set_sync_point(_arg0, _arg1)
	runtime.KeepAlive(syncMeta)
	runtime.KeepAlive(context)
}

// Wait: insert a wait into context's command stream ensuring all previous
// OpenGL commands before sync_meta have completed.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//
func (syncMeta *GLSyncMeta) Wait(context GLContexter) {
	var _arg0 *C.GstGLSyncMeta // out
	var _arg1 *C.GstGLContext  // out

	_arg0 = (*C.GstGLSyncMeta)(gextras.StructNative(unsafe.Pointer(syncMeta)))
	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gst_gl_sync_meta_wait(_arg0, _arg1)
	runtime.KeepAlive(syncMeta)
	runtime.KeepAlive(context)
}

// WaitCpu: perform a wait so that the sync point has passed from the CPU's
// perspective What that means, is that all GL operations changing CPU-visible
// data before the sync point are now visible.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//
func (syncMeta *GLSyncMeta) WaitCpu(context GLContexter) {
	var _arg0 *C.GstGLSyncMeta // out
	var _arg1 *C.GstGLContext  // out

	_arg0 = (*C.GstGLSyncMeta)(gextras.StructNative(unsafe.Pointer(syncMeta)))
	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gst_gl_sync_meta_wait_cpu(_arg0, _arg1)
	runtime.KeepAlive(syncMeta)
	runtime.KeepAlive(context)
}

// The function returns the following values:
//
func GLSyncMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_gl_sync_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
