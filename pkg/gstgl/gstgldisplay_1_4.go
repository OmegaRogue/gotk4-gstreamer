// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// The function takes the following parameters:
//
//    - context: Context.
//
// The function returns the following values:
//
//    - display: resulting GLDisplay.
//    - ok: whether display was in context.
//
func ContextGetGLDisplay(context *gst.Context) (*GLDisplay, bool) {
	var _arg1 *C.GstContext   // out
	var _arg2 *C.GstGLDisplay // in
	var _cret C.gboolean      // in

	_arg1 = (*C.GstContext)(gextras.StructNative(unsafe.Pointer(context)))

	_cret = C.gst_context_get_gl_display(_arg1, &_arg2)
	runtime.KeepAlive(context)

	var _display *GLDisplay // out
	var _ok bool            // out

	_display = wrapGLDisplay(coreglib.AssumeOwnership(unsafe.Pointer(_arg2)))
	if _cret != 0 {
		_ok = true
	}

	return _display, _ok
}

// ContextSetGLDisplay sets display on context.
//
// The function takes the following parameters:
//
//    - context: Context.
//    - display: resulting GLDisplay.
//
func ContextSetGLDisplay(context *gst.Context, display *GLDisplay) {
	var _arg1 *C.GstContext   // out
	var _arg2 *C.GstGLDisplay // out

	_arg1 = (*C.GstContext)(gextras.StructNative(unsafe.Pointer(context)))
	_arg2 = (*C.GstGLDisplay)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	C.gst_context_set_gl_display(_arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(display)
}
