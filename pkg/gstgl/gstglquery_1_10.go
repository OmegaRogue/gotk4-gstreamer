// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// GLQuery represents and holds an OpenGL query object. Various types of queries
// can be run or counters retrieved.
//
// An instance of this type is always passed by reference.
type GLQuery struct {
	*glQuery
}

// glQuery is the struct that's finalized.
type glQuery struct {
	native *C.GstGLQuery
}

// Counter: record the result of a counter.
func (query *GLQuery) Counter() {
	var _arg0 *C.GstGLQuery // out

	_arg0 = (*C.GstGLQuery)(gextras.StructNative(unsafe.Pointer(query)))

	C.gst_gl_query_counter(_arg0)
	runtime.KeepAlive(query)
}

// End counting the query.
func (query *GLQuery) End() {
	var _arg0 *C.GstGLQuery // out

	_arg0 = (*C.GstGLQuery)(gextras.StructNative(unsafe.Pointer(query)))

	C.gst_gl_query_end(_arg0)
	runtime.KeepAlive(query)
}

// The function takes the following parameters:
//
//    - context: GLContext.
//    - queryType: GLQueryType.
//
func (query *GLQuery) Init(context GLContexter, queryType GLQueryType) {
	var _arg0 *C.GstGLQuery    // out
	var _arg1 *C.GstGLContext  // out
	var _arg2 C.GstGLQueryType // out

	_arg0 = (*C.GstGLQuery)(gextras.StructNative(unsafe.Pointer(query)))
	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.GstGLQueryType(queryType)

	C.gst_gl_query_init(_arg0, _arg1, _arg2)
	runtime.KeepAlive(query)
	runtime.KeepAlive(context)
	runtime.KeepAlive(queryType)
}

// The function returns the following values:
//
//    - guint64: result of the query.
//
func (query *GLQuery) Result() uint64 {
	var _arg0 *C.GstGLQuery // out
	var _cret C.guint64     // in

	_arg0 = (*C.GstGLQuery)(gextras.StructNative(unsafe.Pointer(query)))

	_cret = C.gst_gl_query_result(_arg0)
	runtime.KeepAlive(query)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Start counting the query.
func (query *GLQuery) Start() {
	var _arg0 *C.GstGLQuery // out

	_arg0 = (*C.GstGLQuery)(gextras.StructNative(unsafe.Pointer(query)))

	C.gst_gl_query_start(_arg0)
	runtime.KeepAlive(query)
}

// Unset: free any dynamically allocated resources.
func (query *GLQuery) Unset() {
	var _arg0 *C.GstGLQuery // out

	_arg0 = (*C.GstGLQuery)(gextras.StructNative(unsafe.Pointer(query)))

	C.gst_gl_query_unset(_arg0)
	runtime.KeepAlive(query)
}
