// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
// extern GstGLBaseMemory* _gotk4_gstgl1_GLBaseMemoryAllocatorClass_alloc(GstGLBaseMemoryAllocator*, GstGLAllocationParams*);
// GstGLBaseMemory* _gotk4_gstgl1_GLBaseMemoryAllocator_virtual_alloc(void* fnptr, GstGLBaseMemoryAllocator* arg0, GstGLAllocationParams* arg1) {
//   return ((GstGLBaseMemory* (*)(GstGLBaseMemoryAllocator*, GstGLAllocationParams*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeGLBaseMemoryAllocator = coreglib.Type(C.gst_gl_base_memory_allocator_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLBaseMemoryAllocator, F: marshalGLBaseMemoryAllocator},
	})
}

// GL_BASE_MEMORY_ALLOCATOR_NAME: name of the GL buffer allocator.
const GL_BASE_MEMORY_ALLOCATOR_NAME = "GLBaseMemory"

// The function takes the following parameters:
//
//    - mem: Memory.
//
// The function returns the following values:
//
//    - ok: whether the memory at mem is a GLBaseMemory.
//
func IsGLBaseMemory(mem *gst.Memory) bool {
	var _arg1 *C.GstMemory // out
	var _cret C.gboolean   // in

	_arg1 = (*C.GstMemory)(gextras.StructNative(unsafe.Pointer(mem)))

	_cret = C.gst_is_gl_base_memory(_arg1)
	runtime.KeepAlive(mem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GLBaseMemoryAllocatorOverrides contains methods that are overridable.
type GLBaseMemoryAllocatorOverrides struct {
	// The function takes the following parameters:
	//
	//    - params to allocate the memory with.
	//
	// The function returns the following values:
	//
	//    - glBaseMemory: newly allocated GLBaseMemory from allocator and params.
	//
	Alloc func(params *GLAllocationParams) *GLBaseMemory
}

func defaultGLBaseMemoryAllocatorOverrides(v *GLBaseMemoryAllocator) GLBaseMemoryAllocatorOverrides {
	return GLBaseMemoryAllocatorOverrides{
		Alloc: v.alloc,
	}
}

// GLBaseMemoryAllocator: opaque GLBaseMemoryAllocator struct.
type GLBaseMemoryAllocator struct {
	_ [0]func() // equal guard
	gst.Allocator
}

var (
	_ gst.Allocatorrer = (*GLBaseMemoryAllocator)(nil)
)

// GLBaseMemoryAllocatorrer describes types inherited from class GLBaseMemoryAllocator.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type GLBaseMemoryAllocatorrer interface {
	coreglib.Objector
	baseGLBaseMemoryAllocator() *GLBaseMemoryAllocator
}

var _ GLBaseMemoryAllocatorrer = (*GLBaseMemoryAllocator)(nil)

func init() {
	coreglib.RegisterClassInfo[*GLBaseMemoryAllocator, *GLBaseMemoryAllocatorClass, GLBaseMemoryAllocatorOverrides](
		GTypeGLBaseMemoryAllocator,
		initGLBaseMemoryAllocatorClass,
		wrapGLBaseMemoryAllocator,
		defaultGLBaseMemoryAllocatorOverrides,
	)
}

func initGLBaseMemoryAllocatorClass(gclass unsafe.Pointer, overrides GLBaseMemoryAllocatorOverrides, classInitFunc func(*GLBaseMemoryAllocatorClass)) {
	pclass := (*C.GstGLBaseMemoryAllocatorClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeGLBaseMemoryAllocator))))

	if overrides.Alloc != nil {
		pclass.alloc = (*[0]byte)(C._gotk4_gstgl1_GLBaseMemoryAllocatorClass_alloc)
	}

	if classInitFunc != nil {
		class := (*GLBaseMemoryAllocatorClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLBaseMemoryAllocator(obj *coreglib.Object) *GLBaseMemoryAllocator {
	return &GLBaseMemoryAllocator{
		Allocator: gst.Allocator{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalGLBaseMemoryAllocator(p uintptr) (interface{}, error) {
	return wrapGLBaseMemoryAllocator(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *GLBaseMemoryAllocator) baseGLBaseMemoryAllocator() *GLBaseMemoryAllocator {
	return v
}

// BaseGLBaseMemoryAllocator returns the underlying base object.
func BaseGLBaseMemoryAllocator(obj GLBaseMemoryAllocatorrer) *GLBaseMemoryAllocator {
	return obj.baseGLBaseMemoryAllocator()
}

// The function takes the following parameters:
//
//    - params to allocate the memory with.
//
// The function returns the following values:
//
//    - glBaseMemory: newly allocated GLBaseMemory from allocator and params.
//
func (allocator *GLBaseMemoryAllocator) alloc(params *GLAllocationParams) *GLBaseMemory {
	gclass := (*C.GstGLBaseMemoryAllocatorClass)(coreglib.PeekParentClass(allocator))
	fnarg := gclass.alloc

	var _arg0 *C.GstGLBaseMemoryAllocator // out
	var _arg1 *C.GstGLAllocationParams    // out
	var _cret *C.GstGLBaseMemory          // in

	_arg0 = (*C.GstGLBaseMemoryAllocator)(unsafe.Pointer(coreglib.InternObject(allocator).Native()))
	_arg1 = (*C.GstGLAllocationParams)(gextras.StructNative(unsafe.Pointer(params)))

	_cret = C._gotk4_gstgl1_GLBaseMemoryAllocator_virtual_alloc(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(allocator)
	runtime.KeepAlive(params)

	var _glBaseMemory *GLBaseMemory // out

	_glBaseMemory = (*GLBaseMemory)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_glBaseMemory)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _glBaseMemory
}

// The function takes the following parameters:
//
//    - allocator: GLBaseMemoryAllocator.
//    - params to allocate the memory with.
//
// The function returns the following values:
//
//    - glBaseMemory: new GLBaseMemory from allocator with the requested params.
//
func GLBaseMemoryAlloc(allocator GLBaseMemoryAllocatorrer, params *GLAllocationParams) *GLBaseMemory {
	var _arg1 *C.GstGLBaseMemoryAllocator // out
	var _arg2 *C.GstGLAllocationParams    // out
	var _cret *C.GstGLBaseMemory          // in

	_arg1 = (*C.GstGLBaseMemoryAllocator)(unsafe.Pointer(coreglib.InternObject(allocator).Native()))
	_arg2 = (*C.GstGLAllocationParams)(gextras.StructNative(unsafe.Pointer(params)))

	_cret = C.gst_gl_base_memory_alloc(_arg1, _arg2)
	runtime.KeepAlive(allocator)
	runtime.KeepAlive(params)

	var _glBaseMemory *GLBaseMemory // out

	_glBaseMemory = (*GLBaseMemory)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_glBaseMemory)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _glBaseMemory
}

// GLBaseMemoryInitOnce initializes the GL Base Memory allocator. It is safe to
// call this function multiple times. This must be called before any other
// GstGLBaseMemory operation.
func GLBaseMemoryInitOnce() {
	C.gst_gl_base_memory_init_once()
}

// GLBaseMemoryAllocatorClass: instance of this type is always passed by
// reference.
type GLBaseMemoryAllocatorClass struct {
	*glBaseMemoryAllocatorClass
}

// glBaseMemoryAllocatorClass is the struct that's finalized.
type glBaseMemoryAllocatorClass struct {
	native *C.GstGLBaseMemoryAllocatorClass
}
