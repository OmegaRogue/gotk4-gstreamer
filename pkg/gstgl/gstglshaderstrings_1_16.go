// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// The function takes the following parameters:
//
//    - context: GLContext.
//    - version: GLSLVersion.
//    - profile: GLSLProfile.
//
// The function returns the following values:
//
//    - utf8: passthrough shader string for copying an input external-oes texture
//      to the output.
//
func GLShaderStringFragmentExternalOesGetDefault(context GLContexter, version GLSLVersion, profile GLSLProfile) string {
	var _arg1 *C.GstGLContext  // out
	var _arg2 C.GstGLSLVersion // out
	var _arg3 C.GstGLSLProfile // out
	var _cret *C.gchar         // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.GstGLSLVersion(version)
	_arg3 = C.GstGLSLProfile(profile)

	_cret = C.gst_gl_shader_string_fragment_external_oes_get_default(_arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// The function takes the following parameters:
//
//    - context: GLContext.
//    - version: GLSLVersion.
//    - profile: GLSLProfile.
//
// The function returns the following values:
//
//    - utf8: passthrough shader string for copying an input texture to the
//      output.
//
func GLShaderStringFragmentGetDefault(context GLContexter, version GLSLVersion, profile GLSLProfile) string {
	var _arg1 *C.GstGLContext  // out
	var _arg2 C.GstGLSLVersion // out
	var _arg3 C.GstGLSLProfile // out
	var _cret *C.gchar         // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.GstGLSLVersion(version)
	_arg3 = C.GstGLSLProfile(profile)

	_cret = C.gst_gl_shader_string_fragment_get_default(_arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// GLShaderStringGetHighestPrecision generates a shader string that defines the
// precision of float types in GLSL shaders. This is particularly needed for
// fragment shaders in a GLSL ES context where there is no default precision
// specified.
//
// Practically, this will return the string 'precision mediump float' or
// 'precision highp float' depending on if high precision floats are determined
// to be supported.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//    - version: GLSLVersion.
//    - profile: GLSLProfile.
//
// The function returns the following values:
//
//    - utf8: shader string defining the precision of float types based on
//      context, version and profile.
//
func GLShaderStringGetHighestPrecision(context GLContexter, version GLSLVersion, profile GLSLProfile) string {
	var _arg1 *C.GstGLContext  // out
	var _arg2 C.GstGLSLVersion // out
	var _arg3 C.GstGLSLProfile // out
	var _cret *C.gchar         // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.GstGLSLVersion(version)
	_arg3 = C.GstGLSLProfile(profile)

	_cret = C.gst_gl_shader_string_get_highest_precision(_arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
