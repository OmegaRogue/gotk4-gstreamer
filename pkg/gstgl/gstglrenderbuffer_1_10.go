// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLRenderbuffer = coreglib.Type(C.gst_gl_renderbuffer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLRenderbuffer, F: marshalGLRenderbuffer},
	})
}

// The function takes the following parameters:
//
//    - mem: Memory.
//
// The function returns the following values:
//
//    - ok: whether the memory at mem is a GLRenderbuffer.
//
func IsGLRenderbuffer(mem *gst.Memory) bool {
	var _arg1 *C.GstMemory // out
	var _cret C.gboolean   // in

	_arg1 = (*C.GstMemory)(gextras.StructNative(unsafe.Pointer(mem)))

	_cret = C.gst_is_gl_renderbuffer(_arg1)
	runtime.KeepAlive(mem)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GLRenderbuffer is a GLBaseMemory subclass providing support for OpenGL
// renderbuffers.
//
// GLRenderbuffer is created or wrapped through gst_gl_base_memory_alloc() with
// GLRenderbufferAllocationParams.
//
// An instance of this type is always passed by reference.
type GLRenderbuffer struct {
	*glRenderbuffer
}

// glRenderbuffer is the struct that's finalized.
type glRenderbuffer struct {
	native *C.GstGLRenderbuffer
}

func marshalGLRenderbuffer(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &GLRenderbuffer{&glRenderbuffer{(*C.GstGLRenderbuffer)(b)}}, nil
}

// RenderbufferID: GL texture id for this memory.
func (g *GLRenderbuffer) RenderbufferID() uint {
	valptr := &g.native.renderbuffer_id
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// RenderbufferFormat: texture type.
func (g *GLRenderbuffer) RenderbufferFormat() GLFormat {
	valptr := &g.native.renderbuffer_format
	var _v GLFormat // out
	_v = GLFormat(*valptr)
	return _v
}

func (g *GLRenderbuffer) RenderbufferWrapped() bool {
	valptr := &g.native.renderbuffer_wrapped
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// RenderbufferID: GL texture id for this memory.
func (g *GLRenderbuffer) SetRenderbufferID(renderbufferId uint) {
	valptr := &g.native.renderbuffer_id
	*valptr = C.guint(renderbufferId)
}

func (g *GLRenderbuffer) SetRenderbufferWrapped(renderbufferWrapped bool) {
	valptr := &g.native.renderbuffer_wrapped
	if renderbufferWrapped {
		*valptr = C.TRUE
	}
}

// The function returns the following values:
//
//    - glFormat of gl_mem.
//
func (glMem *GLRenderbuffer) Format() GLFormat {
	var _arg0 *C.GstGLRenderbuffer // out
	var _cret C.GstGLFormat        // in

	_arg0 = (*C.GstGLRenderbuffer)(gextras.StructNative(unsafe.Pointer(glMem)))

	_cret = C.gst_gl_renderbuffer_get_format(_arg0)
	runtime.KeepAlive(glMem)

	var _glFormat GLFormat // out

	_glFormat = GLFormat(_cret)

	return _glFormat
}

// The function returns the following values:
//
//    - gint: configured height of gl_mem.
//
func (glMem *GLRenderbuffer) Height() int {
	var _arg0 *C.GstGLRenderbuffer // out
	var _cret C.gint               // in

	_arg0 = (*C.GstGLRenderbuffer)(gextras.StructNative(unsafe.Pointer(glMem)))

	_cret = C.gst_gl_renderbuffer_get_height(_arg0)
	runtime.KeepAlive(glMem)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// The function returns the following values:
//
//    - guint: openGL renderbuffer handle of gl_mem.
//
func (glMem *GLRenderbuffer) ID() uint {
	var _arg0 *C.GstGLRenderbuffer // out
	var _cret C.guint              // in

	_arg0 = (*C.GstGLRenderbuffer)(gextras.StructNative(unsafe.Pointer(glMem)))

	_cret = C.gst_gl_renderbuffer_get_id(_arg0)
	runtime.KeepAlive(glMem)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// The function returns the following values:
//
//    - gint: configured width of gl_mem.
//
func (glMem *GLRenderbuffer) Width() int {
	var _arg0 *C.GstGLRenderbuffer // out
	var _cret C.gint               // in

	_arg0 = (*C.GstGLRenderbuffer)(gextras.StructNative(unsafe.Pointer(glMem)))

	_cret = C.gst_gl_renderbuffer_get_width(_arg0)
	runtime.KeepAlive(glMem)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// GLRenderbufferInitOnce initializes the GL Base Texture allocator. It is safe
// to call this function multiple times. This must be called before any other
// GstGLRenderbuffer operation.
func GLRenderbufferInitOnce() {
	C.gst_gl_renderbuffer_init_once()
}
