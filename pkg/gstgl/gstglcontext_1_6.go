// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// GLContextGetCurrent: see also gst_gl_context_activate().
//
// The function returns the following values:
//
//    - glContext active in the current thread or NULL.
//
func GLContextGetCurrent() GLContexter {
	var _cret *C.GstGLContext // in

	_cret = C.gst_gl_context_get_current()

	var _glContext GLContexter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gstgl.GLContexter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(GLContexter)
			return ok
		})
		rv, ok := casted.(GLContexter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gstgl.GLContexter")
		}
		_glContext = rv
	}

	return _glContext
}

// GLContextGetCurrentGLApi: if an error occurs, major and minor are not
// modified and GST_GL_API_NONE is returned.
//
// The function takes the following parameters:
//
//    - platform to retrieve the API for.
//
// The function returns the following values:
//
//    - major (optional) version.
//    - minor (optional) version.
//    - glapI: version supported by the OpenGL context current in the calling
//      thread or GST_GL_API_NONE.
//
func GLContextGetCurrentGLApi(platform GLPlatform) (major, minor uint, glapI GLAPI) {
	var _arg1 C.GstGLPlatform // out
	var _arg2 C.guint         // in
	var _arg3 C.guint         // in
	var _cret C.GstGLAPI      // in

	_arg1 = C.GstGLPlatform(platform)

	_cret = C.gst_gl_context_get_current_gl_api(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(platform)

	var _major uint  // out
	var _minor uint  // out
	var _glapI GLAPI // out

	_major = uint(_arg2)
	_minor = uint(_arg3)
	_glapI = GLAPI(_cret)

	return _major, _minor, _glapI
}

// The function takes the following parameters:
//
//    - contextType specifying the type of context to retrieve.
//
// The function returns the following values:
//
//    - guintptr: openGL context handle current in the calling thread or NULL.
//
func GLContextGetCurrentGLContext(contextType GLPlatform) uintptr {
	var _arg1 C.GstGLPlatform // out
	var _cret C.guintptr      // in

	_arg1 = C.GstGLPlatform(contextType)

	_cret = C.gst_gl_context_get_current_gl_context(_arg1)
	runtime.KeepAlive(contextType)

	var _guintptr uintptr // out

	_guintptr = (uintptr)(unsafe.Pointer(_cret))

	return _guintptr
}

// GLContextGetProcAddressWithPlatform attempts to use the context_type specific
// GetProcAddress implementations to retrieve name.
//
// See also gst_gl_context_get_proc_address().
//
// The function takes the following parameters:
//
//    - contextType: GLPlatform.
//    - glApi: GLAPI.
//    - name of the function to retrieve.
//
// The function returns the following values:
//
//    - gpointer (optional): function pointer for name, or NULL.
//
func GLContextGetProcAddressWithPlatform(contextType GLPlatform, glApi GLAPI, name string) unsafe.Pointer {
	var _arg1 C.GstGLPlatform // out
	var _arg2 C.GstGLAPI      // out
	var _arg3 *C.gchar        // out
	var _cret C.gpointer      // in

	_arg1 = C.GstGLPlatform(contextType)
	_arg2 = C.GstGLAPI(glApi)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gst_gl_context_get_proc_address_with_platform(_arg1, _arg2, _arg3)
	runtime.KeepAlive(contextType)
	runtime.KeepAlive(glApi)
	runtime.KeepAlive(name)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}
