// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLColorConvert = coreglib.Type(C.gst_gl_color_convert_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLColorConvert, F: marshalGLColorConvert},
	})
}

const GL_COLOR_CONVERT_EXT_FORMATS = ", BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE"

// GL_COLOR_CONVERT_FORMATS: currently supported formats that can be converted.
const GL_COLOR_CONVERT_FORMATS = "{ RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12"

// GL_COLOR_CONVERT_VIDEO_CAPS: currently supported Caps that can be converted.
const GL_COLOR_CONVERT_VIDEO_CAPS = "video/x-raw("

// GLColorConvertOverrides contains methods that are overridable.
type GLColorConvertOverrides struct {
}

func defaultGLColorConvertOverrides(v *GLColorConvert) GLColorConvertOverrides {
	return GLColorConvertOverrides{}
}

// GLColorConvert is an object that converts between color spaces and/or formats
// using OpenGL Shaders.
//
// A GLColorConvert can be created with gst_gl_color_convert_new(), the
// configuration negotiated with gst_gl_color_convert_transform_caps() and the
// conversion performed with gst_gl_color_convert_perform().
//
// The glcolorconvertelement provides a GStreamer element that uses
// GLColorConvert to convert between video formats and color spaces.
type GLColorConvert struct {
	_ [0]func() // equal guard
	gst.GstObject
}

var (
	_ gst.GstObjector = (*GLColorConvert)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLColorConvert, *GLColorConvertClass, GLColorConvertOverrides](
		GTypeGLColorConvert,
		initGLColorConvertClass,
		wrapGLColorConvert,
		defaultGLColorConvertOverrides,
	)
}

func initGLColorConvertClass(gclass unsafe.Pointer, overrides GLColorConvertOverrides, classInitFunc func(*GLColorConvertClass)) {
	if classInitFunc != nil {
		class := (*GLColorConvertClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLColorConvert(obj *coreglib.Object) *GLColorConvert {
	return &GLColorConvert{
		GstObject: gst.GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalGLColorConvert(p uintptr) (interface{}, error) {
	return wrapGLColorConvert(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//    - context: GLContext.
//
// The function returns the following values:
//
//    - glColorConvert: new GLColorConvert object.
//
func NewGLColorConvert(context GLContexter) *GLColorConvert {
	var _arg1 *C.GstGLContext      // out
	var _cret *C.GstGLColorConvert // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gst_gl_color_convert_new(_arg1)
	runtime.KeepAlive(context)

	var _glColorConvert *GLColorConvert // out

	_glColorConvert = wrapGLColorConvert(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _glColorConvert
}

// DecideAllocation provides an implementation of
// BaseTransformClass.decide_allocation().
//
// The function takes the following parameters:
//
//    - query: completed ALLOCATION Query.
//
// The function returns the following values:
//
//    - ok: whether the allocation parameters were successfully chosen.
//
func (convert *GLColorConvert) DecideAllocation(query *gst.Query) bool {
	var _arg0 *C.GstGLColorConvert // out
	var _arg1 *C.GstQuery          // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstGLColorConvert)(unsafe.Pointer(coreglib.InternObject(convert).Native()))
	_arg1 = (*C.GstQuery)(gextras.StructNative(unsafe.Pointer(query)))

	_cret = C.gst_gl_color_convert_decide_allocation(_arg0, _arg1)
	runtime.KeepAlive(convert)
	runtime.KeepAlive(query)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Perform converts the data contained by inbuf using the formats specified by
// the Caps passed to gst_gl_color_convert_set_caps().
//
// The function takes the following parameters:
//
//    - inbuf filled Buffer to convert.
//
// The function returns the following values:
//
//    - buffer: converted Buffer or NULL.
//
func (convert *GLColorConvert) Perform(inbuf *gst.Buffer) *gst.Buffer {
	var _arg0 *C.GstGLColorConvert // out
	var _arg1 *C.GstBuffer         // out
	var _cret *C.GstBuffer         // in

	_arg0 = (*C.GstGLColorConvert)(unsafe.Pointer(coreglib.InternObject(convert).Native()))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(inbuf)))

	_cret = C.gst_gl_color_convert_perform(_arg0, _arg1)
	runtime.KeepAlive(convert)
	runtime.KeepAlive(inbuf)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// SetCaps initializes convert with the information required for conversion.
//
// The function takes the following parameters:
//
//    - inCaps: input Caps.
//    - outCaps: output Caps.
//
// The function returns the following values:
//
func (convert *GLColorConvert) SetCaps(inCaps, outCaps *gst.Caps) bool {
	var _arg0 *C.GstGLColorConvert // out
	var _arg1 *C.GstCaps           // out
	var _arg2 *C.GstCaps           // out
	var _cret C.gboolean           // in

	_arg0 = (*C.GstGLColorConvert)(unsafe.Pointer(coreglib.InternObject(convert).Native()))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(inCaps)))
	_arg2 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(outCaps)))

	_cret = C.gst_gl_color_convert_set_caps(_arg0, _arg1, _arg2)
	runtime.KeepAlive(convert)
	runtime.KeepAlive(inCaps)
	runtime.KeepAlive(outCaps)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GLColorConvertClass struct only contains private data
//
// An instance of this type is always passed by reference.
type GLColorConvertClass struct {
	*glColorConvertClass
}

// glColorConvertClass is the struct that's finalized.
type glColorConvertClass struct {
	native *C.GstGLColorConvertClass
}
