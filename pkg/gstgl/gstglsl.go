// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// The function takes the following parameters:
//
//    - str: GLSL version string.
//
// The function returns the following values:
//
//    - glslVersion of string or GST_GLSL_VERSION_NONE on error.
//
func GLSLVersionFromString(str string) GLSLVersion {
	var _arg1 *C.gchar         // out
	var _cret C.GstGLSLVersion // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_glsl_version_from_string(_arg1)
	runtime.KeepAlive(str)

	var _glslVersion GLSLVersion // out

	_glslVersion = GLSLVersion(_cret)

	return _glslVersion
}

// GLSLVersionProfileFromString: note: this function expects either a #version
// GLSL preprocesser directive or a valid GLSL version and/or profile.
//
// The function takes the following parameters:
//
//    - str: valid GLSL #version string.
//
// The function returns the following values:
//
//    - versionRet: resulting GLSLVersion.
//    - profileRet: resulting GLSLVersion.
//    - ok: TRUE if a valid #version string was found, FALSE otherwise.
//
func GLSLVersionProfileFromString(str string) (GLSLVersion, GLSLProfile, bool) {
	var _arg1 *C.gchar         // out
	var _arg2 C.GstGLSLVersion // in
	var _arg3 C.GstGLSLProfile // in
	var _cret C.gboolean       // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_glsl_version_profile_from_string(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(str)

	var _versionRet GLSLVersion // out
	var _profileRet GLSLProfile // out
	var _ok bool                // out

	_versionRet = GLSLVersion(_arg2)
	_profileRet = GLSLProfile(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _versionRet, _profileRet, _ok
}

// The function takes the following parameters:
//
//    - version: GLSLVersion.
//    - profile: GLSLVersion.
//
// The function returns the following values:
//
//    - utf8: combined GLSL #version string for version and profile.
//
func GLSLVersionProfileToString(version GLSLVersion, profile GLSLProfile) string {
	var _arg1 C.GstGLSLVersion // out
	var _arg2 C.GstGLSLProfile // out
	var _cret *C.gchar         // in

	_arg1 = C.GstGLSLVersion(version)
	_arg2 = C.GstGLSLProfile(profile)

	_cret = C.gst_glsl_version_profile_to_string(_arg1, _arg2)
	runtime.KeepAlive(version)
	runtime.KeepAlive(profile)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// The function takes the following parameters:
//
//    - version: GLSLVersion.
//
// The function returns the following values:
//
//    - utf8 (optional): name of version or NULL on error.
//
func GLSLVersionToString(version GLSLVersion) string {
	var _arg1 C.GstGLSLVersion // out
	var _cret *C.gchar         // in

	_arg1 = C.GstGLSLVersion(version)

	_cret = C.gst_glsl_version_to_string(_arg1)
	runtime.KeepAlive(version)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function takes the following parameters:
//
//    - str: GLSL version string.
//
// The function returns the following values:
//
//    - glslProfile of string or GST_GLSL_PROFILE_NONE on error.
//
func GLSLProfileFromString(str string) GLSLProfile {
	var _arg1 *C.gchar         // out
	var _cret C.GstGLSLProfile // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_glsl_profile_from_string(_arg1)
	runtime.KeepAlive(str)

	var _glslProfile GLSLProfile // out

	_glslProfile = GLSLProfile(_cret)

	return _glslProfile
}

// The function takes the following parameters:
//
//    - profile: GLSLProfile.
//
// The function returns the following values:
//
//    - utf8 (optional): name for profile or NULL on error.
//
func GLSLProfileToString(profile GLSLProfile) string {
	var _arg1 C.GstGLSLProfile // out
	var _cret *C.gchar         // in

	_arg1 = C.GstGLSLProfile(profile)

	_cret = C.gst_glsl_profile_to_string(_arg1)
	runtime.KeepAlive(profile)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function takes the following parameters:
//
//    - glApi: GLAPI.
//    - maj: major GL version.
//    - min: minor GL version.
//
// The function returns the following values:
//
//    - glslVersion: minimum supported GLSLVersion available for gl_api, maj and
//      min.
//
func GLVersionToGlslVersion(glApi GLAPI, maj, min int) GLSLVersion {
	var _arg1 C.GstGLAPI       // out
	var _arg2 C.gint           // out
	var _arg3 C.gint           // out
	var _cret C.GstGLSLVersion // in

	_arg1 = C.GstGLAPI(glApi)
	_arg2 = C.gint(maj)
	_arg3 = C.gint(min)

	_cret = C.gst_gl_version_to_glsl_version(_arg1, _arg2, _arg3)
	runtime.KeepAlive(glApi)
	runtime.KeepAlive(maj)
	runtime.KeepAlive(min)

	var _glslVersion GLSLVersion // out

	_glslVersion = GLSLVersion(_cret)

	return _glslVersion
}

// GlslStringGetVersionProfile: note: this function first searches the first 1
// kilobytes for a #version preprocessor directive and then executes
// gst_glsl_version_profile_from_string().
//
// The function takes the following parameters:
//
//    - s: string to search for a valid #version string.
//
// The function returns the following values:
//
//    - version: resulting GLSLVersion.
//    - profile: resulting GLSLProfile.
//    - ok: TRUE if a valid #version string was found, FALSE otherwise.
//
func GlslStringGetVersionProfile(s string) (GLSLVersion, GLSLProfile, bool) {
	var _arg1 *C.gchar         // out
	var _arg2 C.GstGLSLVersion // in
	var _arg3 C.GstGLSLProfile // in
	var _cret C.gboolean       // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(s)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_glsl_string_get_version_profile(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(s)

	var _version GLSLVersion // out
	var _profile GLSLProfile // out
	var _ok bool             // out

	_version = GLSLVersion(_arg2)
	_profile = GLSLProfile(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _version, _profile, _ok
}
