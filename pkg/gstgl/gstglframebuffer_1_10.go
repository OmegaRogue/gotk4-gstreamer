// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLFramebuffer = coreglib.Type(C.gst_gl_framebuffer_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLFramebuffer, F: marshalGLFramebuffer},
	})
}

// GLFramebufferOverrides contains methods that are overridable.
type GLFramebufferOverrides struct {
}

func defaultGLFramebufferOverrides(v *GLFramebuffer) GLFramebufferOverrides {
	return GLFramebufferOverrides{}
}

// GLFramebuffer represents and holds an OpenGL framebuffer object with it's
// associated attachments.
//
// A GLFramebuffer can be created with gst_gl_framebuffer_new() or
// gst_gl_framebuffer_new_with_default_depth() and bound with
// gst_gl_framebuffer_bind(). Other resources can be bound with
// gst_gl_framebuffer_attach()
//
// Note: OpenGL framebuffers are not shareable resources so cannot be used
// between multiple OpenGL contexts.
type GLFramebuffer struct {
	_ [0]func() // equal guard
	gst.GstObject
}

var (
	_ gst.GstObjector = (*GLFramebuffer)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLFramebuffer, *GLFramebufferClass, GLFramebufferOverrides](
		GTypeGLFramebuffer,
		initGLFramebufferClass,
		wrapGLFramebuffer,
		defaultGLFramebufferOverrides,
	)
}

func initGLFramebufferClass(gclass unsafe.Pointer, overrides GLFramebufferOverrides, classInitFunc func(*GLFramebufferClass)) {
	if classInitFunc != nil {
		class := (*GLFramebufferClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLFramebuffer(obj *coreglib.Object) *GLFramebuffer {
	return &GLFramebuffer{
		GstObject: gst.GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalGLFramebuffer(p uintptr) (interface{}, error) {
	return wrapGLFramebuffer(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewGLFramebuffer: this function will internally create an OpenGL framebuffer
// object and must be called on context's OpenGL thread.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//
// The function returns the following values:
//
//    - glFramebuffer: new GLFramebuffer.
//
func NewGLFramebuffer(context GLContexter) *GLFramebuffer {
	var _arg1 *C.GstGLContext     // out
	var _cret *C.GstGLFramebuffer // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.gst_gl_framebuffer_new(_arg1)
	runtime.KeepAlive(context)

	var _glFramebuffer *GLFramebuffer // out

	_glFramebuffer = wrapGLFramebuffer(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _glFramebuffer
}

// NewGLFramebufferWithDefaultDepth: this function will internally create an
// OpenGL framebuffer object and must be called on context's OpenGL thread.
//
// The function takes the following parameters:
//
//    - context: GLContext.
//    - width for the depth buffer.
//    - height: for the depth buffer.
//
// The function returns the following values:
//
//    - glFramebuffer: new GLFramebuffer with a depth buffer of width and height.
//
func NewGLFramebufferWithDefaultDepth(context GLContexter, width, height uint) *GLFramebuffer {
	var _arg1 *C.GstGLContext     // out
	var _arg2 C.guint             // out
	var _arg3 C.guint             // out
	var _cret *C.GstGLFramebuffer // in

	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg2 = C.guint(width)
	_arg3 = C.guint(height)

	_cret = C.gst_gl_framebuffer_new_with_default_depth(_arg1, _arg2, _arg3)
	runtime.KeepAlive(context)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)

	var _glFramebuffer *GLFramebuffer // out

	_glFramebuffer = wrapGLFramebuffer(coreglib.Take(unsafe.Pointer(_cret)))

	return _glFramebuffer
}

// Attach: attach mem to attachment_point
//
// Must be called with the same OpenGL context current that fb was created with.
//
// The function takes the following parameters:
//
//    - attachmentPoint: openGL attachment point to bind mem to.
//    - mem: memory object to bind to attachment_point.
//
func (fb *GLFramebuffer) Attach(attachmentPoint uint, mem *GLBaseMemory) {
	var _arg0 *C.GstGLFramebuffer // out
	var _arg1 C.guint             // out
	var _arg2 *C.GstGLBaseMemory  // out

	_arg0 = (*C.GstGLFramebuffer)(unsafe.Pointer(coreglib.InternObject(fb).Native()))
	_arg1 = C.guint(attachmentPoint)
	_arg2 = (*C.GstGLBaseMemory)(gextras.StructNative(unsafe.Pointer(mem)))

	C.gst_gl_framebuffer_attach(_arg0, _arg1, _arg2)
	runtime.KeepAlive(fb)
	runtime.KeepAlive(attachmentPoint)
	runtime.KeepAlive(mem)
}

// Bind fb into the current thread
//
// Must be called with the same OpenGL context current that fb was created with.
func (fb *GLFramebuffer) Bind() {
	var _arg0 *C.GstGLFramebuffer // out

	_arg0 = (*C.GstGLFramebuffer)(unsafe.Pointer(coreglib.InternObject(fb).Native()))

	C.gst_gl_framebuffer_bind(_arg0)
	runtime.KeepAlive(fb)
}

// EffectiveDimensions: retrieve the effective dimensions from the current
// attachments attached to fb.
//
// The function returns the following values:
//
//    - width (optional): output width.
//    - height (optional): output height.
//
func (fb *GLFramebuffer) EffectiveDimensions() (width, height uint) {
	var _arg0 *C.GstGLFramebuffer // out
	var _arg1 C.guint             // in
	var _arg2 C.guint             // in

	_arg0 = (*C.GstGLFramebuffer)(unsafe.Pointer(coreglib.InternObject(fb).Native()))

	C.gst_gl_framebuffer_get_effective_dimensions(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(fb)

	var _width uint  // out
	var _height uint // out

	_width = uint(_arg1)
	_height = uint(_arg2)

	return _width, _height
}

// The function returns the following values:
//
//    - guint: openGL id for fb.
//
func (fb *GLFramebuffer) ID() uint {
	var _arg0 *C.GstGLFramebuffer // out
	var _cret C.guint             // in

	_arg0 = (*C.GstGLFramebuffer)(unsafe.Pointer(coreglib.InternObject(fb).Native()))

	_cret = C.gst_gl_framebuffer_get_id(_arg0)
	runtime.KeepAlive(fb)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}
