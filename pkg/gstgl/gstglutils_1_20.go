// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gstvideo"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// GLGetAffineTransformationMetaAsNdc retrieves the stored 4x4 affine
// transformation matrix stored in meta in NDC coordinates. if meta is NULL, an
// identity matrix is returned.
//
//
// NDC is a left-handed coordinate system
//
// - x - [-1, 1] - +ve X moves right
//
// - y - [-1, 1] - +ve Y moves up
//
// - z - [-1, 1] - +ve Z moves into.
//
// The function takes the following parameters:
//
//    - meta (optional): VideoAffineTransformationMeta.
//
// The function returns the following values:
//
//    - matrix: result of the 4x4 matrix.
//
func GLGetAffineTransformationMetaAsNdc(meta *gstvideo.VideoAffineTransformationMeta) [16]float32 {
	var _arg1 *C.GstVideoAffineTransformationMeta // out
	var _arg2 [16]C.gfloat                        // in

	if meta != nil {
		_arg1 = (*C.GstVideoAffineTransformationMeta)(gextras.StructNative(unsafe.Pointer(meta)))
	}

	C.gst_gl_get_affine_transformation_meta_as_ndc(_arg1, &_arg2[0])
	runtime.KeepAlive(meta)

	var _matrix [16]float32 // out

	_matrix = *(*[16]float32)(unsafe.Pointer(&_arg2))

	return _matrix
}

// GLMultiplyMatrix4 multiplies two 4x4 matrices, a and b, and stores the
// result, a 2-dimensional array of #gfloat, in result.
//
// The function takes the following parameters:
//
//    - a: 2-dimensional 4x4 array of #gfloat.
//    - b: another 2-dimensional 4x4 array of #gfloat.
//
// The function returns the following values:
//
//    - result of the multiplication.
//
func GLMultiplyMatrix4(a, b [16]float32) [16]float32 {
	var _arg1 *C.gfloat    // out
	var _arg2 *C.gfloat    // out
	var _arg3 [16]C.gfloat // in

	_arg1 = (*C.gfloat)(unsafe.Pointer(&a))
	_arg2 = (*C.gfloat)(unsafe.Pointer(&b))

	C.gst_gl_multiply_matrix4(_arg1, _arg2, &_arg3[0])
	runtime.KeepAlive(a)
	runtime.KeepAlive(b)

	var _result [16]float32 // out

	_result = *(*[16]float32)(unsafe.Pointer(&_arg3))

	return _result
}

// GLSetAffineTransformationMetaFromNdc: set the 4x4 affine transformation
// matrix stored in meta from the NDC coordinates in matrix.
//
// The function takes the following parameters:
//
//    - meta: VideoAffineTransformationMeta.
//    - matrix: 4x4 matrix.
//
func GLSetAffineTransformationMetaFromNdc(meta *gstvideo.VideoAffineTransformationMeta, matrix [16]float32) {
	var _arg1 *C.GstVideoAffineTransformationMeta // out
	var _arg2 *C.gfloat                           // out

	_arg1 = (*C.GstVideoAffineTransformationMeta)(gextras.StructNative(unsafe.Pointer(meta)))
	_arg2 = (*C.gfloat)(unsafe.Pointer(&matrix))

	C.gst_gl_set_affine_transformation_meta_from_ndc(_arg1, _arg2)
	runtime.KeepAlive(meta)
	runtime.KeepAlive(matrix)
}
