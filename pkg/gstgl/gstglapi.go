// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// GL_API_GLES1_NAME: name for GST_GL_API_GLES1 used in various places.
const GL_API_GLES1_NAME = "gles1"

// GL_API_GLES2_NAME: name for GST_GL_API_GLES2 used in various places.
const GL_API_GLES2_NAME = "gles2"

// GL_API_OPENGL3_NAME: name for GST_GL_API_OPENGL3 used in various places.
const GL_API_OPENGL3_NAME = "opengl3"

// GL_API_OPENGL_NAME: name for GST_GL_API_OPENGL used in various places.
const GL_API_OPENGL_NAME = "opengl"

// The function takes the following parameters:
//
//    - apiS: space separated string of OpenGL apis.
//
// The function returns the following values:
//
//    - glapI represented by api_s.
//
func GLAPIFromString(apiS string) GLAPI {
	var _arg1 *C.gchar   // out
	var _cret C.GstGLAPI // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(apiS)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_gl_api_from_string(_arg1)
	runtime.KeepAlive(apiS)

	var _glapI GLAPI // out

	_glapI = GLAPI(_cret)

	return _glapI
}

// The function takes the following parameters:
//
//    - api to stringify.
//
// The function returns the following values:
//
//    - utf8: space separated string of the OpenGL api's enabled in api.
//
func GLAPIToString(api GLAPI) string {
	var _arg1 C.GstGLAPI // out
	var _cret *C.gchar   // in

	_arg1 = C.GstGLAPI(api)

	_cret = C.gst_gl_api_to_string(_arg1)
	runtime.KeepAlive(api)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// The function takes the following parameters:
//
//    - platformS: space separated string of OpenGL platformss.
//
// The function returns the following values:
//
//    - glPlatform represented by platform_s.
//
func GLPlatformFromString(platformS string) GLPlatform {
	var _arg1 *C.gchar        // out
	var _cret C.GstGLPlatform // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(platformS)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_gl_platform_from_string(_arg1)
	runtime.KeepAlive(platformS)

	var _glPlatform GLPlatform // out

	_glPlatform = GLPlatform(_cret)

	return _glPlatform
}

// The function takes the following parameters:
//
//    - platform to stringify.
//
// The function returns the following values:
//
//    - utf8: space separated string of the OpenGL platforms enabled in platform.
//
func GLPlatformToString(platform GLPlatform) string {
	var _arg1 C.GstGLPlatform // out
	var _cret *C.gchar        // in

	_arg1 = C.GstGLPlatform(platform)

	_cret = C.gst_gl_platform_to_string(_arg1)
	runtime.KeepAlive(platform)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
