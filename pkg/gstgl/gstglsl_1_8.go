// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLSLError   = coreglib.Type(C.gst_glsl_error_get_type())
	GTypeGLSLVersion = coreglib.Type(C.gst_glsl_version_get_type())
	GTypeGLSLProfile = coreglib.Type(C.gst_glsl_profile_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLSLError, F: marshalGLSLError},
		coreglib.TypeMarshaler{T: GTypeGLSLVersion, F: marshalGLSLVersion},
		coreglib.TypeMarshaler{T: GTypeGLSLProfile, F: marshalGLSLProfile},
	})
}

// GLSLError: compilation stage that caused an error.
type GLSLError C.gint

const (
	// GlslErrorCompile: compilation error occurred.
	GlslErrorCompile GLSLError = iota
	// GlslErrorLink: link error occurred.
	GlslErrorLink
	// GlslErrorProgram: general program error occurred.
	GlslErrorProgram
)

func marshalGLSLError(p uintptr) (interface{}, error) {
	return GLSLError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for GLSLError.
func (g GLSLError) String() string {
	switch g {
	case GlslErrorCompile:
		return "Compile"
	case GlslErrorLink:
		return "Link"
	case GlslErrorProgram:
		return "Program"
	default:
		return fmt.Sprintf("GLSLError(%d)", g)
	}
}

// GLSLVersion: GLSL version list.
type GLSLVersion C.gint

const (
	// GlslVersionNone: no version.
	GlslVersionNone GLSLVersion = 0
	// GlslVersion100: version 100 (only valid for ES).
	GlslVersion100 GLSLVersion = 100
	// GlslVersion110: version 110 (only valid for compatibility desktop GL).
	GlslVersion110 GLSLVersion = 110
	// GlslVersion120: version 120 (only valid for compatibility desktop GL).
	GlslVersion120 GLSLVersion = 120
	// GlslVersion130: version 130 (only valid for compatibility desktop GL).
	GlslVersion130 GLSLVersion = 130
	// GlslVersion140: version 140 (only valid for compatibility desktop GL).
	GlslVersion140 GLSLVersion = 140
	// GlslVersion150: version 150 (valid for compatibility/core desktop GL).
	GlslVersion150 GLSLVersion = 150
	// GlslVersion300: version 300 (only valid for ES).
	GlslVersion300 GLSLVersion = 300
	// GlslVersion310: version 310 (only valid for ES).
	GlslVersion310 GLSLVersion = 310
	// GlslVersion320: version 320 (only valid for ES).
	GlslVersion320 GLSLVersion = 320
	// GlslVersion330: version 330 (valid for compatibility/core desktop GL).
	GlslVersion330 GLSLVersion = 330
	// GlslVersion400: version 400 (valid for compatibility/core desktop GL).
	GlslVersion400 GLSLVersion = 400
	// GlslVersion410: version 410 (valid for compatibility/core desktop GL).
	GlslVersion410 GLSLVersion = 410
	// GlslVersion420: version 420 (valid for compatibility/core desktop GL).
	GlslVersion420 GLSLVersion = 420
	// GlslVersion430: version 430 (valid for compatibility/core desktop GL).
	GlslVersion430 GLSLVersion = 430
	// GlslVersion440: version 440 (valid for compatibility/core desktop GL).
	GlslVersion440 GLSLVersion = 440
	// GlslVersion450: version 450 (valid for compatibility/core desktop GL).
	GlslVersion450 GLSLVersion = 450
)

func marshalGLSLVersion(p uintptr) (interface{}, error) {
	return GLSLVersion(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for GLSLVersion.
func (g GLSLVersion) String() string {
	switch g {
	case GlslVersionNone:
		return "None"
	case GlslVersion100:
		return "100"
	case GlslVersion110:
		return "110"
	case GlslVersion120:
		return "120"
	case GlslVersion130:
		return "130"
	case GlslVersion140:
		return "140"
	case GlslVersion150:
		return "150"
	case GlslVersion300:
		return "300"
	case GlslVersion310:
		return "310"
	case GlslVersion320:
		return "320"
	case GlslVersion330:
		return "330"
	case GlslVersion400:
		return "400"
	case GlslVersion410:
		return "410"
	case GlslVersion420:
		return "420"
	case GlslVersion430:
		return "430"
	case GlslVersion440:
		return "440"
	case GlslVersion450:
		return "450"
	default:
		return fmt.Sprintf("GLSLVersion(%d)", g)
	}
}

// GLSLProfile: GLSL profiles.
type GLSLProfile C.guint

const (
	// GlslProfileNone: no profile supported/available.
	GlslProfileNone GLSLProfile = 0b0
	// GlslProfileES: openGL|ES profile.
	GlslProfileES GLSLProfile = 0b1
	// GlslProfileCore: openGL core profile.
	GlslProfileCore GLSLProfile = 0b10
	// GlslProfileCompatibility: openGL compatibility profile.
	GlslProfileCompatibility GLSLProfile = 0b100
	// GlslProfileAny: any OpenGL/OpenGL|ES profile.
	GlslProfileAny GLSLProfile = 0b11111111111111111111111111111111
)

func marshalGLSLProfile(p uintptr) (interface{}, error) {
	return GLSLProfile(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for GLSLProfile.
func (g GLSLProfile) String() string {
	if g == 0 {
		return "GLSLProfile(0)"
	}

	var builder strings.Builder
	builder.Grow(85)

	for g != 0 {
		next := g & (g - 1)
		bit := g - next

		switch bit {
		case GlslProfileNone:
			builder.WriteString("None|")
		case GlslProfileES:
			builder.WriteString("ES|")
		case GlslProfileCore:
			builder.WriteString("Core|")
		case GlslProfileCompatibility:
			builder.WriteString("Compatibility|")
		case GlslProfileAny:
			builder.WriteString("Any|")
		default:
			builder.WriteString(fmt.Sprintf("GLSLProfile(0b%b)|", bit))
		}

		g = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if g contains other.
func (g GLSLProfile) Has(other GLSLProfile) bool {
	return (g & other) == other
}
