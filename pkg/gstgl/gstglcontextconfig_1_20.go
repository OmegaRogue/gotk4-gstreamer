// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/gl/gl.h>
import "C"

// GL_CONFIG_STRUCTURE_NAME: canonical name of a Structure that contains a
// configuration for a GLContext.
const GL_CONFIG_STRUCTURE_NAME = "gst-gl-context-config"

// The function takes the following parameters:
//
//    - caveat: GLConfigCaveat.
//
// The function returns the following values:
//
//    - utf8 (optional): string version of caveat or NULL if caveat does not
//      exist.
//
func GLConfigCaveatToString(caveat GLConfigCaveat) string {
	var _arg1 C.GstGLConfigCaveat // out
	var _cret *C.gchar            // in

	_arg1 = C.GstGLConfigCaveat(caveat)

	_cret = C.gst_gl_config_caveat_to_string(_arg1)
	runtime.KeepAlive(caveat)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function takes the following parameters:
//
//    - surfaceType: GLConfigSurfaceType.
//
// The function returns the following values:
//
//    - utf8 (optional): string version of caveat or NULL if surface_type does
//      not exist.
//
func GLConfigSurfaceTypeToString(surfaceType GLConfigSurfaceType) string {
	var _arg1 C.GstGLConfigSurfaceType // out
	var _cret *C.gchar                 // in

	_arg1 = C.GstGLConfigSurfaceType(surfaceType)

	_cret = C.gst_gl_config_surface_type_to_string(_arg1)
	runtime.KeepAlive(surfaceType)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}
