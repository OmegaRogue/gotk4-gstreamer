// Code generated by girgen. DO NOT EDIT.

package gstgl

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/gl.h>
import "C"

// GType values.
var (
	GTypeGLStereoDownmix = coreglib.Type(C.gst_gl_stereo_downmix_get_type())
	GTypeGLViewConvert   = coreglib.Type(C.gst_gl_view_convert_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLStereoDownmix, F: marshalGLStereoDownmix},
		coreglib.TypeMarshaler{T: GTypeGLViewConvert, F: marshalGLViewConvert},
	})
}

// GLStereoDownmix: output anaglyph type to generate when downmixing to mono.
type GLStereoDownmix C.gint

const (
	// GLStereoDownmixAnaglyphGreenMagentaDubois dubois optimised Green-Magenta
	// anaglyph.
	GLStereoDownmixAnaglyphGreenMagentaDubois GLStereoDownmix = iota
	// GLStereoDownmixAnaglyphRedCyanDubois dubois optimised Red-Cyan anaglyph.
	GLStereoDownmixAnaglyphRedCyanDubois
	// GLStereoDownmixAnaglyphAmberBlueDubois dubois optimised Amber-Blue
	// anaglyph.
	GLStereoDownmixAnaglyphAmberBlueDubois
)

func marshalGLStereoDownmix(p uintptr) (interface{}, error) {
	return GLStereoDownmix(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for GLStereoDownmix.
func (g GLStereoDownmix) String() string {
	switch g {
	case GLStereoDownmixAnaglyphGreenMagentaDubois:
		return "GreenMagentaDubois"
	case GLStereoDownmixAnaglyphRedCyanDubois:
		return "RedCyanDubois"
	case GLStereoDownmixAnaglyphAmberBlueDubois:
		return "AmberBlueDubois"
	default:
		return fmt.Sprintf("GLStereoDownmix(%d)", g)
	}
}

// The function returns the following values:
//
func GLStereoDownmixModeGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_gl_stereo_downmix_mode_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// GLViewConvertOverrides contains methods that are overridable.
type GLViewConvertOverrides struct {
}

func defaultGLViewConvertOverrides(v *GLViewConvert) GLViewConvertOverrides {
	return GLViewConvertOverrides{}
}

// GLViewConvert: convert stereoscopic/multiview video using fragment shaders.
type GLViewConvert struct {
	_ [0]func() // equal guard
	gst.GstObject
}

var (
	_ gst.GstObjector = (*GLViewConvert)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLViewConvert, *GLViewConvertClass, GLViewConvertOverrides](
		GTypeGLViewConvert,
		initGLViewConvertClass,
		wrapGLViewConvert,
		defaultGLViewConvertOverrides,
	)
}

func initGLViewConvertClass(gclass unsafe.Pointer, overrides GLViewConvertOverrides, classInitFunc func(*GLViewConvertClass)) {
	if classInitFunc != nil {
		class := (*GLViewConvertClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLViewConvert(obj *coreglib.Object) *GLViewConvert {
	return &GLViewConvert{
		GstObject: gst.GstObject{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
		},
	}
}

func marshalGLViewConvert(p uintptr) (interface{}, error) {
	return wrapGLViewConvert(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function returns the following values:
//
//    - glViewConvert: new GLViewConvert.
//
func NewGLViewConvert() *GLViewConvert {
	var _cret *C.GstGLViewConvert // in

	_cret = C.gst_gl_view_convert_new()

	var _glViewConvert *GLViewConvert // out

	_glViewConvert = wrapGLViewConvert(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _glViewConvert
}

// FixateCaps provides an implementation of BaseTransformClass.fixate_caps().
//
// The function takes the following parameters:
//
//    - direction: PadDirection.
//    - caps of direction.
//    - othercaps to fixate.
//
// The function returns the following values:
//
//    - ret: fixated Caps.
//
func (viewconvert *GLViewConvert) FixateCaps(direction gst.PadDirection, caps, othercaps *gst.Caps) *gst.Caps {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 C.GstPadDirection   // out
	var _arg2 *C.GstCaps          // out
	var _arg3 *C.GstCaps          // out
	var _cret *C.GstCaps          // in

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))
	_arg1 = C.GstPadDirection(direction)
	_arg2 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))
	_arg3 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(othercaps)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(othercaps)), nil)

	_cret = C.gst_gl_view_convert_fixate_caps(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(viewconvert)
	runtime.KeepAlive(direction)
	runtime.KeepAlive(caps)
	runtime.KeepAlive(othercaps)

	var _ret *gst.Caps // out

	_ret = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ret)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _ret
}

// Output: retrieve the processed output buffer placing the output in
// outbuf_ptr.
//
// The function returns the following values:
//
//    - outbufPtr: Buffer.
//    - flowReturn: FlowReturn.
//
func (viewconvert *GLViewConvert) Output() (*gst.Buffer, gst.FlowReturn) {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 *C.GstBuffer        // in
	var _cret C.GstFlowReturn     // in

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))

	_cret = C.gst_gl_view_convert_get_output(_arg0, &_arg1)
	runtime.KeepAlive(viewconvert)

	var _outbufPtr *gst.Buffer     // out
	var _flowReturn gst.FlowReturn // out

	_outbufPtr = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_outbufPtr)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_flowReturn = gst.FlowReturn(_cret)

	return _outbufPtr, _flowReturn
}

// Perform converts the data contained by inbuf using the formats specified by
// the Caps passed to gst_gl_view_convert_set_caps().
//
// The function takes the following parameters:
//
//    - inbuf filled Buffer to convert.
//
// The function returns the following values:
//
//    - buffer: converted Buffer or NULL.
//
func (viewconvert *GLViewConvert) Perform(inbuf *gst.Buffer) *gst.Buffer {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 *C.GstBuffer        // out
	var _cret *C.GstBuffer        // in

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(inbuf)))

	_cret = C.gst_gl_view_convert_perform(_arg0, _arg1)
	runtime.KeepAlive(viewconvert)
	runtime.KeepAlive(inbuf)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// Reset viewconvert to the default state. Further operation will require
// setting the caps with gst_gl_view_convert_set_caps().
func (viewconvert *GLViewConvert) Reset() {
	var _arg0 *C.GstGLViewConvert // out

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))

	C.gst_gl_view_convert_reset(_arg0)
	runtime.KeepAlive(viewconvert)
}

// SetCaps initializes viewconvert with the information required for conversion.
//
// The function takes the following parameters:
//
//    - inCaps: input Caps.
//    - outCaps: output Caps.
//
// The function returns the following values:
//
func (viewconvert *GLViewConvert) SetCaps(inCaps, outCaps *gst.Caps) bool {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 *C.GstCaps          // out
	var _arg2 *C.GstCaps          // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(inCaps)))
	_arg2 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(outCaps)))

	_cret = C.gst_gl_view_convert_set_caps(_arg0, _arg1, _arg2)
	runtime.KeepAlive(viewconvert)
	runtime.KeepAlive(inCaps)
	runtime.KeepAlive(outCaps)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetContext: set context on viewconvert.
//
// The function takes the following parameters:
//
//    - context to set.
//
func (viewconvert *GLViewConvert) SetContext(context GLContexter) {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 *C.GstGLContext     // out

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))
	_arg1 = (*C.GstGLContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.gst_gl_view_convert_set_context(_arg0, _arg1)
	runtime.KeepAlive(viewconvert)
	runtime.KeepAlive(context)
}

// SubmitInputBuffer: submit input to be processed by viewconvert.
//
// The function takes the following parameters:
//
//    - isDiscont: true if we have a discontinuity.
//    - input: Buffer.
//
// The function returns the following values:
//
//    - flowReturn: FlowReturn.
//
func (viewconvert *GLViewConvert) SubmitInputBuffer(isDiscont bool, input *gst.Buffer) gst.FlowReturn {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 C.gboolean          // out
	var _arg2 *C.GstBuffer        // out
	var _cret C.GstFlowReturn     // in

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))
	if isDiscont {
		_arg1 = C.TRUE
	}
	_arg2 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(input)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(input)), nil)

	_cret = C.gst_gl_view_convert_submit_input_buffer(_arg0, _arg1, _arg2)
	runtime.KeepAlive(viewconvert)
	runtime.KeepAlive(isDiscont)
	runtime.KeepAlive(input)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}

// TransformCaps provides an implementation of
// BaseTransformClass.transform_caps().
//
// The function takes the following parameters:
//
//    - direction: PadDirection.
//    - caps to transform.
//    - filter: set of filter Caps.
//
// The function returns the following values:
//
//    - ret: converted Caps.
//
func (viewconvert *GLViewConvert) TransformCaps(direction gst.PadDirection, caps, filter *gst.Caps) *gst.Caps {
	var _arg0 *C.GstGLViewConvert // out
	var _arg1 C.GstPadDirection   // out
	var _arg2 *C.GstCaps          // out
	var _arg3 *C.GstCaps          // out
	var _cret *C.GstCaps          // in

	_arg0 = (*C.GstGLViewConvert)(unsafe.Pointer(coreglib.InternObject(viewconvert).Native()))
	_arg1 = C.GstPadDirection(direction)
	_arg2 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))
	_arg3 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(filter)))

	_cret = C.gst_gl_view_convert_transform_caps(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(viewconvert)
	runtime.KeepAlive(direction)
	runtime.KeepAlive(caps)
	runtime.KeepAlive(filter)

	var _ret *gst.Caps // out

	_ret = (*gst.Caps)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_ret)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _ret
}

// GLViewConvertClass: opaque GLViewConvertClass struct
//
// An instance of this type is always passed by reference.
type GLViewConvertClass struct {
	*glViewConvertClass
}

// glViewConvertClass is the struct that's finalized.
type glViewConvertClass struct {
	native *C.GstGLViewConvertClass
}
