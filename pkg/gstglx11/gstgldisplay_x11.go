// Code generated by girgen. DO NOT EDIT.

package gstglx11

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gstgl"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/x11/x11.h>
import "C"

// GType values.
var (
	GTypeGLDisplaYX11 = coreglib.Type(C.gst_gl_display_x11_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLDisplaYX11, F: marshalGLDisplaYX11},
	})
}

// GLDisplaYX11Overrides contains methods that are overridable.
type GLDisplaYX11Overrides struct {
}

func defaultGLDisplaYX11Overrides(v *GLDisplaYX11) GLDisplaYX11Overrides {
	return GLDisplaYX11Overrides{}
}

// GLDisplaYX11 contents of a GLDisplayX11 are private and should only be
// accessed through the provided API.
type GLDisplaYX11 struct {
	_ [0]func() // equal guard
	gstgl.GLDisplay
}

var (
	_ gst.GstObjector = (*GLDisplaYX11)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLDisplaYX11, *GLDisplaYX11Class, GLDisplaYX11Overrides](
		GTypeGLDisplaYX11,
		initGLDisplaYX11Class,
		wrapGLDisplaYX11,
		defaultGLDisplaYX11Overrides,
	)
}

func initGLDisplaYX11Class(gclass unsafe.Pointer, overrides GLDisplaYX11Overrides, classInitFunc func(*GLDisplaYX11Class)) {
	if classInitFunc != nil {
		class := (*GLDisplaYX11Class)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLDisplaYX11(obj *coreglib.Object) *GLDisplaYX11 {
	return &GLDisplaYX11{
		GLDisplay: gstgl.GLDisplay{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalGLDisplaYX11(p uintptr) (interface{}, error) {
	return wrapGLDisplaYX11(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewGLDisplaYX11: create a new GLDisplayX11 from the x11 display name. See
// XOpenDisplay() for details on what is a valid name.
//
// The function takes the following parameters:
//
//    - name (optional): display name.
//
// The function returns the following values:
//
//    - glDisplayX11: new GLDisplayX11 or NULL.
//
func NewGLDisplaYX11(name string) *GLDisplaYX11 {
	var _arg1 *C.gchar           // out
	var _cret *C.GstGLDisplayX11 // in

	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.gst_gl_display_x11_new(_arg1)
	runtime.KeepAlive(name)

	var _glDisplayX11 *GLDisplaYX11 // out

	_glDisplayX11 = wrapGLDisplaYX11(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _glDisplayX11
}

// GLDisplaYX11Class: instance of this type is always passed by reference.
type GLDisplaYX11Class struct {
	*glDisplaYX11Class
}

// glDisplaYX11Class is the struct that's finalized.
type glDisplaYX11Class struct {
	native *C.GstGLDisplayX11Class
}

func (g *GLDisplaYX11Class) ObjectClass() *gstgl.GLDisplayClass {
	valptr := &g.native.object_class
	var _v *gstgl.GLDisplayClass // out
	_v = (*gstgl.GLDisplayClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

func (g *GLDisplaYX11Class) Padding() [4]unsafe.Pointer {
	valptr := &g.native._padding
	var _v [4]unsafe.Pointer // out
	{
		src := &*valptr
		for i := 0; i < 4; i++ {
			_v[i] = (unsafe.Pointer)(unsafe.Pointer(src[i]))
		}
	}
	return _v
}
