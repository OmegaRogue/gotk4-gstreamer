// Code generated by girgen. DO NOT EDIT.

package gstnet

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/net/net.h>
import "C"

// BufferAddNetAddressMeta attaches addr as metadata in a NetAddressMeta to
// buffer.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - addr GSocketAddress to connect to buffer.
//
// The function returns the following values:
//
//    - netAddressMeta connected to buffer.
//
func BufferAddNetAddressMeta(buffer *gst.Buffer, addr gio.SocketAddresser) *NetAddressMeta {
	var _arg1 *C.GstBuffer         // out
	var _arg2 *C.GSocketAddress    // out
	var _cret *C.GstNetAddressMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg2 = (*C.GSocketAddress)(unsafe.Pointer(coreglib.InternObject(addr).Native()))

	_cret = C.gst_buffer_add_net_address_meta(_arg1, _arg2)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(addr)

	var _netAddressMeta *NetAddressMeta // out

	_netAddressMeta = (*NetAddressMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _netAddressMeta
}

// BufferGetNetAddressMeta: find the NetAddressMeta on buffer.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//
// The function returns the following values:
//
//    - netAddressMeta or NULL when there is no such metadata on buffer.
//
func BufferGetNetAddressMeta(buffer *gst.Buffer) *NetAddressMeta {
	var _arg1 *C.GstBuffer         // out
	var _cret *C.GstNetAddressMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_buffer_get_net_address_meta(_arg1)
	runtime.KeepAlive(buffer)

	var _netAddressMeta *NetAddressMeta // out

	_netAddressMeta = (*NetAddressMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _netAddressMeta
}

// The function returns the following values:
//
func NetAddressMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_net_address_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// NetAddressMeta can be used to store a network address (a Address) in a Buffer
// so that it network elements can track the to and from address of the buffer.
//
// An instance of this type is always passed by reference.
type NetAddressMeta struct {
	*netAddressMeta
}

// netAddressMeta is the struct that's finalized.
type netAddressMeta struct {
	native *C.GstNetAddressMeta
}

// Meta: parent type.
func (n *NetAddressMeta) Meta() *gst.Meta {
	valptr := &n.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Addr stored as metadata.
func (n *NetAddressMeta) Addr() gio.SocketAddresser {
	valptr := &n.native.addr
	var _v gio.SocketAddresser // out
	{
		objptr := unsafe.Pointer(*valptr)
		if objptr == nil {
			panic("object of type gio.SocketAddresser is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.SocketAddresser)
			return ok
		})
		rv, ok := casted.(gio.SocketAddresser)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.SocketAddresser")
		}
		_v = rv
	}
	return _v
}

// The function returns the following values:
//
func NetAddressMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_net_address_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
