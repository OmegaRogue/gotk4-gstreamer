// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// RTSPRangeGetTimes: retrieve the minimum and maximum values from range
// converted to ClockTime in min and max.
//
// A value of GST_CLOCK_TIME_NONE will be used to signal T_RTSP_TIME_NOW and
// T_RTSP_TIME_END for min and max respectively.
//
// UTC times will be converted to nanoseconds since 1900.
//
// The function takes the following parameters:
//
//    - range: RTSPTimeRange.
//
// The function returns the following values:
//
//    - min: result minimum ClockTime.
//    - max: result maximum ClockTime.
//    - ok: TRUE on success.
//
func RTSPRangeGetTimes(_range *RTSPTimeRange) (min, max gst.ClockTime, ok bool) {
	var _arg1 *C.GstRTSPTimeRange // out
	var _arg2 C.GstClockTime      // in
	var _arg3 C.GstClockTime      // in
	var _cret C.gboolean          // in

	_arg1 = (*C.GstRTSPTimeRange)(gextras.StructNative(unsafe.Pointer(_range)))

	_cret = C.gst_rtsp_range_get_times(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(_range)

	var _min gst.ClockTime // out
	var _max gst.ClockTime // out
	var _ok bool           // out

	_min = uint64(_arg2)
	type _ = gst.ClockTime
	type _ = uint64
	_max = uint64(_arg3)
	type _ = gst.ClockTime
	type _ = uint64
	if _cret != 0 {
		_ok = true
	}

	return _min, _max, _ok
}

// RTSPTime2: extra fields for a time indication.
//
// An instance of this type is always passed by reference.
type RTSPTime2 struct {
	*rtspTime2
}

// rtspTime2 is the struct that's finalized.
type rtspTime2 struct {
	native *C.GstRTSPTime2
}

// NewRTSPTime2 creates a new RTSPTime2 instance from the given
// fields. Beware that this function allocates on the Go heap; be careful
// when using it!
func NewRTSPTime2(frames float64, year, month, day uint) RTSPTime2 {
	var f0 C.gdouble // out
	f0 = C.gdouble(frames)
	var f1 C.guint // out
	f1 = C.guint(year)
	var f2 C.guint // out
	f2 = C.guint(month)
	var f3 C.guint // out
	f3 = C.guint(day)

	v := C.GstRTSPTime2{
		frames: f0,
		year:   f1,
		month:  f2,
		day:    f3,
	}

	return *(*RTSPTime2)(gextras.NewStructNative(unsafe.Pointer(&v)))
}

// Frames frames and subframes when type in GstRTSPTime is GST_RTSP_TIME_FRAMES.
func (r *RTSPTime2) Frames() float64 {
	valptr := &r.native.frames
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Year: year when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) Year() uint {
	valptr := &r.native.year
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Month: month when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) Month() uint {
	valptr := &r.native.month
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Day: day when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) Day() uint {
	valptr := &r.native.day
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Frames frames and subframes when type in GstRTSPTime is GST_RTSP_TIME_FRAMES.
func (r *RTSPTime2) SetFrames(frames float64) {
	valptr := &r.native.frames
	*valptr = C.gdouble(frames)
}

// Year: year when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) SetYear(year uint) {
	valptr := &r.native.year
	*valptr = C.guint(year)
}

// Month: month when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) SetMonth(month uint) {
	valptr := &r.native.month
	*valptr = C.guint(month)
}

// Day: day when type is GST_RTSP_TIME_UTC.
func (r *RTSPTime2) SetDay(day uint) {
	valptr := &r.native.day
	*valptr = C.guint(day)
}
