// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// GType values.
var (
	GTypeRTSPURL = coreglib.Type(C.gst_rtsp_url_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTSPURL, F: marshalRTSPURL},
	})
}

// RTSP_DEFAULT_PORT: default RTSP port to connect to.
const RTSP_DEFAULT_PORT = 554

// RTSPURL provides helper functions to handle RTSP urls.
//
// An instance of this type is always passed by reference.
type RTSPURL struct {
	*rtspurL
}

// rtspurL is the struct that's finalized.
type rtspurL struct {
	native *C.GstRTSPUrl
}

func marshalRTSPURL(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPURL{&rtspurL{(*C.GstRTSPUrl)(b)}}, nil
}

// Transports transports allowed.
func (r *RTSPURL) Transports() RTSPLowerTrans {
	valptr := &r.native.transports
	var _v RTSPLowerTrans // out
	_v = RTSPLowerTrans(*valptr)
	return _v
}

// Family: family.
func (r *RTSPURL) Family() RTSPFamily {
	valptr := &r.native.family
	var _v RTSPFamily // out
	_v = RTSPFamily(*valptr)
	return _v
}

// User: user.
func (r *RTSPURL) User() string {
	valptr := &r.native.user
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Passwd: password.
func (r *RTSPURL) Passwd() string {
	valptr := &r.native.passwd
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Host: host.
func (r *RTSPURL) Host() string {
	valptr := &r.native.host
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Abspath: absolute path.
func (r *RTSPURL) Abspath() string {
	valptr := &r.native.abspath
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Query: additional query parameters.
func (r *RTSPURL) Query() string {
	valptr := &r.native.query
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Copy: make a copy of url.
//
// The function returns the following values:
//
//    - rtspUrl: copy of url. Free with gst_rtsp_url_free () after usage.
//
func (url *RTSPURL) Copy() *RTSPURL {
	var _arg0 *C.GstRTSPUrl // out
	var _cret *C.GstRTSPUrl // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_copy(_arg0)
	runtime.KeepAlive(url)

	var _rtspUrl *RTSPURL // out

	_rtspUrl = (*RTSPURL)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_rtspUrl)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_url_free((*C.GstRTSPUrl)(intern.C))
		},
	)

	return _rtspUrl
}

// DecodePathComponents splits the path of url on '/' boundaries, decoding the
// resulting components,
//
// The decoding performed by this routine is "URI decoding", as defined in RFC
// 3986, commonly known as percent-decoding. For example, a string "foo\2fbar"
// will decode to "foo/bar" -- the \2f being replaced by the corresponding byte
// with hex value 0x2f. Note that there is no guarantee that the resulting byte
// sequence is valid in any given encoding. As a special case, \00 is not
// unescaped to NUL, as that would prematurely terminate the string.
//
// Also note that since paths usually start with a slash, the first component
// will usually be the empty string.
//
// The function returns the following values:
//
//    - utf8s: NULL-terminated array of URL components. Free with g_strfreev()
//      when no longer needed.
//
func (url *RTSPURL) DecodePathComponents() []string {
	var _arg0 *C.GstRTSPUrl // out
	var _cret **C.gchar     // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_decode_path_components(_arg0)
	runtime.KeepAlive(url)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.gchar
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}

// Port: get the port number of url.
//
// The function returns the following values:
//
//    - port: location to hold the port.
//    - rtspResult: T_RTSP_OK.
//
func (url *RTSPURL) Port() (uint16, RTSPResult) {
	var _arg0 *C.GstRTSPUrl   // out
	var _arg1 C.guint16       // in
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_get_port(_arg0, &_arg1)
	runtime.KeepAlive(url)

	var _port uint16           // out
	var _rtspResult RTSPResult // out

	_port = uint16(_arg1)
	_rtspResult = RTSPResult(_cret)

	return _port, _rtspResult
}

// RequestURI: get a newly allocated string describing the request URI for url.
//
// The function returns the following values:
//
//    - utf8: string with the request URI. g_free() after usage.
//
func (url *RTSPURL) RequestURI() string {
	var _arg0 *C.GstRTSPUrl // out
	var _cret *C.gchar      // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))

	_cret = C.gst_rtsp_url_get_request_uri(_arg0)
	runtime.KeepAlive(url)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RequestURIWithControl: get a newly allocated string describing the request
// URI for url combined with the control path for control_path.
//
// The function takes the following parameters:
//
//    - controlPath: RTSP aggregate control path.
//
// The function returns the following values:
//
//    - utf8: string with the request URI combined with the control path.
//      g_free() after usage.
//
func (url *RTSPURL) RequestURIWithControl(controlPath string) string {
	var _arg0 *C.GstRTSPUrl // out
	var _arg1 *C.gchar      // out
	var _cret *C.gchar      // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(controlPath)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_url_get_request_uri_with_control(_arg0, _arg1)
	runtime.KeepAlive(url)
	runtime.KeepAlive(controlPath)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetPort: set the port number in url to port.
//
// The function takes the following parameters:
//
//    - port: port.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (url *RTSPURL) SetPort(port uint16) RTSPResult {
	var _arg0 *C.GstRTSPUrl   // out
	var _arg1 C.guint16       // out
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPUrl)(gextras.StructNative(unsafe.Pointer(url)))
	_arg1 = C.guint16(port)

	_cret = C.gst_rtsp_url_set_port(_arg0, _arg1)
	runtime.KeepAlive(url)
	runtime.KeepAlive(port)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// RTSPURLParse: parse the RTSP urlstr into a newly allocated RTSPUrl. Free
// after usage with gst_rtsp_url_free().
//
// The function takes the following parameters:
//
//    - urlstr: url string to parse.
//
// The function returns the following values:
//
//    - url: location to hold the result.
//    - rtspResult: RTSPResult.
//
func RTSPURLParse(urlstr string) (*RTSPURL, RTSPResult) {
	var _arg1 *C.gchar        // out
	var _arg2 *C.GstRTSPUrl   // in
	var _cret C.GstRTSPResult // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(urlstr)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_url_parse(_arg1, &_arg2)
	runtime.KeepAlive(urlstr)

	var _url *RTSPURL          // out
	var _rtspResult RTSPResult // out

	_url = (*RTSPURL)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_url)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_url_free((*C.GstRTSPUrl)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _url, _rtspResult
}
