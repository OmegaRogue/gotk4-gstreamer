// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// GType values.
var (
	GTypeRTSPAuthMethod  = coreglib.Type(C.gst_rtsp_auth_method_get_type())
	GTypeRTSPFamily      = coreglib.Type(C.gst_rtsp_family_get_type())
	GTypeRTSPHeaderField = coreglib.Type(C.gst_rtsp_header_field_get_type())
	GTypeRTSPResult      = coreglib.Type(C.gst_rtsp_result_get_type())
	GTypeRTSPState       = coreglib.Type(C.gst_rtsp_state_get_type())
	GTypeRTSPStatusCode  = coreglib.Type(C.gst_rtsp_status_code_get_type())
	GTypeRTSPVersion     = coreglib.Type(C.gst_rtsp_version_get_type())
	GTypeRTSPEvent       = coreglib.Type(C.gst_rtsp_event_get_type())
	GTypeRTSPMethod      = coreglib.Type(C.gst_rtsp_method_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTSPAuthMethod, F: marshalRTSPAuthMethod},
		coreglib.TypeMarshaler{T: GTypeRTSPFamily, F: marshalRTSPFamily},
		coreglib.TypeMarshaler{T: GTypeRTSPHeaderField, F: marshalRTSPHeaderField},
		coreglib.TypeMarshaler{T: GTypeRTSPResult, F: marshalRTSPResult},
		coreglib.TypeMarshaler{T: GTypeRTSPState, F: marshalRTSPState},
		coreglib.TypeMarshaler{T: GTypeRTSPStatusCode, F: marshalRTSPStatusCode},
		coreglib.TypeMarshaler{T: GTypeRTSPVersion, F: marshalRTSPVersion},
		coreglib.TypeMarshaler{T: GTypeRTSPEvent, F: marshalRTSPEvent},
		coreglib.TypeMarshaler{T: GTypeRTSPMethod, F: marshalRTSPMethod},
	})
}

// RTSPAuthMethod: authentication methods, ordered by strength.
type RTSPAuthMethod C.gint

const (
	// RtspAuthNone: no authentication.
	RtspAuthNone RTSPAuthMethod = iota
	// RtspAuthBasic: basic authentication.
	RtspAuthBasic
	// RtspAuthDigest: digest authentication.
	RtspAuthDigest
)

func marshalRTSPAuthMethod(p uintptr) (interface{}, error) {
	return RTSPAuthMethod(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPAuthMethod.
func (r RTSPAuthMethod) String() string {
	switch r {
	case RtspAuthNone:
		return "None"
	case RtspAuthBasic:
		return "Basic"
	case RtspAuthDigest:
		return "Digest"
	default:
		return fmt.Sprintf("RTSPAuthMethod(%d)", r)
	}
}

// RTSPFamily: possible network families.
type RTSPFamily C.gint

const (
	// RtspFamNone: unknown network family.
	RtspFamNone RTSPFamily = iota
	// RtspFamInet: internet.
	RtspFamInet
	// RtspFamInet6: internet V6.
	RtspFamInet6
)

func marshalRTSPFamily(p uintptr) (interface{}, error) {
	return RTSPFamily(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPFamily.
func (r RTSPFamily) String() string {
	switch r {
	case RtspFamNone:
		return "None"
	case RtspFamInet:
		return "Inet"
	case RtspFamInet6:
		return "Inet6"
	default:
		return fmt.Sprintf("RTSPFamily(%d)", r)
	}
}

// RTSPHeaderField: enumeration of rtsp header fields.
type RTSPHeaderField C.gint

const (
	RtspHdrInvalid RTSPHeaderField = iota
	RtspHdrAccept
	RtspHdrAcceptEncoding
	RtspHdrAcceptLanguage
	RtspHdrAllow
	RtspHdrAuthorization
	RtspHdrBandwidth
	RtspHdrBlocksize
	RtspHdrCacheControl
	RtspHdrConference
	RtspHdrConnection
	RtspHdrContentBase
	RtspHdrContentEncoding
	RtspHdrContentLanguage
	RtspHdrContentLength
	RtspHdrContentLocation
	RtspHdrContentType
	RtspHdrCseq
	RtspHdrDate
	RtspHdrExpires
	RtspHdrFrom
	RtspHdrIfModifiedSince
	RtspHdrLastModified
	RtspHdrProxyAuthenticate
	RtspHdrProxyRequire
	RtspHdrPublic
	RtspHdrRange
	RtspHdrReferer
	RtspHdrRequire
	RtspHdrRetryAfter
	RtspHdrRtpInfo
	RtspHdrScale
	RtspHdrSession
	RtspHdrServer
	RtspHdrSpeed
	RtspHdrTransport
	RtspHdrUnsupported
	RtspHdrUserAgent
	RtspHdrVia
	RtspHdrWwwAuthenticate
	RtspHdrClientChallenge
	RtspHdrRealChallenge1
	RtspHdrRealChallenge2
	RtspHdrRealChallenge3
	RtspHdrSubscribe
	RtspHdrAlert
	RtspHdrClientID
	RtspHdrCompanyID
	RtspHdrGUID
	RtspHdrRegionData
	RtspHdrMaxAsmWidth
	RtspHdrLanguage
	RtspHdrPlayerStartTime
	RtspHdrLocation
	RtspHdrETag
	RtspHdrIfMatch
	RtspHdrAcceptCharset
	RtspHdrSupported
	RtspHdrVary
	RtspHdrXAccelerateStreaming
	RtspHdrXAcceptAuthent
	RtspHdrXAcceptProxyAuthent
	RtspHdrXBroadcastID
	RtspHdrXBurstStreaming
	RtspHdrXNotice
	RtspHdrXPlayerLagTime
	RtspHdrXPlaylist
	RtspHdrXPlaylistChangeNotice
	RtspHdrXPlaylistGenID
	RtspHdrXPlaylistSeekID
	RtspHdrXProxyClientAgent
	RtspHdrXProxyClientVerb
	RtspHdrXRecedingPlaylistchange
	RtspHdrXRtpInfo
	RtspHdrXStartupprofile
	RtspHdrTimestamp
	RtspHdrAuthenticationInfo
	RtspHdrHost
	RtspHdrPragma
	RtspHdrXServerIPAddress
	RtspHdrXSessioncookie
	RtspHdrRtcpInterval
	RtspHdrKeymgmt
	RtspHdrPipelinedRequests
	RtspHdrMediaProperties
	RtspHdrSeekStyle
	RtspHdrAcceptRanges
	RtspHdrFrames
	RtspHdrRateControl
	RtspHdrLast
)

func marshalRTSPHeaderField(p uintptr) (interface{}, error) {
	return RTSPHeaderField(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPHeaderField.
func (r RTSPHeaderField) String() string {
	switch r {
	case RtspHdrInvalid:
		return "Invalid"
	case RtspHdrAccept:
		return "Accept"
	case RtspHdrAcceptEncoding:
		return "AcceptEncoding"
	case RtspHdrAcceptLanguage:
		return "AcceptLanguage"
	case RtspHdrAllow:
		return "Allow"
	case RtspHdrAuthorization:
		return "Authorization"
	case RtspHdrBandwidth:
		return "Bandwidth"
	case RtspHdrBlocksize:
		return "Blocksize"
	case RtspHdrCacheControl:
		return "CacheControl"
	case RtspHdrConference:
		return "Conference"
	case RtspHdrConnection:
		return "Connection"
	case RtspHdrContentBase:
		return "ContentBase"
	case RtspHdrContentEncoding:
		return "ContentEncoding"
	case RtspHdrContentLanguage:
		return "ContentLanguage"
	case RtspHdrContentLength:
		return "ContentLength"
	case RtspHdrContentLocation:
		return "ContentLocation"
	case RtspHdrContentType:
		return "ContentType"
	case RtspHdrCseq:
		return "Cseq"
	case RtspHdrDate:
		return "Date"
	case RtspHdrExpires:
		return "Expires"
	case RtspHdrFrom:
		return "From"
	case RtspHdrIfModifiedSince:
		return "IfModifiedSince"
	case RtspHdrLastModified:
		return "LastModified"
	case RtspHdrProxyAuthenticate:
		return "ProxyAuthenticate"
	case RtspHdrProxyRequire:
		return "ProxyRequire"
	case RtspHdrPublic:
		return "Public"
	case RtspHdrRange:
		return "Range"
	case RtspHdrReferer:
		return "Referer"
	case RtspHdrRequire:
		return "Require"
	case RtspHdrRetryAfter:
		return "RetryAfter"
	case RtspHdrRtpInfo:
		return "RtpInfo"
	case RtspHdrScale:
		return "Scale"
	case RtspHdrSession:
		return "Session"
	case RtspHdrServer:
		return "Server"
	case RtspHdrSpeed:
		return "Speed"
	case RtspHdrTransport:
		return "Transport"
	case RtspHdrUnsupported:
		return "Unsupported"
	case RtspHdrUserAgent:
		return "UserAgent"
	case RtspHdrVia:
		return "Via"
	case RtspHdrWwwAuthenticate:
		return "WwwAuthenticate"
	case RtspHdrClientChallenge:
		return "ClientChallenge"
	case RtspHdrRealChallenge1:
		return "RealChallenge1"
	case RtspHdrRealChallenge2:
		return "RealChallenge2"
	case RtspHdrRealChallenge3:
		return "RealChallenge3"
	case RtspHdrSubscribe:
		return "Subscribe"
	case RtspHdrAlert:
		return "Alert"
	case RtspHdrClientID:
		return "ClientID"
	case RtspHdrCompanyID:
		return "CompanyID"
	case RtspHdrGUID:
		return "GUID"
	case RtspHdrRegionData:
		return "RegionData"
	case RtspHdrMaxAsmWidth:
		return "MaxAsmWidth"
	case RtspHdrLanguage:
		return "Language"
	case RtspHdrPlayerStartTime:
		return "PlayerStartTime"
	case RtspHdrLocation:
		return "Location"
	case RtspHdrETag:
		return "ETag"
	case RtspHdrIfMatch:
		return "IfMatch"
	case RtspHdrAcceptCharset:
		return "AcceptCharset"
	case RtspHdrSupported:
		return "Supported"
	case RtspHdrVary:
		return "Vary"
	case RtspHdrXAccelerateStreaming:
		return "XAccelerateStreaming"
	case RtspHdrXAcceptAuthent:
		return "XAcceptAuthent"
	case RtspHdrXAcceptProxyAuthent:
		return "XAcceptProxyAuthent"
	case RtspHdrXBroadcastID:
		return "XBroadcastID"
	case RtspHdrXBurstStreaming:
		return "XBurstStreaming"
	case RtspHdrXNotice:
		return "XNotice"
	case RtspHdrXPlayerLagTime:
		return "XPlayerLagTime"
	case RtspHdrXPlaylist:
		return "XPlaylist"
	case RtspHdrXPlaylistChangeNotice:
		return "XPlaylistChangeNotice"
	case RtspHdrXPlaylistGenID:
		return "XPlaylistGenID"
	case RtspHdrXPlaylistSeekID:
		return "XPlaylistSeekID"
	case RtspHdrXProxyClientAgent:
		return "XProxyClientAgent"
	case RtspHdrXProxyClientVerb:
		return "XProxyClientVerb"
	case RtspHdrXRecedingPlaylistchange:
		return "XRecedingPlaylistchange"
	case RtspHdrXRtpInfo:
		return "XRtpInfo"
	case RtspHdrXStartupprofile:
		return "XStartupprofile"
	case RtspHdrTimestamp:
		return "Timestamp"
	case RtspHdrAuthenticationInfo:
		return "AuthenticationInfo"
	case RtspHdrHost:
		return "Host"
	case RtspHdrPragma:
		return "Pragma"
	case RtspHdrXServerIPAddress:
		return "XServerIPAddress"
	case RtspHdrXSessioncookie:
		return "XSessioncookie"
	case RtspHdrRtcpInterval:
		return "RtcpInterval"
	case RtspHdrKeymgmt:
		return "Keymgmt"
	case RtspHdrPipelinedRequests:
		return "PipelinedRequests"
	case RtspHdrMediaProperties:
		return "MediaProperties"
	case RtspHdrSeekStyle:
		return "SeekStyle"
	case RtspHdrAcceptRanges:
		return "AcceptRanges"
	case RtspHdrFrames:
		return "Frames"
	case RtspHdrRateControl:
		return "RateControl"
	case RtspHdrLast:
		return "Last"
	default:
		return fmt.Sprintf("RTSPHeaderField(%d)", r)
	}
}

// RTSPResult: result codes from the RTSP functions.
type RTSPResult C.gint

const (
	// RtspOK: no error.
	RtspOK RTSPResult = 0
	// RtspError: some unspecified error occurred.
	RtspError RTSPResult = -1
	// RtspEinval: invalid arguments were provided to a function.
	RtspEinval RTSPResult = -2
	// RtspEintr: operation was canceled.
	RtspEintr RTSPResult = -3
	// RtspEnomem: no memory was available for the operation.
	RtspEnomem RTSPResult = -4
	// RtspEresolv: host resolve error occurred.
	RtspEresolv RTSPResult = -5
	// RtspEnotimpl: function not implemented.
	RtspEnotimpl RTSPResult = -6
	// RtspEsys: system error occurred, errno contains more details.
	RtspEsys RTSPResult = -7
	// RtspEparse: parsing error occurred.
	RtspEparse RTSPResult = -8
	// RtspEwsastart windows networking could not start.
	RtspEwsastart RTSPResult = -9
	// RtspEwsaversion windows networking stack has wrong version.
	RtspEwsaversion RTSPResult = -10
	// RtspEeof: end-of-file was reached.
	RtspEeof RTSPResult = -11
	// RtspEnet: network problem occurred, h_errno contains more details.
	RtspEnet RTSPResult = -12
	// RtspEnotip: host is not an IP host.
	RtspEnotip RTSPResult = -13
	// RtspEtimeout: timeout occurred.
	RtspEtimeout RTSPResult = -14
	// RtspEtget: tunnel GET request has been performed.
	RtspEtget RTSPResult = -15
	// RtspEtpost: tunnel POST request has been performed.
	RtspEtpost RTSPResult = -16
	// RtspElast: last error.
	RtspElast RTSPResult = -17
)

func marshalRTSPResult(p uintptr) (interface{}, error) {
	return RTSPResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPResult.
func (r RTSPResult) String() string {
	switch r {
	case RtspOK:
		return "OK"
	case RtspError:
		return "Error"
	case RtspEinval:
		return "Einval"
	case RtspEintr:
		return "Eintr"
	case RtspEnomem:
		return "Enomem"
	case RtspEresolv:
		return "Eresolv"
	case RtspEnotimpl:
		return "Enotimpl"
	case RtspEsys:
		return "Esys"
	case RtspEparse:
		return "Eparse"
	case RtspEwsastart:
		return "Ewsastart"
	case RtspEwsaversion:
		return "Ewsaversion"
	case RtspEeof:
		return "Eeof"
	case RtspEnet:
		return "Enet"
	case RtspEnotip:
		return "Enotip"
	case RtspEtimeout:
		return "Etimeout"
	case RtspEtget:
		return "Etget"
	case RtspEtpost:
		return "Etpost"
	case RtspElast:
		return "Elast"
	default:
		return fmt.Sprintf("RTSPResult(%d)", r)
	}
}

// RTSPState: different RTSP states.
type RTSPState C.gint

const (
	// RtspStateInvalid: invalid state.
	RtspStateInvalid RTSPState = iota
	// RtspStateInit: initializing.
	RtspStateInit
	// RtspStateReady: ready for operation.
	RtspStateReady
	// RtspStateSeeking: seeking in progress.
	RtspStateSeeking
	// RtspStatePlaying: playing.
	RtspStatePlaying
	// RtspStateRecording: recording.
	RtspStateRecording
)

func marshalRTSPState(p uintptr) (interface{}, error) {
	return RTSPState(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPState.
func (r RTSPState) String() string {
	switch r {
	case RtspStateInvalid:
		return "Invalid"
	case RtspStateInit:
		return "Init"
	case RtspStateReady:
		return "Ready"
	case RtspStateSeeking:
		return "Seeking"
	case RtspStatePlaying:
		return "Playing"
	case RtspStateRecording:
		return "Recording"
	default:
		return fmt.Sprintf("RTSPState(%d)", r)
	}
}

// RTSPStatusCode: enumeration of rtsp status codes.
type RTSPStatusCode C.gint

const (
	RtspStsInvalid                        RTSPStatusCode = 0
	RtspStsContinue                       RTSPStatusCode = 100
	RtspStsOK                             RTSPStatusCode = 200
	RtspStsCreated                        RTSPStatusCode = 201
	RtspStsLowOnStorage                   RTSPStatusCode = 250
	RtspStsMultipleChoices                RTSPStatusCode = 300
	RtspStsMovedPermanently               RTSPStatusCode = 301
	RtspStsMoveTemporarily                RTSPStatusCode = 302
	RtspStsSeeOther                       RTSPStatusCode = 303
	RtspStsNotModified                    RTSPStatusCode = 304
	RtspStsUseProxy                       RTSPStatusCode = 305
	RtspStsBadRequest                     RTSPStatusCode = 400
	RtspStsUnauthorized                   RTSPStatusCode = 401
	RtspStsPaymentRequired                RTSPStatusCode = 402
	RtspStsForbidden                      RTSPStatusCode = 403
	RtspStsNotFound                       RTSPStatusCode = 404
	RtspStsMethodNotAllowed               RTSPStatusCode = 405
	RtspStsNotAcceptable                  RTSPStatusCode = 406
	RtspStsProxyAuthRequired              RTSPStatusCode = 407
	RtspStsRequestTimeout                 RTSPStatusCode = 408
	RtspStsGone                           RTSPStatusCode = 410
	RtspStsLengthRequired                 RTSPStatusCode = 411
	RtspStsPreconditionFailed             RTSPStatusCode = 412
	RtspStsRequestEntityTooLarge          RTSPStatusCode = 413
	RtspStsRequestURITooLarge             RTSPStatusCode = 414
	RtspStsUnsupportedMediaType           RTSPStatusCode = 415
	RtspStsParameterNotUnderstood         RTSPStatusCode = 451
	RtspStsConferenceNotFound             RTSPStatusCode = 452
	RtspStsNotEnoughBandwidth             RTSPStatusCode = 453
	RtspStsSessionNotFound                RTSPStatusCode = 454
	RtspStsMethodNotValidInThisState      RTSPStatusCode = 455
	RtspStsHeaderFieldNotValidForResource RTSPStatusCode = 456
	RtspStsInvalidRange                   RTSPStatusCode = 457
	RtspStsParameterIsReadonly            RTSPStatusCode = 458
	RtspStsAggregateOperationNotAllowed   RTSPStatusCode = 459
	RtspStsOnlyAggregateOperationAllowed  RTSPStatusCode = 460
	RtspStsUnsupportedTransport           RTSPStatusCode = 461
	RtspStsDestinationUnreachable         RTSPStatusCode = 462
	RtspStsKeyManagementFailure           RTSPStatusCode = 463
	RtspStsInternalServerError            RTSPStatusCode = 500
	RtspStsNotImplemented                 RTSPStatusCode = 501
	RtspStsBadGateway                     RTSPStatusCode = 502
	RtspStsServiceUnavailable             RTSPStatusCode = 503
	RtspStsGatewayTimeout                 RTSPStatusCode = 504
	RtspStsRtspVersionNotSupported        RTSPStatusCode = 505
	RtspStsOptionNotSupported             RTSPStatusCode = 551
)

func marshalRTSPStatusCode(p uintptr) (interface{}, error) {
	return RTSPStatusCode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPStatusCode.
func (r RTSPStatusCode) String() string {
	switch r {
	case RtspStsInvalid:
		return "Invalid"
	case RtspStsContinue:
		return "Continue"
	case RtspStsOK:
		return "OK"
	case RtspStsCreated:
		return "Created"
	case RtspStsLowOnStorage:
		return "LowOnStorage"
	case RtspStsMultipleChoices:
		return "MultipleChoices"
	case RtspStsMovedPermanently:
		return "MovedPermanently"
	case RtspStsMoveTemporarily:
		return "MoveTemporarily"
	case RtspStsSeeOther:
		return "SeeOther"
	case RtspStsNotModified:
		return "NotModified"
	case RtspStsUseProxy:
		return "UseProxy"
	case RtspStsBadRequest:
		return "BadRequest"
	case RtspStsUnauthorized:
		return "Unauthorized"
	case RtspStsPaymentRequired:
		return "PaymentRequired"
	case RtspStsForbidden:
		return "Forbidden"
	case RtspStsNotFound:
		return "NotFound"
	case RtspStsMethodNotAllowed:
		return "MethodNotAllowed"
	case RtspStsNotAcceptable:
		return "NotAcceptable"
	case RtspStsProxyAuthRequired:
		return "ProxyAuthRequired"
	case RtspStsRequestTimeout:
		return "RequestTimeout"
	case RtspStsGone:
		return "Gone"
	case RtspStsLengthRequired:
		return "LengthRequired"
	case RtspStsPreconditionFailed:
		return "PreconditionFailed"
	case RtspStsRequestEntityTooLarge:
		return "RequestEntityTooLarge"
	case RtspStsRequestURITooLarge:
		return "RequestURITooLarge"
	case RtspStsUnsupportedMediaType:
		return "UnsupportedMediaType"
	case RtspStsParameterNotUnderstood:
		return "ParameterNotUnderstood"
	case RtspStsConferenceNotFound:
		return "ConferenceNotFound"
	case RtspStsNotEnoughBandwidth:
		return "NotEnoughBandwidth"
	case RtspStsSessionNotFound:
		return "SessionNotFound"
	case RtspStsMethodNotValidInThisState:
		return "MethodNotValidInThisState"
	case RtspStsHeaderFieldNotValidForResource:
		return "HeaderFieldNotValidForResource"
	case RtspStsInvalidRange:
		return "InvalidRange"
	case RtspStsParameterIsReadonly:
		return "ParameterIsReadonly"
	case RtspStsAggregateOperationNotAllowed:
		return "AggregateOperationNotAllowed"
	case RtspStsOnlyAggregateOperationAllowed:
		return "OnlyAggregateOperationAllowed"
	case RtspStsUnsupportedTransport:
		return "UnsupportedTransport"
	case RtspStsDestinationUnreachable:
		return "DestinationUnreachable"
	case RtspStsKeyManagementFailure:
		return "KeyManagementFailure"
	case RtspStsInternalServerError:
		return "InternalServerError"
	case RtspStsNotImplemented:
		return "NotImplemented"
	case RtspStsBadGateway:
		return "BadGateway"
	case RtspStsServiceUnavailable:
		return "ServiceUnavailable"
	case RtspStsGatewayTimeout:
		return "GatewayTimeout"
	case RtspStsRtspVersionNotSupported:
		return "RtspVersionNotSupported"
	case RtspStsOptionNotSupported:
		return "OptionNotSupported"
	default:
		return fmt.Sprintf("RTSPStatusCode(%d)", r)
	}
}

// RTSPVersion: supported RTSP versions.
type RTSPVersion C.gint

const (
	// RtspVersionInvalid: unknown/invalid version.
	RtspVersionInvalid RTSPVersion = 0
	// RtspVersion10: version 1.0.
	RtspVersion10 RTSPVersion = 16
	// RtspVersion11: version 1.1.
	RtspVersion11 RTSPVersion = 17
	// RtspVersion20: version 2.0.
	RtspVersion20 RTSPVersion = 32
)

func marshalRTSPVersion(p uintptr) (interface{}, error) {
	return RTSPVersion(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPVersion.
func (r RTSPVersion) String() string {
	switch r {
	case RtspVersionInvalid:
		return "Invalid"
	case RtspVersion10:
		return "10"
	case RtspVersion11:
		return "11"
	case RtspVersion20:
		return "20"
	default:
		return fmt.Sprintf("RTSPVersion(%d)", r)
	}
}

// RTSPVersionAsText: convert version to a string.
//
// The function takes the following parameters:
//
//    - version: RTSPVersion.
//
// The function returns the following values:
//
//    - utf8: string representation of version.
//
func RTSPVersionAsText(version RTSPVersion) string {
	var _arg1 C.GstRTSPVersion // out
	var _cret *C.gchar         // in

	_arg1 = C.GstRTSPVersion(version)

	_cret = C.gst_rtsp_version_as_text(_arg1)
	runtime.KeepAlive(version)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RTSPEvent: possible events for the connection.
type RTSPEvent C.guint

const (
	// RtspEvRead: connection is readable.
	RtspEvRead RTSPEvent = 0b1
	// RtspEvWrite: connection is writable.
	RtspEvWrite RTSPEvent = 0b10
)

func marshalRTSPEvent(p uintptr) (interface{}, error) {
	return RTSPEvent(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPEvent.
func (r RTSPEvent) String() string {
	if r == 0 {
		return "RTSPEvent(0)"
	}

	var builder strings.Builder
	builder.Grow(22)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspEvRead:
			builder.WriteString("Read|")
		case RtspEvWrite:
			builder.WriteString("Write|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPEvent(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPEvent) Has(other RTSPEvent) bool {
	return (r & other) == other
}

// RTSPMethod: different supported RTSP methods.
type RTSPMethod C.guint

const (
	// RtspInvalid: invalid method.
	RtspInvalid RTSPMethod = 0b0
	// RtspDescribe: DESCRIBE method.
	RtspDescribe RTSPMethod = 0b1
	// RtspAnnounce: ANNOUNCE method.
	RtspAnnounce RTSPMethod = 0b10
	// RtspGetParameter: GET_PARAMETER method.
	RtspGetParameter RTSPMethod = 0b100
	// RtspOptions: OPTIONS method.
	RtspOptions RTSPMethod = 0b1000
	// RtspPause: PAUSE method.
	RtspPause RTSPMethod = 0b10000
	// RtspPlay: PLAY method.
	RtspPlay RTSPMethod = 0b100000
	// RtspRecord: RECORD method.
	RtspRecord RTSPMethod = 0b1000000
	// RtspRedirect: REDIRECT method.
	RtspRedirect RTSPMethod = 0b10000000
	// RtspSetup: SETUP method.
	RtspSetup RTSPMethod = 0b100000000
	// RtspSetParameter: SET_PARAMETER method.
	RtspSetParameter RTSPMethod = 0b1000000000
	// RtspTeardown: TEARDOWN method.
	RtspTeardown RTSPMethod = 0b10000000000
	// RtspGet: GET method (HTTP).
	RtspGet RTSPMethod = 0b100000000000
	// RtspPost: POST method (HTTP).
	RtspPost RTSPMethod = 0b1000000000000
)

func marshalRTSPMethod(p uintptr) (interface{}, error) {
	return RTSPMethod(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTSPMethod.
func (r RTSPMethod) String() string {
	if r == 0 {
		return "RTSPMethod(0)"
	}

	var builder strings.Builder
	builder.Grow(166)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtspInvalid:
			builder.WriteString("Invalid|")
		case RtspDescribe:
			builder.WriteString("Describe|")
		case RtspAnnounce:
			builder.WriteString("Announce|")
		case RtspGetParameter:
			builder.WriteString("GetParameter|")
		case RtspOptions:
			builder.WriteString("Options|")
		case RtspPause:
			builder.WriteString("Pause|")
		case RtspPlay:
			builder.WriteString("Play|")
		case RtspRecord:
			builder.WriteString("Record|")
		case RtspRedirect:
			builder.WriteString("Redirect|")
		case RtspSetup:
			builder.WriteString("Setup|")
		case RtspSetParameter:
			builder.WriteString("SetParameter|")
		case RtspTeardown:
			builder.WriteString("Teardown|")
		case RtspGet:
			builder.WriteString("Get|")
		case RtspPost:
			builder.WriteString("Post|")
		default:
			builder.WriteString(fmt.Sprintf("RTSPMethod(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTSPMethod) Has(other RTSPMethod) bool {
	return (r & other) == other
}

// RTSPMethodAsText: convert method to a string.
//
// The function takes the following parameters:
//
//    - method: RTSPMethod.
//
// The function returns the following values:
//
//    - utf8: string representation of method.
//
func RTSPMethodAsText(method RTSPMethod) string {
	var _arg1 C.GstRTSPMethod // out
	var _cret *C.gchar        // in

	_arg1 = C.GstRTSPMethod(method)

	_cret = C.gst_rtsp_method_as_text(_arg1)
	runtime.KeepAlive(method)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RtspFindHeaderField: convert header to a RTSPHeaderField.
//
// The function takes the following parameters:
//
//    - header string.
//
// The function returns the following values:
//
//    - rtspHeaderField for header or T_RTSP_HDR_INVALID if the header field is
//      unknown.
//
func RtspFindHeaderField(header string) RTSPHeaderField {
	var _arg1 *C.gchar             // out
	var _cret C.GstRTSPHeaderField // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_find_header_field(_arg1)
	runtime.KeepAlive(header)

	var _rtspHeaderField RTSPHeaderField // out

	_rtspHeaderField = RTSPHeaderField(_cret)

	return _rtspHeaderField
}

// RtspFindMethod: convert method to a RTSPMethod.
//
// The function takes the following parameters:
//
//    - method: method.
//
// The function returns the following values:
//
//    - rtspMethod for method or T_RTSP_INVALID if the method is unknown.
//
func RtspFindMethod(method string) RTSPMethod {
	var _arg1 *C.gchar        // out
	var _cret C.GstRTSPMethod // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(method)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_find_method(_arg1)
	runtime.KeepAlive(method)

	var _rtspMethod RTSPMethod // out

	_rtspMethod = RTSPMethod(_cret)

	return _rtspMethod
}

// RtspHeaderAllowMultiple: check whether field may appear multiple times in a
// message.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//
// The function returns the following values:
//
//    - ok: TRUE if multiple headers are allowed.
//
func RtspHeaderAllowMultiple(field RTSPHeaderField) bool {
	var _arg1 C.GstRTSPHeaderField // out
	var _cret C.gboolean           // in

	_arg1 = C.GstRTSPHeaderField(field)

	_cret = C.gst_rtsp_header_allow_multiple(_arg1)
	runtime.KeepAlive(field)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RtspHeaderAsText: convert field to a string.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//
// The function returns the following values:
//
//    - utf8: string representation of field.
//
func RtspHeaderAsText(field RTSPHeaderField) string {
	var _arg1 C.GstRTSPHeaderField // out
	var _cret *C.gchar             // in

	_arg1 = C.GstRTSPHeaderField(field)

	_cret = C.gst_rtsp_header_as_text(_arg1)
	runtime.KeepAlive(field)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RtspOptionsAsText: convert options to a string.
//
// The function takes the following parameters:
//
//    - options: one or more RTSPMethod.
//
// The function returns the following values:
//
//    - utf8: new string of options. g_free() after usage.
//
func RtspOptionsAsText(options RTSPMethod) string {
	var _arg1 C.GstRTSPMethod // out
	var _cret *C.gchar        // in

	_arg1 = C.GstRTSPMethod(options)

	_cret = C.gst_rtsp_options_as_text(_arg1)
	runtime.KeepAlive(options)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RtspStatusAsText: convert code to a string.
//
// The function takes the following parameters:
//
//    - code: RTSPStatusCode.
//
// The function returns the following values:
//
//    - utf8: string representation of code.
//
func RtspStatusAsText(code RTSPStatusCode) string {
	var _arg1 C.GstRTSPStatusCode // out
	var _cret *C.gchar            // in

	_arg1 = C.GstRTSPStatusCode(code)

	_cret = C.gst_rtsp_status_as_text(_arg1)
	runtime.KeepAlive(code)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RtspStrresult: convert result in a human readable string.
//
// The function takes the following parameters:
//
//    - result: RTSPResult.
//
// The function returns the following values:
//
//    - utf8: newly allocated string. g_free() after usage.
//
func RtspStrresult(result RTSPResult) string {
	var _arg1 C.GstRTSPResult // out
	var _cret *C.gchar        // in

	_arg1 = C.GstRTSPResult(result)

	_cret = C.gst_rtsp_strresult(_arg1)
	runtime.KeepAlive(result)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
