// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// GType values.
var (
	GTypeRTSPMsgType = coreglib.Type(C.gst_rtsp_msg_type_get_type())
	GTypeRTSPMessage = coreglib.Type(C.gst_rtsp_msg_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTSPMsgType, F: marshalRTSPMsgType},
		coreglib.TypeMarshaler{T: GTypeRTSPMessage, F: marshalRTSPMessage},
	})
}

// RTSPMsgType: type of a message.
type RTSPMsgType C.gint

const (
	// RtspMessageInvalid: invalid message type.
	RtspMessageInvalid RTSPMsgType = iota
	// RtspMessageRequest: RTSP request message.
	RtspMessageRequest
	// RtspMessageResponse: RTSP response message.
	RtspMessageResponse
	// RtspMessageHTTPRequest: HTTP request message.
	RtspMessageHTTPRequest
	// RtspMessageHTTPResponse: HTTP response message.
	RtspMessageHTTPResponse
	// RtspMessageData: data message.
	RtspMessageData
)

func marshalRTSPMsgType(p uintptr) (interface{}, error) {
	return RTSPMsgType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPMsgType.
func (r RTSPMsgType) String() string {
	switch r {
	case RtspMessageInvalid:
		return "Invalid"
	case RtspMessageRequest:
		return "Request"
	case RtspMessageResponse:
		return "Response"
	case RtspMessageHTTPRequest:
		return "HTTPRequest"
	case RtspMessageHTTPResponse:
		return "HTTPResponse"
	case RtspMessageData:
		return "Data"
	default:
		return fmt.Sprintf("RTSPMsgType(%d)", r)
	}
}

// NewRtspMessage: create a new initialized RTSPMessage. Free with
// gst_rtsp_message_free().
//
// The function returns the following values:
//
//    - msg: location for the new RTSPMessage.
//    - rtspResult: RTSPResult.
//
func NewRtspMessage() (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage // in
	var _cret C.GstRTSPResult   // in

	_cret = C.gst_rtsp_message_new(&_arg1)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspMessageNewData: create a new data RTSPMessage with channel and store the
// result message in msg. Free with gst_rtsp_message_free().
//
// The function takes the following parameters:
//
//    - channel: channel.
//
// The function returns the following values:
//
//    - msg: location for the new RTSPMessage.
//    - rtspResult: RTSPResult.
//
func RtspMessageNewData(channel byte) (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage // in
	var _arg2 C.guint8          // out
	var _cret C.GstRTSPResult   // in

	_arg2 = C.guint8(channel)

	_cret = C.gst_rtsp_message_new_data(&_arg1, _arg2)
	runtime.KeepAlive(channel)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspMessageNewRequest: create a new RTSPMessage with method and uri and store
// the result request message in msg. Free with gst_rtsp_message_free().
//
// The function takes the following parameters:
//
//    - method: request method to use.
//    - uri of the request.
//
// The function returns the following values:
//
//    - msg: location for the new RTSPMessage.
//    - rtspResult: RTSPResult.
//
func RtspMessageNewRequest(method RTSPMethod, uri string) (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage // in
	var _arg2 C.GstRTSPMethod   // out
	var _arg3 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg2 = C.GstRTSPMethod(method)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.gst_rtsp_message_new_request(&_arg1, _arg2, _arg3)
	runtime.KeepAlive(method)
	runtime.KeepAlive(uri)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RtspMessageNewResponse: create a new response RTSPMessage with code and
// reason and store the result message in msg. Free with
// gst_rtsp_message_free().
//
// When reason is NULL, the default reason for code will be used.
//
// When request is not NULL, the relevant headers will be copied to the new
// response message.
//
// The function takes the following parameters:
//
//    - code status code.
//    - reason (optional) status reason or NULL.
//    - request (optional) that triggered the response or NULL.
//
// The function returns the following values:
//
//    - msg: location for the new RTSPMessage.
//    - rtspResult: RTSPResult.
//
func RtspMessageNewResponse(code RTSPStatusCode, reason string, request *RTSPMessage) (*RTSPMessage, RTSPResult) {
	var _arg1 *C.GstRTSPMessage   // in
	var _arg2 C.GstRTSPStatusCode // out
	var _arg3 *C.gchar            // out
	var _arg4 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg2 = C.GstRTSPStatusCode(code)
	if reason != "" {
		_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(reason)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	if request != nil {
		_arg4 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(request)))
	}

	_cret = C.gst_rtsp_message_new_response(&_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(code)
	runtime.KeepAlive(reason)
	runtime.KeepAlive(request)

	var _msg *RTSPMessage      // out
	var _rtspResult RTSPResult // out

	_msg = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_msg)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _msg, _rtspResult
}

// RTSPMessage provides methods for creating and parsing request, response and
// data messages.
//
// An instance of this type is always passed by reference.
type RTSPMessage struct {
	*rtspMessage
}

// rtspMessage is the struct that's finalized.
type rtspMessage struct {
	native *C.GstRTSPMessage
}

func marshalRTSPMessage(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPMessage{&rtspMessage{(*C.GstRTSPMessage)(b)}}, nil
}

// AddHeader: add a header with key field and value to msg. This function takes
// a copy of value.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//    - value of the header.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) AddHeader(field RTSPHeaderField, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 *C.gchar             // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_rtsp_message_add_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// AddHeaderByName: add a header with key header and value to msg. This function
// takes a copy of value.
//
// The function takes the following parameters:
//
//    - header string.
//    - value of the header.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) AddHeaderByName(header string, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_rtsp_message_add_header_by_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// Copy: allocate a new copy of msg and store the result in copy. The value in
// copy should be release with gst_rtsp_message_free function.
//
// The function returns the following values:
//
//    - copy: pointer to new RTSPMessage.
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) Copy() (*RTSPMessage, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstRTSPMessage // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_copy(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _copy *RTSPMessage     // out
	var _rtspResult RTSPResult // out

	_copy = (*RTSPMessage)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_copy)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_message_free((*C.GstRTSPMessage)(intern.C))
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _copy, _rtspResult
}

// Dump the contents of msg to stdout.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) Dump() RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_dump(_arg0)
	runtime.KeepAlive(msg)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// Body: get the body of msg. data remains valid for as long as msg is valid and
// unchanged.
//
// If the message body was set as a Buffer before this will cause the data to be
// copied and stored in the message. The Buffer will no longer be kept in the
// message.
//
// The function returns the following values:
//
//    - data: location for the data.
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) Body() ([]byte, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // in
	var _arg2 C.guint           // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_get_body(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(msg)

	var _data []byte           // out
	var _rtspResult RTSPResult // out

	_data = make([]byte, _arg2)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), _arg2))
	_rtspResult = RTSPResult(_cret)

	return _data, _rtspResult
}

// BodyBuffer: get the body of msg. buffer remains valid for as long as msg is
// valid and unchanged.
//
// If body data was set from raw memory instead of a Buffer this function will
// always return NULL. The caller can check if there is a body buffer by calling
// gst_rtsp_message_has_body_buffer().
//
// The function returns the following values:
//
//    - buffer: location for the buffer.
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) BodyBuffer() (*gst.Buffer, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_get_body_buffer(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _buffer *gst.Buffer    // out
	var _rtspResult RTSPResult // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	_rtspResult = RTSPResult(_cret)

	return _buffer, _rtspResult
}

// Header: get the indx header value with key field from msg. The result in
// value stays valid as long as it remains present in msg.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//    - indx: index of the header.
//
// The function returns the following values:
//
//    - value: pointer to hold the result.
//    - rtspResult when field was found, T_RTSP_ENOTIMPL if the key was not
//      found.
//
func (msg *RTSPMessage) Header(field RTSPHeaderField, indx int) (string, RTSPResult) {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 *C.gchar             // in
	var _arg3 C.gint               // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg3 = C.gint(indx)

	_cret = C.gst_rtsp_message_get_header(_arg0, _arg1, &_arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(indx)

	var _value string          // out
	var _rtspResult RTSPResult // out

	_value = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	_rtspResult = RTSPResult(_cret)

	return _value, _rtspResult
}

// HeaderByName: get the index header value with key header from msg. The result
// in value stays valid as long as it remains present in msg.
//
// The function takes the following parameters:
//
//    - header: RTSPHeaderField.
//    - index of the header.
//
// The function returns the following values:
//
//    - value: pointer to hold the result.
//    - rtspResult when field was found, T_RTSP_ENOTIMPL if the key was not
//      found.
//
func (msg *RTSPMessage) HeaderByName(header string, index int) (string, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // in
	var _arg3 C.gint            // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = C.gint(index)

	_cret = C.gst_rtsp_message_get_header_by_name(_arg0, _arg1, &_arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(index)

	var _value string          // out
	var _rtspResult RTSPResult // out

	_value = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	_rtspResult = RTSPResult(_cret)

	return _value, _rtspResult
}

// Type: get the message type of msg.
//
// The function returns the following values:
//
//    - rtspMsgType: message type.
//
func (msg *RTSPMessage) Type() RTSPMsgType {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPMsgType  // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_get_type(_arg0)
	runtime.KeepAlive(msg)

	var _rtspMsgType RTSPMsgType // out

	_rtspMsgType = RTSPMsgType(_cret)

	return _rtspMsgType
}

// HasBodyBuffer checks if msg has a body and the body is stored as Buffer.
//
// The function returns the following values:
//
//    - ok: TRUE if msg has a body and it's stored as Buffer, FALSE otherwise.
//
func (msg *RTSPMessage) HasBodyBuffer() bool {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.gboolean        // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_has_body_buffer(_arg0)
	runtime.KeepAlive(msg)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Init: initialize msg. This function is mostly used when msg is allocated on
// the stack. The reverse operation of this is gst_rtsp_message_unset().
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) Init() RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_init(_arg0)
	runtime.KeepAlive(msg)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// InitData: initialize a new data RTSPMessage for channel.
//
// The function takes the following parameters:
//
//    - channel: channel.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) InitData(channel byte) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.guint8          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.guint8(channel)

	_cret = C.gst_rtsp_message_init_data(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(channel)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// InitRequest: initialize msg as a request message with method and uri. To
// clear msg again, use gst_rtsp_message_unset().
//
// The function takes the following parameters:
//
//    - method: request method to use.
//    - uri of the request.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) InitRequest(method RTSPMethod, uri string) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.GstRTSPMethod   // out
	var _arg2 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPMethod(method)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.gst_rtsp_message_init_request(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(method)
	runtime.KeepAlive(uri)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// InitResponse: initialize msg with code and reason.
//
// When reason is NULL, the default reason for code will be used.
//
// When request is not NULL, the relevant headers will be copied to the new
// response message.
//
// The function takes the following parameters:
//
//    - code status code.
//    - reason (optional) status reason or NULL.
//    - request (optional) that triggered the response or NULL.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) InitResponse(code RTSPStatusCode, reason string, request *RTSPMessage) RTSPResult {
	var _arg0 *C.GstRTSPMessage   // out
	var _arg1 C.GstRTSPStatusCode // out
	var _arg2 *C.gchar            // out
	var _arg3 *C.GstRTSPMessage   // out
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPStatusCode(code)
	if reason != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(reason)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if request != nil {
		_arg3 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(request)))
	}

	_cret = C.gst_rtsp_message_init_response(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(code)
	runtime.KeepAlive(reason)
	runtime.KeepAlive(request)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// ParseAuthCredentials parses the credentials given in a WWW-Authenticate or
// Authorization header.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//
// The function returns the following values:
//
//    - rtspAuthCredentials: NULL-terminated array of GstRTSPAuthCredential or
//      NULL.
//
func (msg *RTSPMessage) ParseAuthCredentials(field RTSPHeaderField) []*RTSPAuthCredential {
	var _arg0 *C.GstRTSPMessage         // out
	var _arg1 C.GstRTSPHeaderField      // out
	var _cret **C.GstRTSPAuthCredential // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)

	_cret = C.gst_rtsp_message_parse_auth_credentials(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)

	var _rtspAuthCredentials []*RTSPAuthCredential // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.GstRTSPAuthCredential
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_rtspAuthCredentials = make([]*RTSPAuthCredential, i)
		for i := range src {
			_rtspAuthCredentials[i] = (*RTSPAuthCredential)(gextras.NewStructNative(unsafe.Pointer(src[i])))
			runtime.SetFinalizer(
				gextras.StructIntern(unsafe.Pointer(_rtspAuthCredentials[i])),
				func(intern *struct{ C unsafe.Pointer }) {
					C.free(intern.C)
				},
			)
		}
	}

	return _rtspAuthCredentials
}

// ParseData: parse the data message msg and store the channel in channel.
//
// The function returns the following values:
//
//    - channel: location to hold the channel.
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) ParseData() (byte, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.guint8          // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_parse_data(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _channel byte          // out
	var _rtspResult RTSPResult // out

	_channel = byte(_arg1)
	_rtspResult = RTSPResult(_cret)

	return _channel, _rtspResult
}

// ParseRequest: parse the request message msg and store the values method, uri
// and version. The result locations can be NULL if one is not interested in its
// value.
//
// uri remains valid for as long as msg is valid and unchanged.
//
// The function returns the following values:
//
//    - method (optional): location to hold the method.
//    - uri (optional): location to hold the uri.
//    - version (optional): location to hold the version.
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) ParseRequest() (RTSPMethod, string, RTSPVersion, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 C.GstRTSPMethod   // in
	var _arg2 *C.gchar          // in
	var _arg3 C.GstRTSPVersion  // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_parse_request(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(msg)

	var _method RTSPMethod     // out
	var _uri string            // out
	var _version RTSPVersion   // out
	var _rtspResult RTSPResult // out

	_method = RTSPMethod(_arg1)
	if _arg2 != nil {
		_uri = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_version = RTSPVersion(_arg3)
	_rtspResult = RTSPResult(_cret)

	return _method, _uri, _version, _rtspResult
}

// ParseResponse: parse the response message msg and store the values code,
// reason and version. The result locations can be NULL if one is not interested
// in its value.
//
// reason remains valid for as long as msg is valid and unchanged.
//
// The function returns the following values:
//
//    - code (optional): location to hold the status code.
//    - reason (optional): location to hold the status reason.
//    - version (optional): location to hold the version.
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) ParseResponse() (RTSPStatusCode, string, RTSPVersion, RTSPResult) {
	var _arg0 *C.GstRTSPMessage   // out
	var _arg1 C.GstRTSPStatusCode // in
	var _arg2 *C.gchar            // in
	var _arg3 C.GstRTSPVersion    // in
	var _cret C.GstRTSPResult     // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_parse_response(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(msg)

	var _code RTSPStatusCode   // out
	var _reason string         // out
	var _version RTSPVersion   // out
	var _rtspResult RTSPResult // out

	_code = RTSPStatusCode(_arg1)
	if _arg2 != nil {
		_reason = C.GoString((*C.gchar)(unsafe.Pointer(_arg2)))
	}
	_version = RTSPVersion(_arg3)
	_rtspResult = RTSPResult(_cret)

	return _code, _reason, _version, _rtspResult
}

// RemoveHeader: remove the indx header with key field from msg. If indx equals
// -1, all headers will be removed.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//    - indx: index of the header.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) RemoveHeader(field RTSPHeaderField, indx int) RTSPResult {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 C.gint               // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg2 = C.gint(indx)

	_cret = C.gst_rtsp_message_remove_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(indx)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// RemoveHeaderByName: remove the index header with key header from msg. If
// index equals -1, all matching headers will be removed.
//
// The function takes the following parameters:
//
//    - header string.
//    - index of the header.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) RemoveHeaderByName(header string, index int) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 C.gint            // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gint(index)

	_cret = C.gst_rtsp_message_remove_header_by_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(index)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// SetBody: set the body of msg to a copy of data. Any existing body or body
// buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//    - data: data.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) SetBody(data []byte) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // out
	var _arg2 C.guint
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg2 = (C.guint)(len(data))
	if len(data) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	_cret = C.gst_rtsp_message_set_body(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(data)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// SetBodyBuffer: set the body of msg to buffer. Any existing body or body
// buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) SetBodyBuffer(buffer *gst.Buffer) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_rtsp_message_set_body_buffer(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(buffer)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// StealBody: take the body of msg and store it in data and size. After this
// method, the body and size of msg will be set to NULL and 0 respectively.
//
// The function returns the following values:
//
//    - data: location for the data.
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) StealBody() ([]byte, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // in
	var _arg2 C.guint           // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_steal_body(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(msg)

	var _data []byte           // out
	var _rtspResult RTSPResult // out

	defer C.free(unsafe.Pointer(_arg1))
	_data = make([]byte, _arg2)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), _arg2))
	_rtspResult = RTSPResult(_cret)

	return _data, _rtspResult
}

// StealBodyBuffer: take the body of msg and store it in buffer. After this
// method, the body and size of msg will be set to NULL and 0 respectively.
//
// If body data was set from raw memory instead of a Buffer this function will
// always return NULL. The caller can check if there is a body buffer by calling
// gst_rtsp_message_has_body_buffer().
//
// The function returns the following values:
//
//    - buffer: location for the buffer.
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) StealBodyBuffer() (*gst.Buffer, RTSPResult) {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // in
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_steal_body_buffer(_arg0, &_arg1)
	runtime.KeepAlive(msg)

	var _buffer *gst.Buffer    // out
	var _rtspResult RTSPResult // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_arg1)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_rtspResult = RTSPResult(_cret)

	return _buffer, _rtspResult
}

// TakeBody: set the body of msg to data and size. This method takes ownership
// of data. Any existing body or body buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//    - data: data.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) TakeBody(data []byte) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.guint8         // out
	var _arg2 C.guint
	var _cret C.GstRTSPResult // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg2 = (C.guint)(len(data))
	_arg1 = (*C.guint8)(C.calloc(C.size_t(len(data)), C.size_t(C.sizeof_guint8)))
	copy(unsafe.Slice((*byte)(_arg1), len(data)), data)

	_cret = C.gst_rtsp_message_take_body(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(data)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// TakeBodyBuffer: set the body of msg to buffer. This method takes ownership of
// buffer. Any existing body or body buffer will be replaced by the new body.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) TakeBodyBuffer(buffer *gst.Buffer) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.GstBuffer      // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)

	_cret = C.gst_rtsp_message_take_body_buffer(_arg0, _arg1)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(buffer)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// TakeHeader: add a header with key field and value to msg. This function takes
// ownership of value.
//
// The function takes the following parameters:
//
//    - field: RTSPHeaderField.
//    - value of the header.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) TakeHeader(field RTSPHeaderField, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage    // out
	var _arg1 C.GstRTSPHeaderField // out
	var _arg2 *C.gchar             // out
	var _cret C.GstRTSPResult      // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = C.GstRTSPHeaderField(field)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))

	_cret = C.gst_rtsp_message_take_header(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(field)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// TakeHeaderByName: add a header with key header and value to msg. This
// function takes ownership of value, but not of header.
//
// The function takes the following parameters:
//
//    - header string.
//    - value of the header.
//
// The function returns the following values:
//
//    - rtspResult: RTSPResult.
//
func (msg *RTSPMessage) TakeHeaderByName(header string, value string) RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))

	_cret = C.gst_rtsp_message_take_header_by_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(header)
	runtime.KeepAlive(value)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}

// Unset the contents of msg so that it becomes an uninitialized RTSPMessage
// again. This function is mostly used in combination with
// gst_rtsp_message_init_request(), gst_rtsp_message_init_response() and
// gst_rtsp_message_init_data() on stack allocated RTSPMessage structures.
//
// The function returns the following values:
//
//    - rtspResult: T_RTSP_OK.
//
func (msg *RTSPMessage) Unset() RTSPResult {
	var _arg0 *C.GstRTSPMessage // out
	var _cret C.GstRTSPResult   // in

	_arg0 = (*C.GstRTSPMessage)(gextras.StructNative(unsafe.Pointer(msg)))

	_cret = C.gst_rtsp_message_unset(_arg0)
	runtime.KeepAlive(msg)

	var _rtspResult RTSPResult // out

	_rtspResult = RTSPResult(_cret)

	return _rtspResult
}
