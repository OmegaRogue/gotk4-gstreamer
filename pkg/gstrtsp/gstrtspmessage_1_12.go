// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// GType values.
var (
	GTypeRTSPAuthCredential = coreglib.Type(C.gst_rtsp_auth_credential_get_type())
	GTypeRTSPAuthParam      = coreglib.Type(C.gst_rtsp_auth_param_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTSPAuthCredential, F: marshalRTSPAuthCredential},
		coreglib.TypeMarshaler{T: GTypeRTSPAuthParam, F: marshalRTSPAuthParam},
	})
}

// RTSPAuthCredential: RTSP Authentication credentials
//
// An instance of this type is always passed by reference.
type RTSPAuthCredential struct {
	*rtspAuthCredential
}

// rtspAuthCredential is the struct that's finalized.
type rtspAuthCredential struct {
	native *C.GstRTSPAuthCredential
}

func marshalRTSPAuthCredential(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPAuthCredential{&rtspAuthCredential{(*C.GstRTSPAuthCredential)(b)}}, nil
}

// Scheme: RTSPAuthMethod.
func (r *RTSPAuthCredential) Scheme() RTSPAuthMethod {
	valptr := &r.native.scheme
	var _v RTSPAuthMethod // out
	_v = RTSPAuthMethod(*valptr)
	return _v
}

// Params: NULL-terminated array of RTSPAuthParam.
func (r *RTSPAuthCredential) Params() *RTSPAuthParam {
	valptr := &r.native.params
	var _v *RTSPAuthParam // out
	_v = (*RTSPAuthParam)(gextras.NewStructNative(unsafe.Pointer((**valptr))))
	return _v
}

// Authorization: authorization for the basic schem.
func (r *RTSPAuthCredential) Authorization() string {
	valptr := &r.native.authorization
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// RTSPAuthParam: RTSP Authentication parameter
//
// An instance of this type is always passed by reference.
type RTSPAuthParam struct {
	*rtspAuthParam
}

// rtspAuthParam is the struct that's finalized.
type rtspAuthParam struct {
	native *C.GstRTSPAuthParam
}

func marshalRTSPAuthParam(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &RTSPAuthParam{&rtspAuthParam{(*C.GstRTSPAuthParam)(b)}}, nil
}

// Name: name of the parameter.
func (r *RTSPAuthParam) Name() string {
	valptr := &r.native.name
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// Value: value of the parameter.
func (r *RTSPAuthParam) Value() string {
	valptr := &r.native.value
	var _v string // out
	_v = C.GoString((*C.gchar)(unsafe.Pointer(*valptr)))
	return _v
}

// The function returns the following values:
//
func (param *RTSPAuthParam) Copy() *RTSPAuthParam {
	var _arg0 *C.GstRTSPAuthParam // out
	var _cret *C.GstRTSPAuthParam // in

	_arg0 = (*C.GstRTSPAuthParam)(gextras.StructNative(unsafe.Pointer(param)))

	_cret = C.gst_rtsp_auth_param_copy(_arg0)
	runtime.KeepAlive(param)

	var _rtspAuthParam *RTSPAuthParam // out

	_rtspAuthParam = (*RTSPAuthParam)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_rtspAuthParam)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.gst_rtsp_auth_param_free((*C.GstRTSPAuthParam)(intern.C))
		},
	)

	return _rtspAuthParam
}
