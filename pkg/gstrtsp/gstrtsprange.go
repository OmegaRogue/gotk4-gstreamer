// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// GType values.
var (
	GTypeRTSPRangeUnit = coreglib.Type(C.gst_rtsp_range_unit_get_type())
	GTypeRTSPTimeType  = coreglib.Type(C.gst_rtsp_time_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTSPRangeUnit, F: marshalRTSPRangeUnit},
		coreglib.TypeMarshaler{T: GTypeRTSPTimeType, F: marshalRTSPTimeType},
	})
}

// RTSPRangeUnit: different possible time range units.
type RTSPRangeUnit C.gint

const (
	// RtspRangeSmpte: SMPTE timecode.
	RtspRangeSmpte RTSPRangeUnit = iota
	// RtspRangeSmpte30Drop: 29.97 frames per second.
	RtspRangeSmpte30Drop
	// RtspRangeSmpte25: 25 frames per second.
	RtspRangeSmpte25
	// RtspRangeNpt: normal play time.
	RtspRangeNpt
	// RtspRangeClock: absolute time expressed as ISO 8601 timestamps.
	RtspRangeClock
)

func marshalRTSPRangeUnit(p uintptr) (interface{}, error) {
	return RTSPRangeUnit(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPRangeUnit.
func (r RTSPRangeUnit) String() string {
	switch r {
	case RtspRangeSmpte:
		return "Smpte"
	case RtspRangeSmpte30Drop:
		return "Smpte30Drop"
	case RtspRangeSmpte25:
		return "Smpte25"
	case RtspRangeNpt:
		return "Npt"
	case RtspRangeClock:
		return "Clock"
	default:
		return fmt.Sprintf("RTSPRangeUnit(%d)", r)
	}
}

// RTSPTimeType: possible time types.
type RTSPTimeType C.gint

const (
	// RtspTimeSeconds: seconds.
	RtspTimeSeconds RTSPTimeType = iota
	// RtspTimeNow: now.
	RtspTimeNow
	// RtspTimeEnd: end.
	RtspTimeEnd
	// RtspTimeFrames frames and subframes.
	RtspTimeFrames
	// RtspTimeUTC: UTC time.
	RtspTimeUTC
)

func marshalRTSPTimeType(p uintptr) (interface{}, error) {
	return RTSPTimeType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTSPTimeType.
func (r RTSPTimeType) String() string {
	switch r {
	case RtspTimeSeconds:
		return "Seconds"
	case RtspTimeNow:
		return "Now"
	case RtspTimeEnd:
		return "End"
	case RtspTimeFrames:
		return "Frames"
	case RtspTimeUTC:
		return "UTC"
	default:
		return fmt.Sprintf("RTSPTimeType(%d)", r)
	}
}

// RTSPRangeConvertUnits converts the range in-place between different types of
// units. Ranges containing the special value T_RTSP_TIME_NOW can not be
// converted as these are only valid for T_RTSP_RANGE_NPT.
//
// The function takes the following parameters:
//
//    - range: RTSPTimeRange.
//    - unit to convert the range into.
//
// The function returns the following values:
//
//    - ok: TRUE if the range could be converted.
//
func RTSPRangeConvertUnits(_range *RTSPTimeRange, unit RTSPRangeUnit) bool {
	var _arg1 *C.GstRTSPTimeRange // out
	var _arg2 C.GstRTSPRangeUnit  // out
	var _cret C.gboolean          // in

	_arg1 = (*C.GstRTSPTimeRange)(gextras.StructNative(unsafe.Pointer(_range)))
	_arg2 = C.GstRTSPRangeUnit(unit)

	_cret = C.gst_rtsp_range_convert_units(_arg1, _arg2)
	runtime.KeepAlive(_range)
	runtime.KeepAlive(unit)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RTSPRangeParse: parse rangestr to a RTSPTimeRange.
//
// The function takes the following parameters:
//
//    - rangestr: range string to parse.
//
// The function returns the following values:
//
//    - _range: location to hold the RTSPTimeRange result.
//    - rtspResult on success.
//
func RTSPRangeParse(rangestr string) (*RTSPTimeRange, RTSPResult) {
	var _arg1 *C.gchar            // out
	var _arg2 *C.GstRTSPTimeRange // in
	var _cret C.GstRTSPResult     // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(rangestr)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.gst_rtsp_range_parse(_arg1, &_arg2)
	runtime.KeepAlive(rangestr)

	var __range *RTSPTimeRange // out
	var _rtspResult RTSPResult // out

	__range = (*RTSPTimeRange)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(__range)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)
	_rtspResult = RTSPResult(_cret)

	return __range, _rtspResult
}

// RTSPRangeToString: convert range into a string representation.
//
// The function takes the following parameters:
//
//    - range: RTSPTimeRange.
//
// The function returns the following values:
//
//    - utf8: string representation of range. g_free() after usage.
//
func RTSPRangeToString(_range *RTSPTimeRange) string {
	var _arg1 *C.GstRTSPTimeRange // out
	var _cret *C.gchar            // in

	_arg1 = (*C.GstRTSPTimeRange)(gextras.StructNative(unsafe.Pointer(_range)))

	_cret = C.gst_rtsp_range_to_string(_arg1)
	runtime.KeepAlive(_range)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RTSPTime: time indication.
//
// An instance of this type is always passed by reference.
type RTSPTime struct {
	*rtspTime
}

// rtspTime is the struct that's finalized.
type rtspTime struct {
	native *C.GstRTSPTime
}

// Type: time of the time.
func (r *RTSPTime) Type() RTSPTimeType {
	valptr := &r.native._type
	var _v RTSPTimeType // out
	_v = RTSPTimeType(*valptr)
	return _v
}

// Seconds seconds when type is GST_RTSP_TIME_SECONDS, GST_RTSP_TIME_UTC and
// GST_RTSP_TIME_FRAMES.
func (r *RTSPTime) Seconds() float64 {
	valptr := &r.native.seconds
	var _v float64 // out
	_v = float64(*valptr)
	return _v
}

// Seconds seconds when type is GST_RTSP_TIME_SECONDS, GST_RTSP_TIME_UTC and
// GST_RTSP_TIME_FRAMES.
func (r *RTSPTime) SetSeconds(seconds float64) {
	valptr := &r.native.seconds
	*valptr = C.gdouble(seconds)
}

// RTSPTimeRange: time range.
//
// An instance of this type is always passed by reference.
type RTSPTimeRange struct {
	*rtspTimeRange
}

// rtspTimeRange is the struct that's finalized.
type rtspTimeRange struct {
	native *C.GstRTSPTimeRange
}

// Unit: time units used.
func (r *RTSPTimeRange) Unit() RTSPRangeUnit {
	valptr := &r.native.unit
	var _v RTSPRangeUnit // out
	_v = RTSPRangeUnit(*valptr)
	return _v
}

// Min: minimum interval.
func (r *RTSPTimeRange) Min() *RTSPTime {
	valptr := &r.native.min
	var _v *RTSPTime // out
	_v = (*RTSPTime)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Max: maximum interval.
func (r *RTSPTimeRange) Max() *RTSPTime {
	valptr := &r.native.max
	var _v *RTSPTime // out
	_v = (*RTSPTime)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Min2: extra fields in the minimum interval (Since: 1.2).
func (r *RTSPTimeRange) Min2() *RTSPTime2 {
	valptr := &r.native.min2
	var _v *RTSPTime2 // out
	_v = (*RTSPTime2)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Max2: extra fields in the maximum interval (Since: 1.2).
func (r *RTSPTimeRange) Max2() *RTSPTime2 {
	valptr := &r.native.max2
	var _v *RTSPTime2 // out
	_v = (*RTSPTime2)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
