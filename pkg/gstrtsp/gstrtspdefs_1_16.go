// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <gst/rtsp/rtsp.h>
import "C"

// RtspGenerateDigestAuthResponseFromMD5 calculates the digest auth response
// from the values given by the server and the md5sum. See RFC2069 for details.
//
// This function is useful when the passwords are not stored in clear text, but
// instead in the same format as the .htdigest file.
//
// Currently only supported algorithm "md5".
//
// The function takes the following parameters:
//
//    - algorithm (optional): hash algorithm to use, or NULL for MD5.
//    - method: request method, e.g. PLAY.
//    - md5 sum of username:realm:password.
//    - uri: original request URI.
//    - nonce: nonce.
//
// The function returns the following values:
//
//    - utf8: authentication response or NULL if unsupported.
//
func RtspGenerateDigestAuthResponseFromMD5(algorithm, method, md5, uri, nonce string) string {
	var _arg1 *C.gchar // out
	var _arg2 *C.gchar // out
	var _arg3 *C.gchar // out
	var _arg4 *C.gchar // out
	var _arg5 *C.gchar // out
	var _cret *C.gchar // in

	if algorithm != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(algorithm)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(method)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(md5)))
	defer C.free(unsafe.Pointer(_arg3))
	_arg4 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg4))
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(nonce)))
	defer C.free(unsafe.Pointer(_arg5))

	_cret = C.gst_rtsp_generate_digest_auth_response_from_md5(_arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(algorithm)
	runtime.KeepAlive(method)
	runtime.KeepAlive(md5)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(nonce)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}
