// Code generated by girgen. DO NOT EDIT.

package gstrtsp

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <gst/rtsp/rtsp.h>
import "C"

//export _gotk4_gstrtsp1_RTSPConnectionAcceptCertificateFunc
func _gotk4_gstrtsp1_RTSPConnectionAcceptCertificateFunc(arg1 *C.GTlsConnection, arg2 *C.GTlsCertificate, arg3 C.GTlsCertificateFlags, arg4 C.gpointer) (cret C.gboolean) {
	var fn RTSPConnectionAcceptCertificateFunc
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(RTSPConnectionAcceptCertificateFunc)
	}

	var _conn gio.TLSConnectioner       // out
	var _peerCert gio.TLSCertificater   // out
	var _errors gio.TLSCertificateFlags // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.TLSConnectioner is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.TLSConnectioner)
			return ok
		})
		rv, ok := casted.(gio.TLSConnectioner)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSConnectioner")
		}
		_conn = rv
	}
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gio.TLSCertificater is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.TLSCertificater)
			return ok
		})
		rv, ok := casted.(gio.TLSCertificater)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
		}
		_peerCert = rv
	}
	_errors = gio.TLSCertificateFlags(arg3)

	ok := fn(_conn, _peerCert, _errors)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
