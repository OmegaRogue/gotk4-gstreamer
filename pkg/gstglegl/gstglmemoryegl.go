// Code generated by girgen. DO NOT EDIT.

package gstglegl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gstgl"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/gl/egl/egl.h>
import "C"

// GType values.
var (
	GTypeGLMemoryEGLAllocator = coreglib.Type(C.gst_gl_memory_egl_allocator_get_type())
	GTypeGLMemoryEGL          = coreglib.Type(C.gst_gl_memory_egl_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeGLMemoryEGLAllocator, F: marshalGLMemoryEGLAllocator},
		coreglib.TypeMarshaler{T: GTypeGLMemoryEGL, F: marshalGLMemoryEGL},
	})
}

// GL_MEMORY_EGL_ALLOCATOR_NAME: name of the GL Memory EGL allocator.
const GL_MEMORY_EGL_ALLOCATOR_NAME = "GLMemoryEGL"

// GLMemoryEGLAllocatorOverrides contains methods that are overridable.
type GLMemoryEGLAllocatorOverrides struct {
}

func defaultGLMemoryEGLAllocatorOverrides(v *GLMemoryEGLAllocator) GLMemoryEGLAllocatorOverrides {
	return GLMemoryEGLAllocatorOverrides{}
}

// GLMemoryEGLAllocator: opaque GLMemoryEGLAllocator struct.
type GLMemoryEGLAllocator struct {
	_ [0]func() // equal guard
	gstgl.GLMemoryAllocator
}

var (
	_ gstgl.GLBaseMemoryAllocatorrer = (*GLMemoryEGLAllocator)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*GLMemoryEGLAllocator, *GLMemoryEGLAllocatorClass, GLMemoryEGLAllocatorOverrides](
		GTypeGLMemoryEGLAllocator,
		initGLMemoryEGLAllocatorClass,
		wrapGLMemoryEGLAllocator,
		defaultGLMemoryEGLAllocatorOverrides,
	)
}

func initGLMemoryEGLAllocatorClass(gclass unsafe.Pointer, overrides GLMemoryEGLAllocatorOverrides, classInitFunc func(*GLMemoryEGLAllocatorClass)) {
	if classInitFunc != nil {
		class := (*GLMemoryEGLAllocatorClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapGLMemoryEGLAllocator(obj *coreglib.Object) *GLMemoryEGLAllocator {
	return &GLMemoryEGLAllocator{
		GLMemoryAllocator: gstgl.GLMemoryAllocator{
			GLBaseMemoryAllocator: gstgl.GLBaseMemoryAllocator{
				Allocator: gst.Allocator{
					GstObject: gst.GstObject{
						InitiallyUnowned: coreglib.InitiallyUnowned{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalGLMemoryEGLAllocator(p uintptr) (interface{}, error) {
	return wrapGLMemoryEGLAllocator(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// GLMemoryEGL is created or wrapped through gst_gl_base_memory_alloc() with
// GLVideoAllocationParams.
//
// An instance of this type is always passed by reference.
type GLMemoryEGL struct {
	*glMemoryEGL
}

// glMemoryEGL is the struct that's finalized.
type glMemoryEGL struct {
	native *C.GstGLMemoryEGL
}

func marshalGLMemoryEGL(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &GLMemoryEGL{&glMemoryEGL{(*C.GstGLMemoryEGL)(b)}}, nil
}

// The function returns the following values:
//
//    - gpointer (optional): EGLDisplay mem is associated with.
//
func (mem *GLMemoryEGL) Display() unsafe.Pointer {
	var _arg0 *C.GstGLMemoryEGL // out
	var _cret C.gpointer        // in

	_arg0 = (*C.GstGLMemoryEGL)(gextras.StructNative(unsafe.Pointer(mem)))

	_cret = C.gst_gl_memory_egl_get_display(_arg0)
	runtime.KeepAlive(mem)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}

// The function returns the following values:
//
//    - gpointer (optional): EGLImage held by mem.
//
func (mem *GLMemoryEGL) Image() unsafe.Pointer {
	var _arg0 *C.GstGLMemoryEGL // out
	var _cret C.gpointer        // in

	_arg0 = (*C.GstGLMemoryEGL)(gextras.StructNative(unsafe.Pointer(mem)))

	_cret = C.gst_gl_memory_egl_get_image(_arg0)
	runtime.KeepAlive(mem)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}

// GLMemoryEGLAllocatorClass only contains private data
//
// An instance of this type is always passed by reference.
type GLMemoryEGLAllocatorClass struct {
	*glMemoryEGLAllocatorClass
}

// glMemoryEGLAllocatorClass is the struct that's finalized.
type glMemoryEGLAllocatorClass struct {
	native *C.GstGLMemoryEGLAllocatorClass
}
