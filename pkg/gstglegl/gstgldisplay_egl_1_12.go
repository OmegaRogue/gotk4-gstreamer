// Code generated by girgen. DO NOT EDIT.

package gstglegl

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gstgl"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/gl/egl/egl.h>
import "C"

// GLDisplayEGLFromGLDisplay creates a EGL display connection from a native
// Display.
//
// This function will return the same value for multiple calls with the same
// display.
//
// The function takes the following parameters:
//
//    - display: existing GLDisplay.
//
// The function returns the following values:
//
//    - glDisplayEGL: new GLDisplayEGL.
//
func GLDisplayEGLFromGLDisplay(display *gstgl.GLDisplay) *GLDisplayEGL {
	var _arg1 *C.GstGLDisplay    // out
	var _cret *C.GstGLDisplayEGL // in

	_arg1 = (*C.GstGLDisplay)(unsafe.Pointer(coreglib.InternObject(display).Native()))

	_cret = C.gst_gl_display_egl_from_gl_display(_arg1)
	runtime.KeepAlive(display)

	var _glDisplayEGL *GLDisplayEGL // out

	_glDisplayEGL = wrapGLDisplayEGL(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _glDisplayEGL
}

// GLDisplayEGLGetFromNative attempts to create a new EGLDisplay from display.
// If type is GST_GL_DISPLAY_TYPE_ANY, then display must be 0. type must not be
// GST_GL_DISPLAY_TYPE_NONE.
//
// The function takes the following parameters:
//
//    - typ: GLDisplayType.
//    - display: pointer to a display (or 0).
//
// The function returns the following values:
//
//    - gpointer (optional): EGLDisplay or EGL_NO_DISPLAY.
//
func GLDisplayEGLGetFromNative(typ gstgl.GLDisplayType, display uintptr) unsafe.Pointer {
	var _arg1 C.GstGLDisplayType // out
	var _arg2 C.guintptr         // out
	var _cret C.gpointer         // in

	_arg1 = C.GstGLDisplayType(typ)
	_arg2 = (C.guintptr)(unsafe.Pointer(display))

	_cret = C.gst_gl_display_egl_get_from_native(_arg1, _arg2)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(display)

	var _gpointer unsafe.Pointer // out

	_gpointer = (unsafe.Pointer)(unsafe.Pointer(_cret))

	return _gpointer
}
