// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <gst/rtp/rtp.h>
import "C"

//export _gotk4_gstrtp1_RTPBaseDepayload_ConnectAddExtension
func _gotk4_gstrtp1_RTPBaseDepayload_ConnectAddExtension(arg0 C.gpointer, arg1 *C.GstRTPHeaderExtension, arg2 C.guintptr) {
	var f func(ext RTPHeaderExtensioner)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(ext RTPHeaderExtensioner))
	}

	var _ext RTPHeaderExtensioner // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gstrtp.RTPHeaderExtensioner is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(RTPHeaderExtensioner)
			return ok
		})
		rv, ok := casted.(RTPHeaderExtensioner)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gstrtp.RTPHeaderExtensioner")
		}
		_ext = rv
	}

	f(_ext)
}

//export _gotk4_gstrtp1_RTPBaseDepayload_ConnectClearExtensions
func _gotk4_gstrtp1_RTPBaseDepayload_ConnectClearExtensions(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_gstrtp1_RTPBaseDepayload_ConnectRequestExtension
func _gotk4_gstrtp1_RTPBaseDepayload_ConnectRequestExtension(arg0 C.gpointer, arg1 C.guint, arg2 *C.gchar, arg3 C.guintptr) (cret *C.GstRTPHeaderExtension) {
	var f func(extId uint, extUri string) (rtpHeaderExtension RTPHeaderExtensioner)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(extId uint, extUri string) (rtpHeaderExtension RTPHeaderExtensioner))
	}

	var _extId uint    // out
	var _extUri string // out

	_extId = uint(arg1)
	if arg2 != nil {
		_extUri = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	}

	rtpHeaderExtension := f(_extId, _extUri)

	var _ RTPHeaderExtensioner

	cret = (*C.GstRTPHeaderExtension)(unsafe.Pointer(coreglib.InternObject(rtpHeaderExtension).Native()))
	C.g_object_ref(C.gpointer(coreglib.InternObject(rtpHeaderExtension).Native()))

	return cret
}
