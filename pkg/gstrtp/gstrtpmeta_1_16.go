// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <gst/rtp/rtp.h>
import "C"

// BufferAddRtpSourceMeta attaches RTP source information to buffer.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//    - ssrc (optional): pointer to the SSRC.
//    - csrc (optional): pointer to the CSRCs.
//    - csrcCount: number of elements in csrc.
//
// The function returns the following values:
//
//    - rtpSourceMeta on buffer.
//
func BufferAddRtpSourceMeta(buffer *gst.Buffer, ssrc, csrc *uint32, csrcCount uint) *RTPSourceMeta {
	var _arg1 *C.GstBuffer        // out
	var _arg2 *C.guint32          // out
	var _arg3 *C.guint32          // out
	var _arg4 C.guint             // out
	var _cret *C.GstRTPSourceMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	if ssrc != nil {
		_arg2 = (*C.guint32)(unsafe.Pointer(ssrc))
	}
	if csrc != nil {
		_arg3 = (*C.guint32)(unsafe.Pointer(csrc))
	}
	_arg4 = C.guint(csrcCount)

	_cret = C.gst_buffer_add_rtp_source_meta(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(ssrc)
	runtime.KeepAlive(csrc)
	runtime.KeepAlive(csrcCount)

	var _rtpSourceMeta *RTPSourceMeta // out

	_rtpSourceMeta = (*RTPSourceMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _rtpSourceMeta
}

// BufferGetRtpSourceMeta: find the RTPSourceMeta on buffer.
//
// The function takes the following parameters:
//
//    - buffer: Buffer.
//
// The function returns the following values:
//
//    - rtpSourceMeta or NULL when there is no such metadata on buffer.
//
func BufferGetRtpSourceMeta(buffer *gst.Buffer) *RTPSourceMeta {
	var _arg1 *C.GstBuffer        // out
	var _cret *C.GstRTPSourceMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))

	_cret = C.gst_buffer_get_rtp_source_meta(_arg1)
	runtime.KeepAlive(buffer)

	var _rtpSourceMeta *RTPSourceMeta // out

	_rtpSourceMeta = (*RTPSourceMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _rtpSourceMeta
}

// RTPSourceMeta: meta describing the source(s) of the buffer.
//
// An instance of this type is always passed by reference.
type RTPSourceMeta struct {
	*rtpSourceMeta
}

// rtpSourceMeta is the struct that's finalized.
type rtpSourceMeta struct {
	native *C.GstRTPSourceMeta
}

// Meta: parent Meta.
func (r *RTPSourceMeta) Meta() *gst.Meta {
	valptr := &r.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// Ssrc: SSRC.
func (r *RTPSourceMeta) Ssrc() uint32 {
	valptr := &r.native.ssrc
	var _v uint32 // out
	_v = uint32(*valptr)
	return _v
}

// SsrcValid: whether ssrc is set and valid.
func (r *RTPSourceMeta) SsrcValid() bool {
	valptr := &r.native.ssrc_valid
	var _v bool // out
	if *valptr != 0 {
		_v = true
	}
	return _v
}

// Csrc: pointer to the CSRCs.
func (r *RTPSourceMeta) Csrc() [15]uint32 {
	valptr := &r.native.csrc
	var _v [15]uint32 // out
	_v = *(*[15]uint32)(unsafe.Pointer(&*valptr))
	return _v
}

// CsrcCount: number of elements in csrc.
func (r *RTPSourceMeta) CsrcCount() uint {
	valptr := &r.native.csrc_count
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// SsrcValid: whether ssrc is set and valid.
func (r *RTPSourceMeta) SetSsrcValid(ssrcValid bool) {
	valptr := &r.native.ssrc_valid
	if ssrcValid {
		*valptr = C.TRUE
	}
}

// CsrcCount: number of elements in csrc.
func (r *RTPSourceMeta) SetCsrcCount(csrcCount uint) {
	valptr := &r.native.csrc_count
	*valptr = C.guint(csrcCount)
}

// AppendCsrc appends csrc to the list of contributing sources in meta.
//
// The function takes the following parameters:
//
//    - csrc csrcs to append.
//    - csrcCount: number of elements in csrc.
//
// The function returns the following values:
//
//    - ok: TRUE if all elements in csrc was added, FALSE otherwise.
//
func (meta *RTPSourceMeta) AppendCsrc(csrc *uint32, csrcCount uint) bool {
	var _arg0 *C.GstRTPSourceMeta // out
	var _arg1 *C.guint32          // out
	var _arg2 C.guint             // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstRTPSourceMeta)(gextras.StructNative(unsafe.Pointer(meta)))
	_arg1 = (*C.guint32)(unsafe.Pointer(csrc))
	_arg2 = C.guint(csrcCount)

	_cret = C.gst_rtp_source_meta_append_csrc(_arg0, _arg1, _arg2)
	runtime.KeepAlive(meta)
	runtime.KeepAlive(csrc)
	runtime.KeepAlive(csrcCount)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SourceCount: count the total number of RTP sources found in meta, both SSRC
// and CSRC.
//
// The function returns the following values:
//
//    - guint: number of RTP sources.
//
func (meta *RTPSourceMeta) SourceCount() uint {
	var _arg0 *C.GstRTPSourceMeta // out
	var _cret C.guint             // in

	_arg0 = (*C.GstRTPSourceMeta)(gextras.StructNative(unsafe.Pointer(meta)))

	_cret = C.gst_rtp_source_meta_get_source_count(_arg0)
	runtime.KeepAlive(meta)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// SetSsrc sets ssrc in meta. If ssrc is NULL the ssrc of meta will be unset.
//
// The function takes the following parameters:
//
//    - ssrc (optional): pointer to the SSRC.
//
// The function returns the following values:
//
//    - ok: TRUE on success, FALSE otherwise.
//
func (meta *RTPSourceMeta) SetSsrc(ssrc *uint32) bool {
	var _arg0 *C.GstRTPSourceMeta // out
	var _arg1 *C.guint32          // out
	var _cret C.gboolean          // in

	_arg0 = (*C.GstRTPSourceMeta)(gextras.StructNative(unsafe.Pointer(meta)))
	if ssrc != nil {
		_arg1 = (*C.guint32)(unsafe.Pointer(ssrc))
	}

	_cret = C.gst_rtp_source_meta_set_ssrc(_arg0, _arg1)
	runtime.KeepAlive(meta)
	runtime.KeepAlive(ssrc)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
