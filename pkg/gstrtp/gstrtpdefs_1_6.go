// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtp/rtp.h>
import "C"

// GType values.
var (
	GTypeRTPProfile = coreglib.Type(C.gst_rtp_profile_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTPProfile, F: marshalRTPProfile},
	})
}

// RTPProfile: transfer profile to use.
type RTPProfile C.gint

const (
	// RtpProfileUnknown: invalid profile.
	RtpProfileUnknown RTPProfile = iota
	// RtpProfileAvp: audio/Visual profile (RFC 3551).
	RtpProfileAvp
	// RtpProfileSavp: secure Audio/Visual profile (RFC 3711).
	RtpProfileSavp
	// RtpProfileAvpf: audio/Visual profile with feedback (RFC 4585).
	RtpProfileAvpf
	// RtpProfileSavpf: secure Audio/Visual profile with feedback (RFC 5124).
	RtpProfileSavpf
)

func marshalRTPProfile(p uintptr) (interface{}, error) {
	return RTPProfile(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTPProfile.
func (r RTPProfile) String() string {
	switch r {
	case RtpProfileUnknown:
		return "Unknown"
	case RtpProfileAvp:
		return "Avp"
	case RtpProfileSavp:
		return "Savp"
	case RtpProfileAvpf:
		return "Avpf"
	case RtpProfileSavpf:
		return "Savpf"
	default:
		return fmt.Sprintf("RTPProfile(%d)", r)
	}
}
