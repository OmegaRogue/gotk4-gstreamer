// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtp/rtp.h>
// extern void _gotk4_gstrtp1_RTPBaseDepayload_ConnectClearExtensions(gpointer, guintptr);
// extern void _gotk4_gstrtp1_RTPBaseDepayload_ConnectAddExtension(gpointer, GstRTPHeaderExtension*, guintptr);
// extern gboolean _gotk4_gstrtp1_RTPBaseDepayloadClass_set_caps(GstRTPBaseDepayload*, GstCaps*);
// extern gboolean _gotk4_gstrtp1_RTPBaseDepayloadClass_packet_lost(GstRTPBaseDepayload*, GstEvent*);
// extern gboolean _gotk4_gstrtp1_RTPBaseDepayloadClass_handle_event(GstRTPBaseDepayload*, GstEvent*);
// extern GstRTPHeaderExtension* _gotk4_gstrtp1_RTPBaseDepayload_ConnectRequestExtension(gpointer, guint, gchar*, guintptr);
// extern GstBuffer* _gotk4_gstrtp1_RTPBaseDepayloadClass_process_rtp_packet(GstRTPBaseDepayload*, GstRTPBuffer*);
// extern GstBuffer* _gotk4_gstrtp1_RTPBaseDepayloadClass_process(GstRTPBaseDepayload*, GstBuffer*);
// GstBuffer* _gotk4_gstrtp1_RTPBaseDepayload_virtual_process(void* fnptr, GstRTPBaseDepayload* arg0, GstBuffer* arg1) {
//   return ((GstBuffer* (*)(GstRTPBaseDepayload*, GstBuffer*))(fnptr))(arg0, arg1);
// };
// GstBuffer* _gotk4_gstrtp1_RTPBaseDepayload_virtual_process_rtp_packet(void* fnptr, GstRTPBaseDepayload* arg0, GstRTPBuffer* arg1) {
//   return ((GstBuffer* (*)(GstRTPBaseDepayload*, GstRTPBuffer*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstrtp1_RTPBaseDepayload_virtual_handle_event(void* fnptr, GstRTPBaseDepayload* arg0, GstEvent* arg1) {
//   return ((gboolean (*)(GstRTPBaseDepayload*, GstEvent*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstrtp1_RTPBaseDepayload_virtual_packet_lost(void* fnptr, GstRTPBaseDepayload* arg0, GstEvent* arg1) {
//   return ((gboolean (*)(GstRTPBaseDepayload*, GstEvent*))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_gstrtp1_RTPBaseDepayload_virtual_set_caps(void* fnptr, GstRTPBaseDepayload* arg0, GstCaps* arg1) {
//   return ((gboolean (*)(GstRTPBaseDepayload*, GstCaps*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeRTPBaseDepayload = coreglib.Type(C.gst_rtp_base_depayload_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTPBaseDepayload, F: marshalRTPBaseDepayload},
	})
}

// RTPBaseDepayloadOverrides contains methods that are overridable.
type RTPBaseDepayloadOverrides struct {
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	HandleEvent func(event *gst.Event) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	PacketLost func(event *gst.Event) bool
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	Process func(in *gst.Buffer) *gst.Buffer
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	ProcessRtpPacket func(rtpBuffer *RTPBuffer) *gst.Buffer
	// The function takes the following parameters:
	//
	// The function returns the following values:
	//
	SetCaps func(caps *gst.Caps) bool
}

func defaultRTPBaseDepayloadOverrides(v *RTPBaseDepayload) RTPBaseDepayloadOverrides {
	return RTPBaseDepayloadOverrides{
		HandleEvent:      v.handleEvent,
		PacketLost:       v.packetLost,
		Process:          v.process,
		ProcessRtpPacket: v.processRtpPacket,
		SetCaps:          v.setCaps,
	}
}

// RTPBaseDepayload provides a base class for RTP depayloaders.
type RTPBaseDepayload struct {
	_ [0]func() // equal guard
	gst.Element
}

var (
	_ gst.Elementer = (*RTPBaseDepayload)(nil)
)

// RTPBaseDepayloader describes types inherited from class RTPBaseDepayload.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type RTPBaseDepayloader interface {
	coreglib.Objector
	baseRTPBaseDepayload() *RTPBaseDepayload
}

var _ RTPBaseDepayloader = (*RTPBaseDepayload)(nil)

func init() {
	coreglib.RegisterClassInfo[*RTPBaseDepayload, *RTPBaseDepayloadClass, RTPBaseDepayloadOverrides](
		GTypeRTPBaseDepayload,
		initRTPBaseDepayloadClass,
		wrapRTPBaseDepayload,
		defaultRTPBaseDepayloadOverrides,
	)
}

func initRTPBaseDepayloadClass(gclass unsafe.Pointer, overrides RTPBaseDepayloadOverrides, classInitFunc func(*RTPBaseDepayloadClass)) {
	pclass := (*C.GstRTPBaseDepayloadClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeRTPBaseDepayload))))

	if overrides.HandleEvent != nil {
		pclass.handle_event = (*[0]byte)(C._gotk4_gstrtp1_RTPBaseDepayloadClass_handle_event)
	}

	if overrides.PacketLost != nil {
		pclass.packet_lost = (*[0]byte)(C._gotk4_gstrtp1_RTPBaseDepayloadClass_packet_lost)
	}

	if overrides.Process != nil {
		pclass.process = (*[0]byte)(C._gotk4_gstrtp1_RTPBaseDepayloadClass_process)
	}

	if overrides.ProcessRtpPacket != nil {
		pclass.process_rtp_packet = (*[0]byte)(C._gotk4_gstrtp1_RTPBaseDepayloadClass_process_rtp_packet)
	}

	if overrides.SetCaps != nil {
		pclass.set_caps = (*[0]byte)(C._gotk4_gstrtp1_RTPBaseDepayloadClass_set_caps)
	}

	if classInitFunc != nil {
		class := (*RTPBaseDepayloadClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRTPBaseDepayload(obj *coreglib.Object) *RTPBaseDepayload {
	return &RTPBaseDepayload{
		Element: gst.Element{
			GstObject: gst.GstObject{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
			},
		},
	}
}

func marshalRTPBaseDepayload(p uintptr) (interface{}, error) {
	return wrapRTPBaseDepayload(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (depayload *RTPBaseDepayload) baseRTPBaseDepayload() *RTPBaseDepayload {
	return depayload
}

// BaseRTPBaseDepayload returns the underlying base object.
func BaseRTPBaseDepayload(obj RTPBaseDepayloader) *RTPBaseDepayload {
	return obj.baseRTPBaseDepayload()
}

// ConnectAddExtension: add ext as an extension for reading part of an RTP
// header extension from incoming RTP packets.
func (depayload *RTPBaseDepayload) ConnectAddExtension(f func(ext RTPHeaderExtensioner)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(depayload, "add-extension", false, unsafe.Pointer(C._gotk4_gstrtp1_RTPBaseDepayload_ConnectAddExtension), f)
}

// ConnectClearExtensions: clear all RTP header extensions used by this
// depayloader.
func (depayload *RTPBaseDepayload) ConnectClearExtensions(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(depayload, "clear-extensions", false, unsafe.Pointer(C._gotk4_gstrtp1_RTPBaseDepayload_ConnectClearExtensions), f)
}

// ConnectRequestExtension: returned ext must be configured with the correct
// ext_id and with the necessary attributes as required by the extension
// implementation.
func (depayload *RTPBaseDepayload) ConnectRequestExtension(f func(extId uint, extUri string) (rtpHeaderExtension RTPHeaderExtensioner)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(depayload, "request-extension", false, unsafe.Pointer(C._gotk4_gstrtp1_RTPBaseDepayload_ConnectRequestExtension), f)
}

// IsSourceInfoEnabled queries whether RTPSourceMeta will be added to
// depayloaded buffers.
//
// The function returns the following values:
//
//    - ok: TRUE if source-info is enabled.
//
func (depayload *RTPBaseDepayload) IsSourceInfoEnabled() bool {
	var _arg0 *C.GstRTPBaseDepayload // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(depayload).Native()))

	_cret = C.gst_rtp_base_depayload_is_source_info_enabled(_arg0)
	runtime.KeepAlive(depayload)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Push out_buf to the peer of filter. This function takes ownership of out_buf.
//
// This function will by default apply the last incoming timestamp on the
// outgoing buffer when it didn't have a timestamp already.
//
// The function takes the following parameters:
//
//    - outBuf: Buffer.
//
// The function returns the following values:
//
//    - flowReturn: FlowReturn.
//
func (filter *RTPBaseDepayload) Push(outBuf *gst.Buffer) gst.FlowReturn {
	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstBuffer           // out
	var _cret C.GstFlowReturn        // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(outBuf)))

	_cret = C.gst_rtp_base_depayload_push(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(outBuf)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}

// PushList: push out_list to the peer of filter. This function takes ownership
// of out_list.
//
// The function takes the following parameters:
//
//    - outList: BufferList.
//
// The function returns the following values:
//
//    - flowReturn: FlowReturn.
//
func (filter *RTPBaseDepayload) PushList(outList *gst.BufferList) gst.FlowReturn {
	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstBufferList       // out
	var _cret C.GstFlowReturn        // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstBufferList)(gextras.StructNative(unsafe.Pointer(outList)))

	_cret = C.gst_rtp_base_depayload_push_list(_arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(outList)

	var _flowReturn gst.FlowReturn // out

	_flowReturn = gst.FlowReturn(_cret)

	return _flowReturn
}

// SetSourceInfoEnabled: enable or disable adding RTPSourceMeta to depayloaded
// buffers.
//
// The function takes the following parameters:
//
//    - enable: whether to add meta about RTP sources to buffer.
//
func (depayload *RTPBaseDepayload) SetSourceInfoEnabled(enable bool) {
	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 C.gboolean             // out

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(depayload).Native()))
	if enable {
		_arg1 = C.TRUE
	}

	C.gst_rtp_base_depayload_set_source_info_enabled(_arg0, _arg1)
	runtime.KeepAlive(depayload)
	runtime.KeepAlive(enable)
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (filter *RTPBaseDepayload) handleEvent(event *gst.Event) bool {
	gclass := (*C.GstRTPBaseDepayloadClass)(coreglib.PeekParentClass(filter))
	fnarg := gclass.handle_event

	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstEvent            // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstEvent)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C._gotk4_gstrtp1_RTPBaseDepayload_virtual_handle_event(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (filter *RTPBaseDepayload) packetLost(event *gst.Event) bool {
	gclass := (*C.GstRTPBaseDepayloadClass)(coreglib.PeekParentClass(filter))
	fnarg := gclass.packet_lost

	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstEvent            // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstEvent)(gextras.StructNative(unsafe.Pointer(event)))

	_cret = C._gotk4_gstrtp1_RTPBaseDepayload_virtual_packet_lost(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(event)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (base *RTPBaseDepayload) process(in *gst.Buffer) *gst.Buffer {
	gclass := (*C.GstRTPBaseDepayloadClass)(coreglib.PeekParentClass(base))
	fnarg := gclass.process

	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstBuffer           // out
	var _cret *C.GstBuffer           // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(base).Native()))
	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(in)))

	_cret = C._gotk4_gstrtp1_RTPBaseDepayload_virtual_process(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(base)
	runtime.KeepAlive(in)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (base *RTPBaseDepayload) processRtpPacket(rtpBuffer *RTPBuffer) *gst.Buffer {
	gclass := (*C.GstRTPBaseDepayloadClass)(coreglib.PeekParentClass(base))
	fnarg := gclass.process_rtp_packet

	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstRTPBuffer        // out
	var _cret *C.GstBuffer           // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(base).Native()))
	_arg1 = (*C.GstRTPBuffer)(gextras.StructNative(unsafe.Pointer(rtpBuffer)))

	_cret = C._gotk4_gstrtp1_RTPBaseDepayload_virtual_process_rtp_packet(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(base)
	runtime.KeepAlive(rtpBuffer)

	var _buffer *gst.Buffer // out

	_buffer = (*gst.Buffer)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_buffer)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.free(intern.C)
		},
	)

	return _buffer
}

// The function takes the following parameters:
//
// The function returns the following values:
//
func (filter *RTPBaseDepayload) setCaps(caps *gst.Caps) bool {
	gclass := (*C.GstRTPBaseDepayloadClass)(coreglib.PeekParentClass(filter))
	fnarg := gclass.set_caps

	var _arg0 *C.GstRTPBaseDepayload // out
	var _arg1 *C.GstCaps             // out
	var _cret C.gboolean             // in

	_arg0 = (*C.GstRTPBaseDepayload)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	_arg1 = (*C.GstCaps)(gextras.StructNative(unsafe.Pointer(caps)))

	_cret = C._gotk4_gstrtp1_RTPBaseDepayload_virtual_set_caps(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(caps)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RTPBaseDepayloadClass: base class for RTP depayloaders.
//
// An instance of this type is always passed by reference.
type RTPBaseDepayloadClass struct {
	*rtpBaseDepayloadClass
}

// rtpBaseDepayloadClass is the struct that's finalized.
type rtpBaseDepayloadClass struct {
	native *C.GstRTPBaseDepayloadClass
}

// ParentClass: parent class.
func (r *RTPBaseDepayloadClass) ParentClass() *gst.ElementClass {
	valptr := &r.native.parent_class
	var _v *gst.ElementClass // out
	_v = (*gst.ElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
