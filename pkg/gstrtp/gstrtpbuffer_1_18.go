// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <gst/rtp/rtp.h>
import "C"

// RTPBufferGetExtensionOnebyteHeaderFromBytes: similar to
// gst_rtp_buffer_get_extension_onebyte_header, but working on the #GBytes you
// get from gst_rtp_buffer_get_extension_bytes. Parses RFC 5285 style header
// extensions with a one byte header. It will return the nth extension with the
// requested id.
//
// The function takes the following parameters:
//
//    - bytes: #GBytes.
//    - bitPattern: bit-pattern. Anything but 0xBEDE is rejected.
//    - id: ID of the header extension to be read (between 1 and 14).
//    - nth: read the nth extension packet with the requested ID.
//
// The function returns the following values:
//
//    - data: location for data.
//    - ok: TRUE if bytes had the requested header extension.
//
func RTPBufferGetExtensionOnebyteHeaderFromBytes(bytes *glib.Bytes, bitPattern uint16, id byte, nth uint) ([]byte, bool) {
	var _arg1 *C.GBytes  // out
	var _arg2 C.guint16  // out
	var _arg3 C.guint8   // out
	var _arg4 C.guint    // out
	var _arg5 C.gpointer // in
	var _arg6 C.guint    // in
	var _cret C.gboolean // in

	_arg1 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(bytes)))
	_arg2 = C.guint16(bitPattern)
	_arg3 = C.guint8(id)
	_arg4 = C.guint(nth)

	_cret = C.gst_rtp_buffer_get_extension_onebyte_header_from_bytes(_arg1, _arg2, _arg3, _arg4, &_arg5, &_arg6)
	runtime.KeepAlive(bytes)
	runtime.KeepAlive(bitPattern)
	runtime.KeepAlive(id)
	runtime.KeepAlive(nth)

	var _data []byte // out
	var _ok bool     // out

	_data = make([]byte, _arg6)
	copy(_data, unsafe.Slice((*byte)(unsafe.Pointer(_arg5)), _arg6))
	if _cret != 0 {
		_ok = true
	}

	return _data, _ok
}
