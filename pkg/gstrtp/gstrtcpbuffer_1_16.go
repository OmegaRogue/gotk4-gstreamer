// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtp/rtp.h>
import "C"

// GType values.
var (
	GTypeRTCPXRType = coreglib.Type(C.gst_rtcpxr_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTCPXRType, F: marshalRTCPXRType},
	})
}

// RTCPXRType types of RTCP Extended Reports, those are defined in RFC 3611 and
// other RFCs according to the IANA registry
// (https://www.iana.org/assignments/rtcp-xr-block-types/rtcp-xr-block-types.xhtml).
type RTCPXRType C.gint

const (
	// RtcpXRTypeInvalid: invalid XR Report Block.
	RtcpXRTypeInvalid RTCPXRType = -1
	// RtcpXRTypeLrle loss RLE Report Block.
	RtcpXRTypeLrle RTCPXRType = 1
	// RtcpXRTypeDrle: duplicate RLE Report Block.
	RtcpXRTypeDrle RTCPXRType = 2
	// RtcpXRTypePrt: packet Receipt Times Report Block.
	RtcpXRTypePrt RTCPXRType = 3
	// RtcpXRTypeRrt: receiver Reference Time Report Block.
	RtcpXRTypeRrt RTCPXRType = 4
	// RtcpXRTypeDlrr: delay since the last Receiver Report.
	RtcpXRTypeDlrr RTCPXRType = 5
	// RtcpXRTypeSsumm statistics Summary Report Block.
	RtcpXRTypeSsumm RTCPXRType = 6
	// RtcpXRTypeVoipMetrics: voIP Metrics Report Block.
	RtcpXRTypeVoipMetrics RTCPXRType = 7
)

func marshalRTCPXRType(p uintptr) (interface{}, error) {
	return RTCPXRType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RTCPXRType.
func (r RTCPXRType) String() string {
	switch r {
	case RtcpXRTypeInvalid:
		return "Invalid"
	case RtcpXRTypeLrle:
		return "Lrle"
	case RtcpXRTypeDrle:
		return "Drle"
	case RtcpXRTypePrt:
		return "Prt"
	case RtcpXRTypeRrt:
		return "Rrt"
	case RtcpXRTypeDlrr:
		return "Dlrr"
	case RtcpXRTypeSsumm:
		return "Ssumm"
	case RtcpXRTypeVoipMetrics:
		return "VoipMetrics"
	default:
		return fmt.Sprintf("RTCPXRType(%d)", r)
	}
}
