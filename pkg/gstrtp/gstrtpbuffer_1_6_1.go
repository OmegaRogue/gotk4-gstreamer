// Code generated by girgen. DO NOT EDIT.

package gstrtp

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/rtp/rtp.h>
import "C"

// GType values.
var (
	GTypeRTPBufferMapFlags = coreglib.Type(C.gst_rtp_buffer_map_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRTPBufferMapFlags, F: marshalRTPBufferMapFlags},
	})
}

// RTPBufferMapFlags: additional mapping flags for gst_rtp_buffer_map().
type RTPBufferMapFlags C.guint

const (
	// RtpBufferMapFlagSkipPadding: skip mapping and validation of RTP padding
	// and RTP pad count when present. Useful for buffers where the padding may
	// be encrypted.
	RtpBufferMapFlagSkipPadding RTPBufferMapFlags = 0b10000000000000000
	// RtpBufferMapFlagLast: offset to define more flags.
	RtpBufferMapFlagLast RTPBufferMapFlags = 0b1000000000000000000000000
)

func marshalRTPBufferMapFlags(p uintptr) (interface{}, error) {
	return RTPBufferMapFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for RTPBufferMapFlags.
func (r RTPBufferMapFlags) String() string {
	if r == 0 {
		return "RTPBufferMapFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(48)

	for r != 0 {
		next := r & (r - 1)
		bit := r - next

		switch bit {
		case RtpBufferMapFlagSkipPadding:
			builder.WriteString("SkipPadding|")
		case RtpBufferMapFlagLast:
			builder.WriteString("Last|")
		default:
			builder.WriteString(fmt.Sprintf("RTPBufferMapFlags(0b%b)|", bit))
		}

		r = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if r contains other.
func (r RTPBufferMapFlags) Has(other RTPBufferMapFlags) bool {
	return (r & other) == other
}
